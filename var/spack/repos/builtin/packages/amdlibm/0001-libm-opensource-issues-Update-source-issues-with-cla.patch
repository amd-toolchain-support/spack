From 491cd5a34272e100667dfe8a649d1d395b280ff4 Mon Sep 17 00:00:00 2001
From: Pranoy Jayaraj <Pranoy.Jayaraj@amd.com>
Date: Sat, 19 Dec 2020 23:16:11 +0530
Subject: [PATCH] libm:opensource issues:Update source issues with clang build

---
 include/external/amdlibm_vec.h     |   9 +-
 include/libm/__alm_func_internal.h |  16 +-
 include/libm/arch/avx2.h           |  98 ++++++
 include/libm/arch/zen3.h           |  71 +++++
 include/libm/cpu_features.h        | 260 ++++++++--------
 include/libm/entry_pt.h            | 397 ++++++++++++------------
 include/libm/iface.h               |  41 +++
 include/libm/poly.h                |  81 ++++-
 include/libm/typehelper-vec.h      |  99 +++++-
 include/libm_amd.h                 |  32 +-
 include/libm_macros.h              |   7 -
 include/libm_special.h             |   1 +
 include/libm_util_amd.h            |   2 +-
 src/arch/SConscript                |   2 +-
 src/arch/zen2/cos.c                |  31 ++
 src/arch/zen2/coshf.c              |  31 ++
 src/arch/zen2/tan.c                |  32 ++
 src/arch/zen2/tanhf.c              |  31 ++
 src/arch/zen2/vrd2_cos.c           |  31 ++
 src/arch/zen2/vrd2_exp.c           |  31 ++
 src/arch/zen2/vrd2_log.c           |  31 ++
 src/arch/zen2/vrd2_pow.c           |  31 ++
 src/arch/zen2/vrd2_tan.c           |  31 ++
 src/arch/zen2/vrd4_cos.c           |  31 ++
 src/arch/zen2/vrd4_exp.c           |  31 ++
 src/arch/zen2/vrd4_log.c           |  31 ++
 src/arch/zen2/vrd4_pow.c           |  31 ++
 src/arch/zen2/vrd4_tan.c           |  31 ++
 src/arch/zen2/vrs4_coshf.c         |  31 ++
 src/arch/zen2/vrs4_expf.c          |  31 ++
 src/arch/zen2/vrs4_logf.c          |  31 ++
 src/arch/zen2/vrs4_powf.c          |  31 ++
 src/arch/zen2/vrs4_tanf.c          |   4 +-
 src/arch/zen2/vrs4_tanhf.c         |  31 ++
 src/arch/zen2/vrs8_coshf.c         |   4 +
 src/arch/zen2/vrs8_expf.c          |  32 ++
 src/arch/zen2/vrs8_logf.c          |  32 ++
 src/arch/zen2/vrs8_powf.c          |  32 ++
 src/arch/zen2/vrs8_tanhf.c         |  31 ++
 src/arch/zen3/SConscript           |  58 ++++
 src/arch/zen3/cos.c                |  31 ++
 src/arch/zen3/cosf.c               |  31 ++
 src/arch/zen3/coshf.c              |  31 ++
 src/arch/zen3/exp.c                |  33 ++
 src/arch/zen3/exp2.c               |  32 ++
 src/arch/zen3/expf.c               |  32 ++
 src/arch/zen3/expm1f.c             |  33 ++
 src/arch/zen3/log.c                |  32 ++
 src/arch/zen3/logf.c               |  32 ++
 src/arch/zen3/pow.c                |  32 ++
 src/arch/zen3/powf.c               |  32 ++
 src/arch/zen3/sin.c                |  33 ++
 src/arch/zen3/sinf.c               |  31 ++
 src/arch/zen3/tan.c                |  32 ++
 src/arch/zen3/tanf.c               |  32 ++
 src/arch/zen3/tanhf.c              |  31 ++
 src/arch/zen3/vrd2_cos.c           |  31 ++
 src/arch/zen3/vrd2_exp.c           |  31 ++
 src/arch/zen3/vrd2_log.c           |  31 ++
 src/arch/zen3/vrd2_pow.c           |  31 ++
 src/arch/zen3/vrd2_sin.c           |  31 ++
 src/arch/zen3/vrd2_tan.c           |  31 ++
 src/arch/zen3/vrd4_cos.c           |  31 ++
 src/arch/zen3/vrd4_exp.c           |  31 ++
 src/arch/zen3/vrd4_log.c           |  31 ++
 src/arch/zen3/vrd4_pow.c           |  31 ++
 src/arch/zen3/vrd4_sin.c           |  31 ++
 src/arch/zen3/vrd4_tan.c           |  31 ++
 src/arch/zen3/vrs4_cosf.c          |  31 ++
 src/arch/zen3/vrs4_coshf.c         |  31 ++
 src/arch/zen3/vrs4_expf.c          |  31 ++
 src/arch/zen3/vrs4_logf.c          |  31 ++
 src/arch/zen3/vrs4_powf.c          |  31 ++
 src/arch/zen3/vrs4_sinf.c          |  31 ++
 src/arch/zen3/vrs4_tanf.c          |  32 ++
 src/arch/zen3/vrs4_tanhf.c         |  31 ++
 src/arch/zen3/vrs8_cosf.c          |  31 ++
 src/arch/zen3/vrs8_coshf.c         |   4 +
 src/arch/zen3/vrs8_expf.c          |  32 ++
 src/arch/zen3/vrs8_logf.c          |  32 ++
 src/arch/zen3/vrs8_powf.c          |  32 ++
 src/arch/zen3/vrs8_sinf.c          |  31 ++
 src/arch/zen3/vrs8_tanf.c          |  31 ++
 src/arch/zen3/vrs8_tanhf.c         |  31 ++
 src/cpu_features.c                 |  96 ++++--
 src/entry_pt.c                     | 477 ++++++++++++----------------
 src/entry_pt_map.c                 |   6 +
 src/fast/SConscript                |  12 +-
 src/fast/powf.c                    | 323 +++++++++++++++++++
 src/fast/tan.c                     | 210 +++++++++++++
 src/iface.c                        |  78 +++++
 src/iface/acos.c                   |  43 ++-
 src/iface/acosh.c                  |  43 ++-
 src/iface/asin.c                   |  43 ++-
 src/iface/asinh.c                  |  43 ++-
 src/iface/atan.c                   |  43 ++-
 src/iface/atan2.c                  |  43 ++-
 src/iface/atanh.c                  |  43 ++-
 src/iface/cbrt.c                   |  43 ++-
 src/iface/ceil.c                   |  43 ++-
 src/iface/copysign.c               |  43 ++-
 src/iface/cos.c                    | 121 +++-----
 src/iface/cosh.c                   |  59 +++-
 src/iface/cospi.c                  |  43 ++-
 src/iface/exp.c                    | 117 +++----
 src/iface/exp10.c                  |  42 ++-
 src/iface/exp2.c                   |  83 ++---
 src/iface/expm1.c                  |  51 ++-
 src/iface/fabs.c                   |  43 ++-
 src/iface/fdim.c                   |  43 ++-
 src/iface/finite.c                 |  43 ++-
 src/iface/floor.c                  |  43 ++-
 src/iface/fma.c                    |  43 ++-
 src/iface/fmax.c                   |  43 ++-
 src/iface/fmin.c                   |  43 ++-
 src/iface/fmod.c                   |  43 ++-
 src/iface/frexp.c                  |  53 +++-
 src/iface/hypot.c                  |  53 +++-
 src/iface/ilogb.c                  |  53 +++-
 src/iface/ldexp.c                  |  53 +++-
 src/iface/llrint.c                 |  53 +++-
 src/iface/llround.c                |  53 +++-
 src/iface/log.c                    | 117 +++----
 src/iface/log10.c                  |  61 +++-
 src/iface/log1p.c                  |  61 +++-
 src/iface/log2.c                   |  61 +++-
 src/iface/logb.c                   |  61 +++-
 src/iface/lrint.c                  |  53 +++-
 src/iface/lround.c                 |  53 +++-
 src/iface/modf.c                   |  53 +++-
 src/iface/nan.c                    |  53 +++-
 src/iface/nearbyint.c              |  53 +++-
 src/iface/nextafter.c              |  53 +++-
 src/iface/nexttoward.c             |  53 +++-
 src/iface/pow.c                    | 117 +++----
 src/iface/remainder.c              |  53 +++-
 src/iface/remquo.c                 |  53 +++-
 src/iface/rint.c                   |  53 +++-
 src/iface/round.c                  |  53 +++-
 src/iface/scalbln.c                |  53 +++-
 src/iface/scalbn.c                 |  53 +++-
 src/iface/sin.c                    | 145 +++------
 src/iface/sinh.c                   |  53 +++-
 src/iface/sinpi.c                  |  53 +++-
 src/iface/sqrt.c                   |  53 +++-
 src/iface/tan.c                    | 108 +++----
 src/iface/tanh.c                   |  59 +++-
 src/iface/tanpi.c                  |  53 +++-
 src/iface/trunc.c                  |  53 +++-
 src/isa/SConscript                 |  15 +-
 src/isa/avx2/SConscript            |   1 +
 src/isa/avx2/cos.c                 |  31 ++
 src/isa/avx2/cosf.c                |  31 ++
 src/isa/avx2/coshf.c               |  31 ++
 src/isa/avx2/exp.c                 |  33 ++
 src/isa/avx2/exp2.c                |  32 ++
 src/isa/avx2/expf.c                |  32 ++
 src/isa/avx2/expm1f.c              |  33 ++
 src/isa/avx2/log.c                 |  32 ++
 src/isa/avx2/logf.c                |  31 ++
 src/isa/avx2/pow.c                 |  32 ++
 src/isa/avx2/powf.c                |  32 ++
 src/isa/avx2/sin.c                 |  33 ++
 src/isa/avx2/sinf.c                |  31 ++
 src/isa/avx2/tan.c                 |  32 ++
 src/isa/avx2/tanf.c                |  32 ++
 src/isa/avx2/tanhf.c               |  31 ++
 src/isa/avx2/vrd2_cos.c            |  31 ++
 src/isa/avx2/vrd2_exp.c            |  31 ++
 src/isa/avx2/vrd2_log.c            |  31 ++
 src/isa/avx2/vrd2_pow.c            |  31 ++
 src/isa/avx2/vrd2_sin.c            |  31 ++
 src/isa/avx2/vrd2_tan.c            |  31 ++
 src/isa/avx2/vrd4_cos.c            |  31 ++
 src/isa/avx2/vrd4_exp.c            |  31 ++
 src/isa/avx2/vrd4_log.c            |  31 ++
 src/isa/avx2/vrd4_pow.c            |  31 ++
 src/isa/avx2/vrd4_sin.c            |  31 ++
 src/isa/avx2/vrd4_tan.c            |  31 ++
 src/isa/avx2/vrs4_cosf.c           |  31 ++
 src/isa/avx2/vrs4_coshf.c          |  31 ++
 src/isa/avx2/vrs4_expf.c           |  31 ++
 src/isa/avx2/vrs4_logf.c           |  31 ++
 src/isa/avx2/vrs4_powf.c           |  31 ++
 src/isa/avx2/vrs4_sinf.c           |  31 ++
 src/isa/avx2/vrs4_tanf.c           |  32 ++
 src/isa/avx2/vrs4_tanhf.c          |  31 ++
 src/isa/avx2/vrs8_cosf.c           |  31 ++
 src/isa/avx2/vrs8_coshf.c          |   4 +
 src/isa/avx2/vrs8_expf.c           |  32 ++
 src/isa/avx2/vrs8_logf.c           |  32 ++
 src/isa/avx2/vrs8_powf.c           |  32 ++
 src/isa/avx2/vrs8_sinf.c           |  31 ++
 src/isa/avx2/vrs8_tanf.c           |  31 ++
 src/isa/avx2/vrs8_tanhf.c          |  31 ++
 src/libm_special.c                 |   9 +-
 src/optmized/cos.c                 | 319 +++++++++++++++++++
 src/optmized/cosf.c                | 318 +++++++++++++------
 src/optmized/coshf.c               | 190 ++++++++++++
 src/optmized/expf.c                |   8 +-
 src/optmized/expf_data.h           |   2 +-
 src/optmized/expm1f.c              |   2 +-
 src/optmized/expm1f_data.h         |   4 +-
 src/optmized/log.c                 |  17 +-
 src/optmized/log_data.h            |   2 +-
 src/optmized/log_tables.c          |   9 +-
 src/optmized/log_v3.c              |  22 ++
 src/optmized/logf.c                |   8 +-
 src/optmized/logf_data.h           |   2 +-
 src/optmized/powf.c                |   8 +-
 src/optmized/sinf.c                | 271 +++++++++++-----
 src/optmized/tan.c                 | 407 ++++++++++++++++++++++++
 src/optmized/tanf.c                | 481 ++++++++++++++++++-----------
 src/optmized/tanhf.c               | 180 +++++++++++
 src/optmized/vec/alm_special.c     |  10 +
 src/optmized/vec/vrd2_cos.c        | 187 +++++++++++
 src/optmized/vec/vrd2_exp.c        |  35 +--
 src/optmized/vec/vrd2_log.c        |   5 +-
 src/optmized/vec/vrd2_pow.c        |  25 +-
 src/optmized/vec/vrd2_sin.c        |   4 +-
 src/optmized/vec/vrd2_tan.c        | 217 +++++++++++++
 src/optmized/vec/vrd4_cos.c        | 189 ++++++++++++
 src/optmized/vec/vrd4_exp.c        |  37 +--
 src/optmized/vec/vrd4_log.c        |   9 +-
 src/optmized/vec/vrd4_pow.c        |  27 +-
 src/optmized/vec/vrd4_sin.c        |   4 +-
 src/optmized/vec/vrd4_tan.c        | 218 +++++++++++++
 src/optmized/vec/vrs4_cosf.c       | 120 ++++---
 src/optmized/vec/vrs4_coshf.c      | 123 ++++++++
 src/optmized/vec/vrs4_expf.c       |   3 +-
 src/optmized/vec/vrs4_logf.c       |   5 +-
 src/optmized/vec/vrs4_powf.c       |  41 ++-
 src/optmized/vec/vrs4_sinf.c       |   6 +-
 src/optmized/vec/vrs4_tanf.c       |   8 +-
 src/optmized/vec/vrs4_tanhf.c      | 123 ++++++++
 src/optmized/vec/vrs8_cosf.c       |  11 +-
 src/optmized/vec/vrs8_coshf.c      | 101 ++++++
 src/optmized/vec/vrs8_expf.c       |  15 +-
 src/optmized/vec/vrs8_logf.c       |   7 +-
 src/optmized/vec/vrs8_powf.c       |  17 +-
 src/optmized/vec/vrs8_sinf.c       |   8 +-
 src/optmized/vec/vrs8_tanf.c       |   6 +-
 src/optmized/vec/vrs8_tanhf.c      |  94 ++++++
 src/ref/acos.c                     |  46 +--
 src/ref/acosf.c                    |  46 +--
 src/ref/acosh.c                    |  46 +--
 src/ref/acoshf.c                   |  46 +--
 src/ref/asin.c                     |  46 +--
 src/ref/asinf.c                    |  46 +--
 src/ref/asinh.c                    |  46 +--
 src/ref/asinhf.c                   |  46 +--
 src/ref/atan.c                     |  46 +--
 src/ref/atanf.c                    |  46 +--
 src/ref/ceil.c                     |  46 +--
 src/ref/ceilf.c                    |  46 +--
 src/ref/cmplx/SConscript           |   3 +-
 src/ref/cosh.c                     |  46 +--
 src/ref/coshf.c                    |  46 +--
 src/ref/finite.c                   |  46 +--
 src/ref/finitef.c                  |  46 +--
 src/ref/floor.c                    |  46 +--
 src/ref/floorf.c                   |  46 +--
 src/ref/frexp.c                    |  46 +--
 src/ref/hypot.c                    |  46 +--
 src/ref/hypotf.c                   |  46 +--
 src/ref/ldexp.c                    |  46 +--
 src/ref/ldexpf.c                   |  46 +--
 src/ref/llrint.c                   |  46 +--
 src/ref/llrintf.c                  |  46 +--
 src/ref/logb.c                     |  46 +--
 src/ref/logbf.c                    |  46 +--
 src/ref/lround.c                   |  46 +--
 src/ref/modf.c                     |  46 +--
 src/ref/modff.c                    |  46 +--
 src/ref/nan.c                      |  46 +--
 src/ref/nanf.c                     |  46 +--
 src/ref/nearbyintf.c               |  46 +--
 src/ref/nextafter.c                |   2 -
 src/ref/nexttowardf.c              |   1 +
 src/ref/remainder_piby2.c          |  46 +--
 src/ref/remainder_piby2d2f.c       |  46 +--
 src/ref/remquo.c                   |  46 +--
 src/ref/rint.c                     |  46 +--
 src/ref/rintf.c                    |  46 +--
 src/ref/roundf.c                   |  46 +--
 src/ref/scalbln.c                  |  46 +--
 src/ref/scalblnf.c                 |  46 +--
 src/ref/scalbn.c                   |  46 +--
 src/ref/scalbnf.c                  |  46 +--
 src/ref/sinh.c                     |  46 +--
 src/ref/sinhf.c                    |  46 +--
 src/ref/sqrt.c                     |  46 +--
 src/ref/sqrtf.c                    |  46 +--
 src/ref/tan.c                      |  46 +--
 src/ref/tanf.c                     |  46 +--
 src/ref/tanh.c                     |  46 +--
 src/ref/tanhf.c                    |  46 +--
 src/ref/vrd2_cosh.c                |  46 +--
 src/ref/vrd4_expm1.c               |  46 +--
 src/version.build.h                |   2 +-
 300 files changed, 12041 insertions(+), 3497 deletions(-)
 create mode 100644 include/libm/arch/avx2.h
 create mode 100644 include/libm/arch/zen3.h
 create mode 100644 src/arch/zen2/cos.c
 create mode 100644 src/arch/zen2/coshf.c
 create mode 100644 src/arch/zen2/tan.c
 create mode 100644 src/arch/zen2/tanhf.c
 create mode 100644 src/arch/zen2/vrd2_cos.c
 create mode 100644 src/arch/zen2/vrd2_exp.c
 create mode 100644 src/arch/zen2/vrd2_log.c
 create mode 100644 src/arch/zen2/vrd2_pow.c
 create mode 100644 src/arch/zen2/vrd2_tan.c
 create mode 100644 src/arch/zen2/vrd4_cos.c
 create mode 100644 src/arch/zen2/vrd4_exp.c
 create mode 100644 src/arch/zen2/vrd4_log.c
 create mode 100644 src/arch/zen2/vrd4_pow.c
 create mode 100644 src/arch/zen2/vrd4_tan.c
 create mode 100644 src/arch/zen2/vrs4_coshf.c
 create mode 100644 src/arch/zen2/vrs4_expf.c
 create mode 100644 src/arch/zen2/vrs4_logf.c
 create mode 100644 src/arch/zen2/vrs4_powf.c
 create mode 100644 src/arch/zen2/vrs4_tanhf.c
 create mode 100644 src/arch/zen2/vrs8_coshf.c
 create mode 100644 src/arch/zen2/vrs8_expf.c
 create mode 100644 src/arch/zen2/vrs8_logf.c
 create mode 100644 src/arch/zen2/vrs8_powf.c
 create mode 100644 src/arch/zen2/vrs8_tanhf.c
 create mode 100644 src/arch/zen3/SConscript
 create mode 100644 src/arch/zen3/cos.c
 create mode 100644 src/arch/zen3/cosf.c
 create mode 100644 src/arch/zen3/coshf.c
 create mode 100644 src/arch/zen3/exp.c
 create mode 100644 src/arch/zen3/exp2.c
 create mode 100644 src/arch/zen3/expf.c
 create mode 100644 src/arch/zen3/expm1f.c
 create mode 100644 src/arch/zen3/log.c
 create mode 100644 src/arch/zen3/logf.c
 create mode 100644 src/arch/zen3/pow.c
 create mode 100644 src/arch/zen3/powf.c
 create mode 100644 src/arch/zen3/sin.c
 create mode 100644 src/arch/zen3/sinf.c
 create mode 100644 src/arch/zen3/tan.c
 create mode 100644 src/arch/zen3/tanf.c
 create mode 100644 src/arch/zen3/tanhf.c
 create mode 100644 src/arch/zen3/vrd2_cos.c
 create mode 100644 src/arch/zen3/vrd2_exp.c
 create mode 100644 src/arch/zen3/vrd2_log.c
 create mode 100644 src/arch/zen3/vrd2_pow.c
 create mode 100644 src/arch/zen3/vrd2_sin.c
 create mode 100644 src/arch/zen3/vrd2_tan.c
 create mode 100644 src/arch/zen3/vrd4_cos.c
 create mode 100644 src/arch/zen3/vrd4_exp.c
 create mode 100644 src/arch/zen3/vrd4_log.c
 create mode 100644 src/arch/zen3/vrd4_pow.c
 create mode 100644 src/arch/zen3/vrd4_sin.c
 create mode 100644 src/arch/zen3/vrd4_tan.c
 create mode 100644 src/arch/zen3/vrs4_cosf.c
 create mode 100644 src/arch/zen3/vrs4_coshf.c
 create mode 100644 src/arch/zen3/vrs4_expf.c
 create mode 100644 src/arch/zen3/vrs4_logf.c
 create mode 100644 src/arch/zen3/vrs4_powf.c
 create mode 100644 src/arch/zen3/vrs4_sinf.c
 create mode 100644 src/arch/zen3/vrs4_tanf.c
 create mode 100644 src/arch/zen3/vrs4_tanhf.c
 create mode 100644 src/arch/zen3/vrs8_cosf.c
 create mode 100644 src/arch/zen3/vrs8_coshf.c
 create mode 100644 src/arch/zen3/vrs8_expf.c
 create mode 100644 src/arch/zen3/vrs8_logf.c
 create mode 100644 src/arch/zen3/vrs8_powf.c
 create mode 100644 src/arch/zen3/vrs8_sinf.c
 create mode 100644 src/arch/zen3/vrs8_tanf.c
 create mode 100644 src/arch/zen3/vrs8_tanhf.c
 create mode 100644 src/fast/powf.c
 create mode 100644 src/fast/tan.c
 create mode 100644 src/isa/avx2/cos.c
 create mode 100644 src/isa/avx2/cosf.c
 create mode 100644 src/isa/avx2/coshf.c
 create mode 100644 src/isa/avx2/exp.c
 create mode 100644 src/isa/avx2/exp2.c
 create mode 100644 src/isa/avx2/expf.c
 create mode 100644 src/isa/avx2/expm1f.c
 create mode 100644 src/isa/avx2/log.c
 create mode 100644 src/isa/avx2/logf.c
 create mode 100644 src/isa/avx2/pow.c
 create mode 100644 src/isa/avx2/powf.c
 create mode 100644 src/isa/avx2/sin.c
 create mode 100644 src/isa/avx2/sinf.c
 create mode 100644 src/isa/avx2/tan.c
 create mode 100644 src/isa/avx2/tanf.c
 create mode 100644 src/isa/avx2/tanhf.c
 create mode 100644 src/isa/avx2/vrd2_cos.c
 create mode 100644 src/isa/avx2/vrd2_exp.c
 create mode 100644 src/isa/avx2/vrd2_log.c
 create mode 100644 src/isa/avx2/vrd2_pow.c
 create mode 100644 src/isa/avx2/vrd2_sin.c
 create mode 100644 src/isa/avx2/vrd2_tan.c
 create mode 100644 src/isa/avx2/vrd4_cos.c
 create mode 100644 src/isa/avx2/vrd4_exp.c
 create mode 100644 src/isa/avx2/vrd4_log.c
 create mode 100644 src/isa/avx2/vrd4_pow.c
 create mode 100644 src/isa/avx2/vrd4_sin.c
 create mode 100644 src/isa/avx2/vrd4_tan.c
 create mode 100644 src/isa/avx2/vrs4_cosf.c
 create mode 100644 src/isa/avx2/vrs4_coshf.c
 create mode 100644 src/isa/avx2/vrs4_expf.c
 create mode 100644 src/isa/avx2/vrs4_logf.c
 create mode 100644 src/isa/avx2/vrs4_powf.c
 create mode 100644 src/isa/avx2/vrs4_sinf.c
 create mode 100644 src/isa/avx2/vrs4_tanf.c
 create mode 100644 src/isa/avx2/vrs4_tanhf.c
 create mode 100644 src/isa/avx2/vrs8_cosf.c
 create mode 100644 src/isa/avx2/vrs8_coshf.c
 create mode 100644 src/isa/avx2/vrs8_expf.c
 create mode 100644 src/isa/avx2/vrs8_logf.c
 create mode 100644 src/isa/avx2/vrs8_powf.c
 create mode 100644 src/isa/avx2/vrs8_sinf.c
 create mode 100644 src/isa/avx2/vrs8_tanf.c
 create mode 100644 src/isa/avx2/vrs8_tanhf.c
 create mode 100644 src/optmized/cos.c
 create mode 100644 src/optmized/coshf.c
 create mode 100644 src/optmized/tan.c
 create mode 100644 src/optmized/tanhf.c
 create mode 100644 src/optmized/vec/vrd2_cos.c
 create mode 100644 src/optmized/vec/vrd2_tan.c
 create mode 100644 src/optmized/vec/vrd4_cos.c
 create mode 100644 src/optmized/vec/vrd4_tan.c
 create mode 100644 src/optmized/vec/vrs4_coshf.c
 create mode 100644 src/optmized/vec/vrs4_tanhf.c
 create mode 100644 src/optmized/vec/vrs8_coshf.c
 create mode 100644 src/optmized/vec/vrs8_tanhf.c

diff --git a/include/external/amdlibm_vec.h b/include/external/amdlibm_vec.h
index c73f5c4..880199e 100644
--- a/include/external/amdlibm_vec.h
+++ b/include/external/amdlibm_vec.h
@@ -235,12 +235,19 @@ extern "C" {
     __m256  amd_vrs8_sinf   (__m256  x);
     __m256  amd_vrs8_cosf   (__m256  x);
     __m256d amd_vrd4_sin    (__m256d x);
+    __m256d amd_vrd4_cos    (__m256d x);
+    __m256d amd_vrd4_tan    (__m256d x);
 
     void amd_vrda_cos       (int len, double *src, double *dst);
     void amd_vrsa_cosf      (int len, float  *src, float  *dst);
     void amd_vrda_sin       (int len, double *src, double *dst);
     void amd_vrsa_sinf      (int len, float  *src, float  *dst);
 
+/*Hyperbolic*/
+   __m128  amd_vrs4_coshf   (__m128  x);
+   __m128  amd_vrs4_tanhf   (__m128  x);
+   __m256  amd_vrs8_coshf   (__m256  x);
+   __m256  amd_vrs8_tanhf   (__m256  x);
 
  /* Power */
 
@@ -260,4 +267,4 @@ extern "C" {
 }
 #endif
 
-#endif /* AMD_LIBM_VEC_EXTERNAL_H */
+#endif /* AMD_\LIBM_VEC_EXTERNAL */
diff --git a/include/libm/__alm_func_internal.h b/include/libm/__alm_func_internal.h
index 4be80e5..da691dd 100644
--- a/include/libm/__alm_func_internal.h
+++ b/include/libm/__alm_func_internal.h
@@ -180,6 +180,8 @@ extern __m128    ALM_PROTO_INTERNAL(vrs4_logf)            (__m128 x);
 extern __m128    ALM_PROTO_INTERNAL(vrs4_powf)            (__m128 x, __m128 y);
 extern __m128    ALM_PROTO_INTERNAL(vrs4_sinf)            (__m128 x);
 extern __m128    ALM_PROTO_INTERNAL(vrs4_tanf)            (__m128 x);
+extern __m128    ALM_PROTO_INTERNAL(vrs4_coshf)           (__m128 x);
+extern __m128    ALM_PROTO_INTERNAL(vrs4_tanhf)           (__m128 x);
 
 extern __m256    ALM_PROTO_INTERNAL(vrs8_cbrtf)           (__m256 x);
 extern __m256    ALM_PROTO_INTERNAL(vrs8_cosf)            (__m256 x);
@@ -194,10 +196,12 @@ extern __m256    ALM_PROTO_INTERNAL(vrs8_logf)            (__m256 x);
 extern __m256    ALM_PROTO_INTERNAL(vrs8_powf)            (__m256 x, __m256 y);
 extern __m256    ALM_PROTO_INTERNAL(vrs8_sinf)            (__m256 x);
 extern __m256    ALM_PROTO_INTERNAL(vrs8_tanf)            (__m256 x);
+extern __m256    ALM_PROTO_INTERNAL(vrs8_coshf)           (__m256 x);
+extern __m256    ALM_PROTO_INTERNAL(vrs8_tanhf)           (__m256 x);
 
 
 /*
- * Vector Single precision
+ * Vector Double precision
  */
 extern __m128d   ALM_PROTO_INTERNAL(vrd2_cbrt)     (__m128d x);
 extern __m128d   ALM_PROTO_INTERNAL(vrd2_cosh)     (__m128d x);
@@ -217,12 +221,20 @@ extern __m128d   ALM_PROTO_INTERNAL(vrd2_tan)      (__m128d x);
 /*
  * Vector double precision, 4 element
  */
-extern __m256d   ALM_PROTO_INTERNAL(vrd4_exp)      (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_cbrt)     (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_cosh)     (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_cos)      (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_exp10)    (__m256d x);
 extern __m256d   ALM_PROTO_INTERNAL(vrd4_exp2)     (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_exp)      (__m256d x);
 extern __m256d   ALM_PROTO_INTERNAL(vrd4_expm1)    (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_log10)    (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_log1p)    (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_log2)     (__m256d x);
 extern __m256d   ALM_PROTO_INTERNAL(vrd4_log)      (__m256d x);
 extern __m256d   ALM_PROTO_INTERNAL(vrd4_pow)      (__m256d x, __m256d y);
 extern __m256d   ALM_PROTO_INTERNAL(vrd4_sin)      (__m256d x);
+extern __m256d   ALM_PROTO_INTERNAL(vrd4_tan)      (__m256d x);
 
 extern void      ALM_PROTO_INTERNAL(sincos)        (double x, double *s, double *c);
 extern void      ALM_PROTO_INTERNAL(sincosf)       (float x, float *s, float *c);
diff --git a/include/libm/arch/avx2.h b/include/libm/arch/avx2.h
new file mode 100644
index 0000000..3fb2405
--- /dev/null
+++ b/include/libm/arch/avx2.h
@@ -0,0 +1,98 @@
+/*
+ * Copyright (C) 2018-2020, Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef __ALM_ARCH_AVX2_H__
+#define __ALM_ARCH_AVX2_H__
+
+/*
+ * This architecture is for "AVX2", same as -mavx2
+ */
+#define ALM_ARCH_AVX2			avx2
+#define ALM_PREFIX_AVX2			amd
+
+#ifndef ALM_PREFIX
+#define ALM_PREFIX		ALM_PREFIX_AVX2
+#endif
+
+#ifndef ALM_ARCH
+#define ALM_ARCH		ALM_ARCH_AVX2
+#endif
+
+/*
+ * Override all previously definded prototypes
+ */
+#if defined(ALM_OVERRIDE)
+
+#include <libm_macros.h>
+//#include <libm/types.h>
+
+#ifndef  ALM_PREFIX_AVX2
+#undef   ALM_PREFIX_AVX2
+#define  ALM_PREFIX_AVX2			amd
+#endif
+
+#ifdef FN_PROTOTYPE_OPT
+#undef FN_PROTOTYPE_OPT
+#endif
+#define FN_PROTOTYPE_OPT(x)		ALM_PROTO_OPT(x)
+
+#ifdef FN_PROTOTYPE_REF
+#undef FN_PROTOTYPE_REF
+#endif
+#define FN_PROTOTYPE_REF(x)		ALM_PROTO_ARCH_AVX2(x)
+
+#define  ALM_PROTO_OPT(x) 		ALM_PROTO_ARCH_AVX2(x)
+
+
+#endif /* ALM_OVERRIDE */
+
+
+#ifndef ALM_PROTO_ARCH
+#define __ALM_PROTO_ARCH(a, x, y)		ALM_MAKE_PROTO_SFX(a, x, y)
+#define  __ALM_MAKE_PROTO_ARCH(a, x, y) 	__ALM_PROTO_ARCH(a, x, y)		
+#endif
+
+#ifdef   ALM_PROTO_ARCH
+#undef   ALM_PROTO_ARCH
+#define  ALM_PROTO_ARCH(x)	        ALM_PROTO_ARCH_AVX2(x)
+#endif
+
+#define  ALM_PROTO_ARCH_AVX2(x)		__ALM_PROTO_ARCH(ALM_PREFIX_AVX2, x, ALM_ARCH_AVX2)
+
+/*
+#define ALM_PROTO_ARCH_CHANGE_INTERNAL  1
+#include <libm/arch/alm_funcs.h>
+#undef  ALM_PROTO_CHANGE_INTENRAL
+*/
+#pragma push_macro("ALM_PROTO_INTERNAL")
+#define ALM_PROTO_INTERNAL ALM_PROTO_ARCH
+#include "../__alm_func_internal.h"
+#undef ALM_PROTO_INTERNAL
+#pragma pop_macro("ALM_PROTO_INTERNAL")
+
+#endif  /* _ALM_ARCH_ZEN2_H_ */
+
diff --git a/include/libm/arch/zen3.h b/include/libm/arch/zen3.h
new file mode 100644
index 0000000..dd457dc
--- /dev/null
+++ b/include/libm/arch/zen3.h
@@ -0,0 +1,71 @@
+#ifndef __ALM_ARCH_ZEN3_H__
+#define __ALM_ARCH_ZEN3_H__
+
+/*
+ * This architecture is for "Zen3", same as --march=znver3
+ */
+#define ALM_ARCH_ZN3    zn3
+#define ALM_PREFIX_ZN3  amd
+
+#ifndef ALM_PREFIX
+#define ALM_PREFIX      ALM_PREFIX_ZN3
+#endif
+
+#ifndef ALM_ARCH
+#define ALM_ARCH        ALM_ARCH_ZN3
+#endif
+
+/*
+ * Override all previously definded prototypes
+ */
+#if defined(ALM_OVERRIDE)
+
+#include <libm_macros.h>
+//#include <libm/types.h>
+
+#ifndef  ALM_PREFIX_ZN3
+#undef   ALM_PREFIX_ZN3
+#define  ALM_PREFIX_ZN3    amd
+#endif
+
+#ifdef FN_PROTOTYPE_OPT
+#undef FN_PROTOTYPE_OPT
+#endif
+#define FN_PROTOTYPE_OPT(x)    ALM_PROTO_OPT(x)
+
+#ifdef FN_PROTOTYPE_REF
+#undef FN_PROTOTYPE_REF
+#endif
+#define FN_PROTOTYPE_REF(x)    ALM_PROTO_ARCH_ZN3(x)
+
+#define  ALM_PROTO_OPT(x)      ALM_PROTO_ARCH_ZN3(x)
+
+
+#endif /* ALM_OVERRIDE */
+
+
+#ifndef ALM_PROTO_ARCH
+#define __ALM_PROTO_ARCH(a, x, y)            ALM_MAKE_PROTO_SFX(a, x, y)
+#define  __ALM_MAKE_PROTO_ARCH(a, x, y) 	 __ALM_PROTO_ARCH(a, x, y)
+#endif
+
+#ifdef   ALM_PROTO_ARCH
+#undef   ALM_PROTO_ARCH
+#define  ALM_PROTO_ARCH(x)        ALM_PROTO_ARCH_ZN3(x)
+#endif
+
+#define  ALM_PROTO_ARCH_ZN3(x)    __ALM_PROTO_ARCH(ALM_PREFIX_ZN3, x, ALM_ARCH_ZN3)
+
+/*
+#define ALM_PROTO_ARCH_CHANGE_INTERNAL  1
+#include <libm/arch/alm_funcs.h>
+#undef  ALM_PROTO_CHANGE_INTENRAL
+*/
+#pragma push_macro("ALM_PROTO_INTERNAL")
+#define ALM_PROTO_INTERNAL ALM_PROTO_ARCH
+#include "../__alm_func_internal.h"
+#undef ALM_PROTO_INTERNAL
+#pragma pop_macro("ALM_PROTO_INTERNAL")
+
+#endif  /* _ALM_ARCH_ZEN3_H_ */
+
diff --git a/include/libm/cpu_features.h b/include/libm/cpu_features.h
index b6fb74c..dd5b63d 100644
--- a/include/libm/cpu_features.h
+++ b/include/libm/cpu_features.h
@@ -33,110 +33,110 @@
 #include <libm/compiler.h>
 
 enum {
-    CPUID_EAX_1 = 0,
-    CPUID_EAX_7,
-    CPUID_EAX_8_01,           /* 8000.0001 */
-    CPUID_EAX_8_07,           /* 8000.0007 */
-    CPUID_EAX_8_08,           /* 8000.0008 */
+    ALM_CPUID_EAX_1 = 0,
+    ALM_CPUID_EAX_7,
+    ALM_CPUID_EAX_8_01,           /* 8000.0001 */
+    ALM_CPUID_EAX_8_07,           /* 8000.0007 */
+    ALM_CPUID_EAX_8_08,           /* 8000.0008 */
 
     /* Last entry */
-    CPUID_MAX,
+    ALM_CPUID_MAX,
 };
 
 /*
- * CPUID
- * EAX = 1, ECX = 0 CPUID
+ * ALM_CPUID
+ * EAX = 1, ECX = 0 ALM_CPUID
  */
 enum {
     /* ECX Values */
-    CPUID_BIT_SSE3   = (1u << 0),
-    CPUID_BIT_SSSE3  = (1u << 9),
-    CPUID_BIT_FMA    = (1u << 12),
-    CPUID_BIT_SSE4_1 = (1u << 19),
-    CPUID_BIT_SSE4_2 = (1u << 20),
-    CPUID_BIT_AES    = (1u << 25),
-    CPUID_BIT_AVX    = (1u << 28),
+    ALM_CPUID_BIT_SSE3   = (1u << 0),
+    ALM_CPUID_BIT_SSSE3  = (1u << 9),
+    ALM_CPUID_BIT_FMA    = (1u << 12),
+    ALM_CPUID_BIT_SSE4_1 = (1u << 19),
+    ALM_CPUID_BIT_SSE4_2 = (1u << 20),
+    ALM_CPUID_BIT_AES    = (1u << 25),
+    ALM_CPUID_BIT_AVX    = (1u << 28),
 
     /* EDX Values */
-    CPUID_BIT_FPU  = (1u << 0),
-    CPUID_BIT_MMX  = (1u << 23),
-    CPUID_BIT_FXSR = (1u << 24),
-    CPUID_BIT_SSE  = (1u << 25),
-    CPUID_BIT_SSE2 = (1u << 26),
-    CPUID_BIT_SS   = (1u << 27),
+    ALM_CPUID_BIT_FPU  = (1u << 0),
+    ALM_CPUID_BIT_MMX  = (1u << 23),
+    ALM_CPUID_BIT_FXSR = (1u << 24),
+    ALM_CPUID_BIT_SSE  = (1u << 25),
+    ALM_CPUID_BIT_SSE2 = (1u << 26),
+    ALM_CPUID_BIT_SS   = (1u << 27),
 };
 
 /*
- * CPUID
+ * ALM_CPUID
  * EAX = 0x7, ECX = 0
  */
 enum {
     /* EBX values */
-    CPUID_BIT_FSGSBASE        = (1u << 0),
-    CPUID_BIT_TSC_ADJUST      = (1u << 1),
-    CPUID_BIT_SGX             = (1u << 2),
-    CPUID_BIT_BMI1            = (1u << 3),
-    CPUID_BIT_HLE             = (1u << 4),
-    CPUID_BIT_AVX2            = (1u << 5),
-    CPUID_BIT_SMEP            = (1u << 7),
-    CPUID_BIT_BMI2            = (1u << 8),
-    CPUID_BIT_ERMS            = (1u << 9),
-    CPUID_BIT_INVPCID         = (1u << 10),
-    CPUID_BIT_RTM             = (1u << 11),
-    CPUID_BIT_TSX             = CPUID_BIT_RTM,
-    CPUID_BIT_PQM             = (1u << 12),
-    CPUID_BIT_MPX             = (1u << 14),
-    CPUID_BIT_PQE             = (1u << 15),
-    CPUID_BIT_AVX512F         = (1u << 16),
-    CPUID_BIT_AVX512DQ        = (1u << 17),
-    CPUID_BIT_RDSEED          = (1u << 18),
-    CPUID_BIT_ADX             = (1u << 19),
-    CPUID_BIT_SMAP            = (1u << 20),
-    CPUID_BIT_AVX512_IFMA     = (1u << 21),
-    CPUID_BIT_CLFLUSHOPT      = (1u << 22),
-    CPUID_BIT_CLWB            = (1u << 24),
-    CPUID_BIT_TRACE           = (1u << 25),
-    CPUID_BIT_AVX512PF        = (1u << 26),
-    CPUID_BIT_AVX512ER        = (1u << 27),
-    CPUID_BIT_AVX512CD        = (1u << 28),
-    CPUID_BIT_SHA             = (1u << 29),
-    CPUID_BIT_AVX512BW        = (1u << 30),
-    CPUID_BIT_AVX512VL        = (1u << 31),
+    ALM_CPUID_BIT_FSGSBASE        = (1u << 0),
+    ALM_CPUID_BIT_TSC_ADJUST      = (1u << 1),
+    ALM_CPUID_BIT_SGX             = (1u << 2),
+    ALM_CPUID_BIT_BMI1            = (1u << 3),
+    ALM_CPUID_BIT_HLE             = (1u << 4),
+    ALM_CPUID_BIT_AVX2            = (1u << 5),
+    ALM_CPUID_BIT_SMEP            = (1u << 7),
+    ALM_CPUID_BIT_BMI2            = (1u << 8),
+    ALM_CPUID_BIT_ERMS            = (1u << 9),
+    ALM_CPUID_BIT_INVPCID         = (1u << 10),
+    ALM_CPUID_BIT_RTM             = (1u << 11),
+    ALM_CPUID_BIT_TSX             = ALM_CPUID_BIT_RTM,
+    ALM_CPUID_BIT_PQM             = (1u << 12),
+    ALM_CPUID_BIT_MPX             = (1u << 14),
+    ALM_CPUID_BIT_PQE             = (1u << 15),
+    ALM_CPUID_BIT_AVX512F         = (1u << 16),
+    ALM_CPUID_BIT_AVX512DQ        = (1u << 17),
+    ALM_CPUID_BIT_RDSEED          = (1u << 18),
+    ALM_CPUID_BIT_ADX             = (1u << 19),
+    ALM_CPUID_BIT_SMAP            = (1u << 20),
+    ALM_CPUID_BIT_AVX512_IFMA     = (1u << 21),
+    ALM_CPUID_BIT_CLFLUSHOPT      = (1u << 22),
+    ALM_CPUID_BIT_CLWB            = (1u << 24),
+    ALM_CPUID_BIT_TRACE           = (1u << 25),
+    ALM_CPUID_BIT_AVX512PF        = (1u << 26),
+    ALM_CPUID_BIT_AVX512ER        = (1u << 27),
+    ALM_CPUID_BIT_AVX512CD        = (1u << 28),
+    ALM_CPUID_BIT_SHA             = (1u << 29),
+    ALM_CPUID_BIT_AVX512BW        = (1u << 30),
+    ALM_CPUID_BIT_AVX512VL        = (1u << 31),
 
     /* ECX Values*/
-    CPUID_BIT_PREFETCHWT1     = (1u << 0),
-    CPUID_BIT_AVX512_VBMI     = (1u << 1),
-    CPUID_BIT_UMIP            = (1u << 2),
-    CPUID_BIT_PKU             = (1u << 3),
-    CPUID_BIT_OSPKE           = (1u << 4),
-    CPUID_BIT_WAITPKG         = (1u << 5),
-    CPUID_BIT_AVX512_VBMI2    = (1u << 6),
-    CPUID_BIT_SHSTK           = (1u << 7),
-    CPUID_BIT_GFNI            = (1u << 8),
-    CPUID_BIT_VAES            = (1u << 9),
-    CPUID_BIT_VPCLMULQDQ      = (1u << 10),
-    CPUID_BIT_AVX512_VNNI     = (1u << 11),
-    CPUID_BIT_AVX512_BITALG   = (1u << 12),
-    CPUID_BIT_AVX512_VPOPCNTDQ = (1u << 14),
-    CPUID_BIT_RDPID           = (1u << 22),
-    CPUID_BIT_CLDEMOTE        = (1u << 25),
-    CPUID_BIT_MOVDIRI         = (1u << 27),
-    CPUID_BIT_MOVDIR64B       = (1u << 28),
-    CPUID_BIT_SGX_LC          = (1u << 30),
+    ALM_CPUID_BIT_PREFETCHWT1     = (1u << 0),
+    ALM_CPUID_BIT_AVX512_VBMI     = (1u << 1),
+    ALM_CPUID_BIT_UMIP            = (1u << 2),
+    ALM_CPUID_BIT_PKU             = (1u << 3),
+    ALM_CPUID_BIT_OSPKE           = (1u << 4),
+    ALM_CPUID_BIT_WAITPKG         = (1u << 5),
+    ALM_CPUID_BIT_AVX512_VBMI2    = (1u << 6),
+    ALM_CPUID_BIT_SHSTK           = (1u << 7),
+    ALM_CPUID_BIT_GFNI            = (1u << 8),
+    ALM_CPUID_BIT_VAES            = (1u << 9),
+    ALM_CPUID_BIT_VPCLMULQDQ      = (1u << 10),
+    ALM_CPUID_BIT_AVX512_VNNI     = (1u << 11),
+    ALM_CPUID_BIT_AVX512_BITALG   = (1u << 12),
+    ALM_CPUID_BIT_AVX512_VPOPCNTDQ = (1u << 14),
+    ALM_CPUID_BIT_RDPID           = (1u << 22),
+    ALM_CPUID_BIT_CLDEMOTE        = (1u << 25),
+    ALM_CPUID_BIT_MOVDIRI         = (1u << 27),
+    ALM_CPUID_BIT_MOVDIR64B       = (1u << 28),
+    ALM_CPUID_BIT_SGX_LC          = (1u << 30),
 
     /* EDX Values */
-    CPUID_BIT_AVX512_4VNNIW   = (1u << 2),
-    CPUID_BIT_AVX512_4FMAPS   = (1u << 3),
-    CPUID_BIT_FSRM            = (1u << 4),
-    CPUID_BIT_PCONFIG         = (1u << 18),
-    CPUID_BIT_IBT             = (1u << 20),
-    CPUID_BIT_IBRS_IBPB       = (1u << 26),
-    CPUID_BIT_STIBP           = (1u << 27),
-    CPUID_BIT_CAPABILITIES    = (1u << 29),
-    CPUID_BIT_SSBD            = (1u << 31),
+    ALM_CPUID_BIT_AVX512_4VNNIW   = (1u << 2),
+    ALM_CPUID_BIT_AVX512_4FMAPS   = (1u << 3),
+    ALM_CPUID_BIT_FSRM            = (1u << 4),
+    ALM_CPUID_BIT_PCONFIG         = (1u << 18),
+    ALM_CPUID_BIT_IBT             = (1u << 20),
+    ALM_CPUID_BIT_IBRS_IBPB       = (1u << 26),
+    ALM_CPUID_BIT_STIBP           = (1u << 27),
+    ALM_CPUID_BIT_CAPABILITIES    = (1u << 29),
+    ALM_CPUID_BIT_SSBD            = (1u << 31),
 };
 
-#define CPU_FEATURE_REG(ftr, idx, reg) ({       \
+#define ALM_CPU_FEATURE_REG(ftr, idx, reg) ({   \
             uint32_t val;                       \
             struct cpuid_regs *r;               \
             r = &ftr->available[0];             \
@@ -144,66 +144,72 @@ enum {
             val;                                \
         })
 
-#define CPU_FEATURE(ptr, idx, reg, bit) ({      \
-            uint32_t __reg =                    \
-                CPU_FEATURE_REG(ptr, idx, reg); \
-            (__reg & bit);                      \
+#define ALM_CPU_FEATURE(ptr, idx, reg, bit) ({      \
+            uint32_t __reg =                        \
+                ALM_CPU_FEATURE_REG(ptr, idx, reg); \
+            (__reg & bit);                          \
         })
 
-#define CPU_HAS_SSSE3(f) CPU_FEATURE(f, CPUID_EAX_1, ecx, CPUID_BIT_SSSE3)
-#define CPU_HAS_AVX(f)   CPU_FEATURE(f, CPUID_EAX_1, ecx, CPUID_BIT_AVX)
-#define CPU_HAS_AVX2(f)  CPU_FEATURE(f, CPUID_EAX_7, ebx, CPUID_BIT_AVX2)
-#define CPU_HAS_TSX(f)   CPU_FEATURE(f, CPUID_EAX_7, ebx, CPUID_BIT_TSX)
+#define ALM_CPU_HAS_SSSE3(f) ALM_CPU_FEATURE(f, ALM_CPUID_EAX_1, ecx, ALM_CPUID_BIT_SSSE3)
+#define ALM_CPU_HAS_AVX(f)   ALM_CPU_FEATURE(f, ALM_CPUID_EAX_1, ecx, ALM_CPUID_BIT_AVX)
+#define ALM_CPU_HAS_AVX2(f)  ALM_CPU_FEATURE(f, ALM_CPUID_EAX_7, ebx, ALM_CPUID_BIT_AVX2)
+#define ALM_CPU_HAS_TSX(f)   ALM_CPU_FEATURE(f, ALM_CPUID_EAX_7, ebx, ALM_CPUID_BIT_TSX)
 
-#define CPU_FEATURE_USABLE_REG(ftr, idx, reg) ({        \
-            uint32_t val;                               \
-            struct cpuid_regs *r;                       \
-            r = &(ftr)->usable[0];			\
-            val = r[(idx)].reg;                         \
-            val;                                        \
+#define ALM_CPU_FEATURE_USABLE_REG(ftr, idx, reg) ({        \
+            uint32_t val;                                   \
+            struct alm_cpuid_regs *r;                       \
+            r = &(ftr)->usable[0];                          \
+            val = r[(idx)].reg;                             \
+            val;                                            \
         })
 
-#define CPU_FEATURE_USABLE(ptr, idx, reg, bit) ({       \
-            uint32_t __reg =                            \
-                CPU_FEATURE_USABLE_REG(ptr, idx, reg);  \
-            (__reg &  bit);                             \
+#define ALM_CPU_FEATURE_USABLE(ptr, idx, reg, bit) ({       \
+            uint32_t __reg =                                \
+                ALM_CPU_FEATURE_USABLE_REG(ptr, idx, reg);  \
+            (__reg &  bit);                                 \
         })
 
-#define CPU_FEATURE_AVX_USABLE(f)                               \
-    CPU_FEATURE_USABLE(f, CPUID_EAX_1, eax, CPUID_BIT_AVX)
-#define CPU_FEATURE_SSSE3_USABLE(f)                             \
-    CPU_FEATURE_USABLE(f, CPUID_EAX_1, ecx, CPUID_BIT_SSSE3)
-#define CPU_FEATURE_AVX2_USABLE(f)                              \
-    CPU_FEATURE_USABLE(f, CPUID_EAX_7, ebx, CPUID_BIT_AVX2)
+#define ALM_CPU_FEATURE_AVX_USABLE(f)                                   \
+    ALM_CPU_FEATURE_USABLE(f, ALM_CPUID_EAX_1, eax, ALM_CPUID_BIT_AVX)
+#define ALM_CPU_FEATURE_SSSE3_USABLE(f)                                 \
+    ALM_CPU_FEATURE_USABLE(f, ALM_CPUID_EAX_1, ecx, ALM_CPUID_BIT_SSSE3)
+#define ALM_CPU_FEATURE_AVX2_USABLE(f)                                  \
+    ALM_CPU_FEATURE_USABLE(f, ALM_CPUID_EAX_7, ebx, ALM_CPUID_BIT_AVX2)
+
+
+#define ALM_CPU_FAMILY_NAPLES      0x15
+#define ALM_CPU_FAMILY_ROME        0x17
+#define ALM_CPU_FAMILY_MILAN       0x19
+
 
 /* ID return values */
-struct cpuid_regs {
+struct alm_cpuid_regs {
     uint32_t eax;
     uint32_t ebx;
     uint32_t ecx;
     uint32_t edx;
 };
 
-enum cpu_mfg_type {
-    CPU_MFG_INTEL,
-    CPU_MFG_AMD,
-    CPU_MFG_OTHER,
-};
+typedef enum {
+    ALM_CPU_MFG_INTEL,
+    ALM_CPU_MFG_AMD,
+    ALM_CPU_MFG_OTHER,
+} alm_cpu_mfg_t;
 
-struct cpu_mfg_info {
-    enum cpu_mfg_type mfg_type;
-    uint16_t     family;
-    uint16_t     model;
-    uint16_t     stepping;
+struct alm_cpu_mfg_info {
+    alm_cpu_mfg_t     mfg_type;
+    uint16_t          family;
+    uint16_t          model;
+    uint16_t          stepping;
 };
 
-struct cpu_features {
-    struct cpu_mfg_info cpu_mfg_info;
-    struct cpuid_regs available[CPUID_MAX];
-    struct cpuid_regs usable[CPUID_MAX];
+struct alm_cpu_features {
+    struct alm_cpu_mfg_info cpu_mfg_info;
+    struct alm_cpuid_regs   available[ALM_CPUID_MAX];
+    struct alm_cpuid_regs   usable[ALM_CPUID_MAX];
 };
 
-static inline void __cpuid(struct cpuid_regs *out)
+static inline void __cpuid(struct alm_cpuid_regs *out)
 {
     asm volatile
         (
@@ -212,7 +218,7 @@ static inline void __cpuid(struct cpuid_regs *out)
          );
 }
 
-static inline void __cpuid_1(uint32_t eax, struct cpuid_regs *out)
+static inline void __cpuid_1(uint32_t eax, struct alm_cpuid_regs *out)
 {
     asm volatile
         (
@@ -222,7 +228,7 @@ static inline void __cpuid_1(uint32_t eax, struct cpuid_regs *out)
          );
 }
 
-static inline void __cpuid_2(uint32_t eax, uint32_t ecx, struct cpuid_regs *out)
+static inline void __cpuid_2(uint32_t eax, uint32_t ecx, struct alm_cpuid_regs *out)
 {
     asm volatile
         (
@@ -245,12 +251,12 @@ __cpuid_bit(uint32_t value, int bit)
     return __extract32(value, bit, 1);
 }
 
-struct cpu_features *libm_cpu_get_features(void);
-void libm_cpu_set_features(struct cpu_features *f,
+struct alm_cpu_features *alm_cpu_get_features(void);
+void alm_cpu_set_features(struct alm_cpu_features *f,
                            uint32_t reg_offset,
                            uint32_t bit);
 
-int libm_cpu_feature_is_avx_usable(void);
-int libm_cpu_feature_is_avx2_usable(void);
+int alm_cpu_feature_is_avx_usable(void);
+int alm_cpu_feature_is_avx2_usable(void);
 
 #endif  /* __LIBM_CPU_FEATURES_H__ */
diff --git a/include/libm/entry_pt.h b/include/libm/entry_pt.h
index 53c092e..934d0c9 100644
--- a/include/libm/entry_pt.h
+++ b/include/libm/entry_pt.h
@@ -25,8 +25,8 @@
  *
  */
 
-#ifndef __AMD_LIBM_ENTRY_PT_H__
-#define __AMD_LIBM_ENTRY_PT_H__
+#ifndef __AMD_LIBM_ENTRY_PT_PTR_H__
+#define __AMD_LIBM_ENTRY_PT_PTR_H__
 
 #define G_ENTRY_PT(fn) (*g_amd_libm_ep_##fn)
 
@@ -34,206 +34,223 @@
 
 #define G_ENTRY_PT_PTR(fn) g_amd_libm_ep_##fn
 
-extern double G_ENTRY_PT(acos)(double x);
-extern double G_ENTRY_PT(acosh)(double x);
-extern double G_ENTRY_PT(asin)(double x);
-extern double G_ENTRY_PT(asinh)(double x);
-extern double G_ENTRY_PT(atan2)(double x, double y);
-extern double G_ENTRY_PT(atan)(double x);
-extern double G_ENTRY_PT(atanh)(double x);
-extern double G_ENTRY_PT(cbrt)(double x);
-extern double G_ENTRY_PT(ceil)(double x);
-extern double G_ENTRY_PT(copysign)(double x, double y);
-extern double G_ENTRY_PT(cos)(double x);
-extern double G_ENTRY_PT(cosh)(double x);
-extern double G_ENTRY_PT(cospi)(double x);
-extern double G_ENTRY_PT(exp10)(double x);
-extern double G_ENTRY_PT(exp2)(double x);
-extern double G_ENTRY_PT(exp)(double x);
-extern double G_ENTRY_PT(expm1)(double x);
-extern double G_ENTRY_PT(fabs)(double x);
-extern double G_ENTRY_PT(fastpow)(double x, double y);
-extern double G_ENTRY_PT(fdim)(double x, double y);
-extern double G_ENTRY_PT(floor)(double x);
-extern double G_ENTRY_PT(fma)(double x, double y, double z);
-extern double G_ENTRY_PT(fmax)(double x, double y);
-extern double G_ENTRY_PT(fmin)(double x, double y);
-extern double G_ENTRY_PT(fmod)(double x, double y);
-extern double G_ENTRY_PT(frexp)(double value, int *exp);
-extern double G_ENTRY_PT(hypot)(double x, double y);
-extern double G_ENTRY_PT(ldexp)(double x, int exp);
-extern double G_ENTRY_PT(log10)(double x);
-extern double G_ENTRY_PT(log1p)(double x);
-extern double G_ENTRY_PT(log2)(double x);
-extern double G_ENTRY_PT(logb)(double x);
-extern double G_ENTRY_PT(log)(double x);
-extern double G_ENTRY_PT(modf)(double x, double *iptr);
-extern double G_ENTRY_PT(nan)(const char *tagp);
-extern double G_ENTRY_PT(nearbyint)(double x);
-extern double G_ENTRY_PT(nextafter)(double x, double y);
-extern double G_ENTRY_PT(nexttoward)(double x, long double y);
-extern double G_ENTRY_PT(pow)(double x, double y);
-extern double G_ENTRY_PT(remainder)(double x, double y);
-extern double G_ENTRY_PT(remquo) (double x, double y, int *quo);
-extern double G_ENTRY_PT(rint)(double x);
-extern double G_ENTRY_PT(round)(double f);
-extern double G_ENTRY_PT(scalbln)(double x, long int n);
-extern double G_ENTRY_PT(scalbn)(double x, int n);
-extern double G_ENTRY_PT(sin)(double x);
-extern double G_ENTRY_PT(sinh)(double x);
-extern double G_ENTRY_PT(sinpi)(double x);
-extern double G_ENTRY_PT(sqrt)(double x);
-extern double G_ENTRY_PT(tan)(double x);
-extern double G_ENTRY_PT(tanh)(double x);
-extern double G_ENTRY_PT(tanpi)(double x);
-extern double G_ENTRY_PT(trunc)(double x);
+#ifndef alm_ep_func_t
+typedef void (*alm_ep_func_t)(void);
+#endif
+
+extern alm_ep_func_t        G_ENTRY_PT_PTR(acos);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(acosh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(asin);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(asinh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(atan2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(atan);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(atanh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cbrt);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(ceil);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(copysign);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cos);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cosh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cospi);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(exp10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(exp2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(exp);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(expm1);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fabs);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fastpow);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fdim);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(floor);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fma);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fmax);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fmin);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fmod);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(frexp);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(hypot);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(ldexp);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log1p);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(logb);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(modf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nan);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nearbyint);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nextafter);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nexttoward);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(pow);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(remainder);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(remquo);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(rint);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(round);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(scalbln);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(scalbn);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sin);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sinh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sinpi);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sqrt);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(tan);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(tanh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(tanpi);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(trunc);
 
 /*
  * Single Precision functions
  */
-extern float G_ENTRY_PT(acosf)(float x);
-extern float G_ENTRY_PT(acoshf)(float x);
-extern float G_ENTRY_PT(asinf)(float x);
-extern float G_ENTRY_PT(asinhf)(float x);
-extern float G_ENTRY_PT(atan2f)(float x, float y);
-extern float G_ENTRY_PT(atanf)(float x);
-extern float G_ENTRY_PT(atanhf)(float x);
-extern float G_ENTRY_PT(cbrtf)(float x);
-extern float G_ENTRY_PT(ceilf)(float x);
-extern float G_ENTRY_PT(copysignf)(float x, float y);
-extern float G_ENTRY_PT(cosf)(float x);
-extern float G_ENTRY_PT(coshf)(float fx);
-extern float G_ENTRY_PT(cospif)(float x);
-extern float G_ENTRY_PT(exp10f)(float x);
-extern float G_ENTRY_PT(exp2f)(float x);
-extern float G_ENTRY_PT(expf)(float x);
-extern float G_ENTRY_PT(expm1f)(float x);
-extern float G_ENTRY_PT(fabsf)(float x);
-extern float G_ENTRY_PT(fdimf)(float x, float y);
-extern float G_ENTRY_PT(floorf)(float x);
-extern float G_ENTRY_PT(fmaf)(float x, float y, float z);
-extern float G_ENTRY_PT(fmaxf)(float x, float y);
-extern float G_ENTRY_PT(fminf)(float x, float y);
-extern float G_ENTRY_PT(fmodf)(float x, float y);
-extern float G_ENTRY_PT(frexpf)(float value, int *exp);
-extern float G_ENTRY_PT(hypotf)(float x, float y);
-extern float G_ENTRY_PT(ldexpf)(float x, int exp);
-extern float G_ENTRY_PT(log10f)(float x);
-extern float G_ENTRY_PT(log1pf)(float x);
-extern float G_ENTRY_PT(log2f)(float x);
-extern float G_ENTRY_PT(logbf)(float x);
-extern float G_ENTRY_PT(logf)(float x);
-extern float G_ENTRY_PT(modff)(float x, float *iptr);
-extern float G_ENTRY_PT(nanf)(const char *tagp);
-extern float G_ENTRY_PT(nearbyintf)(float x);
-extern float G_ENTRY_PT(nextafterf)(float x, float y);
-extern float G_ENTRY_PT(nexttowardf)(float x, long double y);
-extern float G_ENTRY_PT(powf)(float x, float y);
-extern float G_ENTRY_PT(remainderf)(float x, float y);
-extern float G_ENTRY_PT(remquof) (float x, float y, int *quo);
-extern float G_ENTRY_PT(rintf)(float x);
-extern float G_ENTRY_PT(roundf)(float f);
-extern float G_ENTRY_PT(scalblnf)(float x, long int n);
-extern float G_ENTRY_PT(scalbnf)(float x, int n);
-extern float G_ENTRY_PT(sinf)(float x);
-extern float G_ENTRY_PT(sinhf)(float x);
-extern float G_ENTRY_PT(sinpif)(float x);
-extern float G_ENTRY_PT(sqrtf)(float x);
-extern float G_ENTRY_PT(tanf)(float x);
-extern float G_ENTRY_PT(tanhf)(float x);
-extern float G_ENTRY_PT(tanpif)(float x);
-extern float G_ENTRY_PT(truncf)(float x);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(acosf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(acoshf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(asinf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(asinhf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(atan2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(atanf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(atanhf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cbrtf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(ceilf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(copysignf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cosf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(coshf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(cospif);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(exp10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(exp2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(expf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(expm1f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fabsf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fdimf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(floorf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fmaf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fmaxf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fminf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(fmodf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(frexpf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(hypotf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(ldexpf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log1pf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(log2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(logbf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(logf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(modff);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nanf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nearbyintf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nextafterf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(nexttowardf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(powf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(remainderf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(remquof);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(rintf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(roundf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(scalblnf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(scalbnf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sinf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sinhf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sinpif);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sqrtf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(tanf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(tanhf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(tanpif);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(truncf);
 
 /*
  * Integer variants
  */
-extern int G_ENTRY_PT(finite)(double x);
-extern int G_ENTRY_PT(finitef)(float x);
-extern int G_ENTRY_PT(ilogb)(double x);
-extern int G_ENTRY_PT(ilogbf)(float x);
-extern long int G_ENTRY_PT(lrint)(double x);
-extern long int G_ENTRY_PT(lrintf)(float x);
-extern long int G_ENTRY_PT(lround)(double d);
-extern long int G_ENTRY_PT(lroundf)(float f);
-extern long long int G_ENTRY_PT(llrint)(double x);
-extern long long int G_ENTRY_PT(llrintf)(float x);
-extern long long int G_ENTRY_PT(llround)(double d);
-extern long long int G_ENTRY_PT(llroundf)(float f);
-
-extern void G_ENTRY_PT(vrda_exp)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_exp2)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_exp10)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_expm1)(int, double*, double*);
-extern void G_ENTRY_PT(vrsa_expf)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_exp2f)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_exp10f)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_expm1f)(int, float*, float*);
-extern void G_ENTRY_PT(vrda_cbrt)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_log)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_log10)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_log1p)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_log2)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_cos)(int, double*, double*);
-extern void G_ENTRY_PT(vrda_sin)(int, double*, double*);
-
-extern void G_ENTRY_PT(vrsa_cosf)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_log1pf)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_sinf)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_log2f)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_cbrtf)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_log10f)(int, float*, float*);
-extern void G_ENTRY_PT(vrsa_logf)(int, float*, float*);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(finite);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(finitef);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(ilogb);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(ilogbf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(lrint);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(lrintf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(lround);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(lroundf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(llrint);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(llrintf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(llround);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(llroundf);
+
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_exp);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_exp2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_exp10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_expm1);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_expf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_exp2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_exp10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_expm1f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_cbrt);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_log);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_log10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_log1p);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_log2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_cos);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrda_sin);
+
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_cosf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_log1pf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_sinf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_log2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_cbrtf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_log10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrsa_logf);
 
 #ifndef _MSC_VER
-extern void  G_ENTRY_PT(sincos)(double,double *,double *);
-extern void  G_ENTRY_PT(sincosf)(float,float *,float *);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sincos);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(sincosf);
 #endif
 
 #include <immintrin.h>
 
-extern __m128  G_ENTRY_PT(vrs4_expf)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_exp2f)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_exp10f)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_expm1f)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_logf)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_powf)(__m128, __m128);
-extern __m128  G_ENTRY_PT(vrs4_log2f)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_log10f)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_log1pf)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_cosf)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_sinf)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_tanf)(__m128);
-extern __m128  G_ENTRY_PT(vrs4_cbrtf)(__m128);
-
-extern __m256  G_ENTRY_PT(vrs8_cosf)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_expf)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_log2f)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_log10f)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_logf)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_sinf)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_tanf)(__m256);
-extern __m256  G_ENTRY_PT(vrs8_powf)(__m256, __m256);
-
-extern __m128d G_ENTRY_PT(vrd2_cbrt)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_cos)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_exp)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_exp2)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_exp10)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_expm1)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_log)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_log2)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_log10)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_log1p)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_pow)(__m128d, __m128d);
-extern __m128d G_ENTRY_PT(vrd2_sin)(__m128d);
-extern __m128d G_ENTRY_PT(vrd2_tan)(__m128d);
-
-extern __m256d G_ENTRY_PT(vrd4_exp)(__m256d);
-extern __m256d G_ENTRY_PT(vrd4_exp2)(__m256d);
-extern __m256d G_ENTRY_PT(vrd4_expm1)(__m256d);
-extern __m256d G_ENTRY_PT(vrd4_log)(__m256d);
-extern __m256d G_ENTRY_PT(vrd4_pow)(__m256d, __m256d);
-extern __m256d G_ENTRY_PT(vrd4_sin)(__m256d);
-
-#endif	/* __AMD_LIBM_ENTRY_PT_H__ */
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_expf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_exp2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_exp10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_expm1f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_logf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_powf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_log2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_log10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_log1pf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_cosf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_coshf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_sinf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_tanf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_tanhf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs4_cbrtf);
+
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_cosf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_coshf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_expf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_log2f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_log10f);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_logf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_sinf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_tanf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_tanhf);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrs8_powf);
+
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_cbrt);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_cos);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_cosh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_exp);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_exp2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_exp10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_expm1);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_log);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_log2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_log10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_log1p);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_pow);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_sin);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd2_tan);
+
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_cbrt);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_cos);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_cosh);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_exp);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_exp2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_exp10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_expm1);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_log);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_log2);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_log10);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_log1p);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_pow);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_sin);
+extern alm_ep_func_t        G_ENTRY_PT_PTR(vrd4_tan);
+
+#endif	/* __AMD_LIBM_ENTRY_PT_PTR_H__ */
 
diff --git a/include/libm/iface.h b/include/libm/iface.h
index 7f19061..b02798f 100644
--- a/include/libm/iface.h
+++ b/include/libm/iface.h
@@ -182,4 +182,45 @@ struct entry_pt_interface {
 
 extern struct entry_pt_interface entry_pt_initializers[C_AMD_LAST_ENTRY];
 
+enum ALM_FUNC_VARIANTS {
+    ALM_FUNC_SCAL_SP    = 0,
+    ALM_FUNC_SCAL_DP,
+    ALM_FUNC_VECT_SP_4,
+    ALM_FUNC_VECT_SP_8,
+    ALM_FUNC_VECT_DP_2,
+    ALM_FUNC_VECT_DP_4,
+
+    ALM_FUNC_VAR_MAX,                   /* should be last, always */
+};
+typedef enum ALM_FUNC_VARIANTS alm_func_var_t;
+
+enum ALM_UARCH_VERSIONS {
+    ALM_UARCH_VER_DEFAULT,
+    ALM_UARCH_VER_BASE64,
+    ALM_UARCH_VER_FMA3,
+    ALM_UARCH_VER_ZEN,
+    ALM_UARCH_VER_ZEN2,
+    ALM_UARCH_VER_ZEN3,
+
+    ALM_UARCH_MAX,                       /* should be last, always */
+};
+typedef enum ALM_UARCH_VERSIONS alm_uarch_ver_t;
+
+#ifndef alm_func_t
+typedef void (*alm_func_t)(void);
 #endif
+
+struct alm_ep_wrapper {
+    alm_func_t * g_ep[ALM_FUNC_VAR_MAX];
+};
+typedef struct alm_ep_wrapper alm_ep_wrapper_t;
+
+struct alm_arch_funcs {
+    alm_uarch_ver_t  def_arch;          /* Default version to choose */
+    void *           funcs[ALM_UARCH_MAX][ALM_FUNC_VAR_MAX]; /* function array */
+};
+
+void alm_iface_fixup(alm_ep_wrapper_t *g_ep_wrapper,
+                     const struct alm_arch_funcs *alm_funcs);
+
+#endif  /* __AMD_LIBM_IFACE_H__ */
diff --git a/include/libm/poly.h b/include/libm/poly.h
index 117efdc..05f3c76 100644
--- a/include/libm/poly.h
+++ b/include/libm/poly.h
@@ -28,6 +28,32 @@
 #ifndef __LIBM_POLY_H__
 #define __LIBM_POLY_H__
 
+/*
+ * poly = C1 + C2*r + C3*r^2 + C4*r^3
+ */
+#define POLY_EVAL_3(r, c1, c2, c3, c4) ({       \
+            __typeof(r) t1, t2, r2, q;          \
+            t1 = c1 + c2*r;                     \
+            t2 = c3 + c4*r;                     \
+            r2 = r * r;                         \
+            q = t1 + r2 * t2;                   \
+            q;                                  \
+        })
+
+
+/*
+ * poly = C1 + C2*r + C3*r^2 + C4*r^3
+ *      = (C1 + C2*r) + r^2(C3 + C4*r)
+ */
+#define POLY_EVAL_4(r, c0, c1, c2, c3)     ({   \
+            __typeof(r) t1, t2, r2, q;          \
+            t1 = c0 + c1*r;                     \
+            t2 = c2 + c3*r;                     \
+            r2 = r * r;                         \
+            q = t1 + r2 * t2;                   \
+            q;                                  \
+        })
+
 /*
  * poly = C1 + C2*r + C3*r^2 + C4*r^3 + C5 *r^4
  *      = (C1 + C2*r) + r^2(C3 + C4*r) + r^4*C5
@@ -107,7 +133,7 @@
                 })
 
 
-#define POLY_EVAL_ODD_17(r, c1, c2, c3, c4, c5, c6, c7, c8) ({          \
+#define POLY_EVAL_ODD_17(r, c1, c3, c5, c7, c9, c11, c13, c15) ({				\
                         __typeof(r) a1, a2, a3, a4, b1, b2 ,q;          \
                         __typeof(r) r2, r4, r6, r10, r14;               \
                         r2 = r * r;                                     \
@@ -115,10 +141,10 @@
                         r6 = r4 * r2;                                   \
                         r10 = r6 * r4;                                  \
                         r14 = r10 * r4;                                 \
-                        a1 = c1 + c2*r2;                                \
-                        a2 = c3 + c4*r2;                                \
-                        a3 = c5 + c6*r2;                                \
-                        a4 = c7 + c8*r2;                                \
+                        a1 = c1 + c3*r2;                                \
+                        a2 = c5 + c7*r2;                                \
+                        a3 = c9 + c11*r2;																\
+                        a4 = c13 + c15*r2;															\
                                                                         \
                         b1 = a1*r2 + a2*r6;                             \
                         b2 = r10*a3 + r14*a4;                           \
@@ -127,6 +153,50 @@
                         q;                                              \
                 })
 
+/*
+ *  poly = x + C1*x^3 + C2*x^5 + C3*x^7 + C4*x^9 + C5*x^11 + \
+ *          C6*x^13 + C7*x^15 + C8*x^17 + C9*x^19 +											\
+ *          C10*x^21 + C11*x^23 + C12*x^25 + C13*x^27 + C14*x^29;
+ *
+ *       = x + x * G*(C6 + G*(C7 + G*(C8 +
+ *                  G*(C9 + G*(C10+ G*(C11 + G*(C12 +
+ *                          G*(C13 + C14*G))))
+ */
+
+#define POLY_EVAL_ODD_29(r, c1, c3, c5, c7, c9, c11, c13, c15,          \
+                         c17, c19, c21, c23, c25, c27)                  \
+    ({                                                                  \
+        __typeof(r) a1, a2, a3, a4, a5, a6, a7;                         \
+        __typeof(r) b1, b2, b3, b4, q;                                  \
+        __typeof(r) g, g2, g3, g5, g7, g9, g11, g13;										\
+				g  = r * r;																											\
+        g2 = g * g;                                                     \
+        g3 = g * g2;																										\
+        g5 = g3 * g2;																										\
+				g7 = g5 * g2;																										\
+        g9 = g7 * g2;																										\
+				g11 = g9 * g2;																									\
+        g13 = g11 * g2;																									\
+																																				\
+        a1 = c1 + c3*g;																									\
+        a2 = c5 + c7*g;																									\
+        a3 = c9 + c11*g;																								\
+        a4 = c13 + c15*g;																								\
+        a5 = c17 + c19*g;																								\
+        a6 = c21 + c23*g;																								\
+        a7 = c25 + c27*g;																								\
+																																				\
+        b1 = g*a1  + g3*a2;																							\
+        b2 = g5*a3 + g7*a4;																							\
+        b3 = g9*a5 + g11*a6;																						\
+        b4 = g13*a7;                                                    \
+																																				\
+        q = b1 + b2 + b3 + b4;                                          \
+        q = r + r*q;                                                    \
+        q;                                                              \
+    })
+
+
 /*
  * poly = x + (C1*x^3 + C2*x^5 + C3*x^7 + C4*x^9 + C5*x^11 + \
  *              C6*x^13 + C7*x^15)
@@ -164,6 +234,7 @@
         __typeof(r) r2, r4;                                     \
         r2 = r * r;                                             \
         r4 = r2 * r2;                                           \
+                                                                \
         a0 = c2*r2 + c1;                                        \
         a1 = a0*r2 + c0;                                        \
         a2 = (c3*r2 + c4*r4)*r4;                                \
diff --git a/include/libm/typehelper-vec.h b/include/libm/typehelper-vec.h
index dc34e6c..360a067 100644
--- a/include/libm/typehelper-vec.h
+++ b/include/libm/typehelper-vec.h
@@ -52,6 +52,13 @@
 /* TODO: check if _MM_SET1_I64x2 is used */
 #define _MM_SET1_I64x2(x) {(x), (x)}
 
+#define _MM_SET1_I64x4(x) 				\
+	_Generic((x),					\
+		long int: (__m256i){(x), (x), (x), (x)}, \
+		uint64_t: (__m256i){(x), (x), (x), (x)}, \
+		uint32_t: (__m256i){(x), (x), (x), (x)})
+
+
 #define _MM_SET1_I32(x) {(x), (x), (x), (x)}
 
 #define _MM_SET1_I64(x) {(x), (x), (x), (x)}
@@ -139,6 +146,26 @@ as_v2_u64_f64 (v_f64x2_t x)
     return r.u;
 }
 
+static inline v_i64x2_t
+as_v2_i64_f64 (v_f64x2_t x)
+{
+    union {
+        v_f64x2_t f; v_i64x2_t i;
+    } r = {.f = x};
+
+    return r.i;
+}
+
+static inline v_f64x2_t
+as_v2_f64_i64 (v_i64x2_t x)
+{
+    union {
+        v_i64x2_t _xi; v_f64x2_t _xf;
+    } val = { ._xi = x };
+
+    return val._xf;
+}
+
 /* v4 double precision */
 
 /* Access a u64x4 as f64x4 */
@@ -162,6 +189,27 @@ as_v4_u64_f64(v_f64x4_t x)
     return r.u;
 }
 
+/* Access a i64x4 as f64x4 */
+static inline v_f64x4_t
+as_v4_f64_i64(v_i64x4_t x)
+{
+    union {
+        v_f64x4_t f; v_i64x4_t i;
+    } r = {.i = x};
+
+    return r.f;
+}
+
+/* Access a i64x4 as f64x4 */
+static inline v_i64x4_t
+as_v4_i64_f64(v_f64x4_t x)
+{
+    union {
+        v_f64x4_t f; v_i64x4_t i;
+    } r = {.f = x};
+    return r.i;
+}
+
 /*
  * v8 single precision
  */
@@ -269,33 +317,33 @@ static inline int
 any_v4_u32(v_i32x4_t cond)
 {
     const v_i32x4_t zero = _MM_SET1_I32(0);
-    return ! _mm_testz_si128(cond, zero);
+    return ! _mm_testz_si128((__m128i)cond, (__m128i)zero);
 }
 
 static inline int
 any_v8_u32(v_i32x8_t cond)
 {
     const v_i32x8_t zero = {0,};
-    return ! _mm256_testz_si256(cond, zero);
+    return ! _mm256_testz_si256((__m256i)cond, (__m256i)zero);
 }
 
 static inline int
 any_v4_u64(v_i64x4_t cond)
 {
     const v_i64x4_t zero = _MM_SET1_I64(0);
-    return ! _mm256_testz_si256(cond, zero);
+    return ! _mm256_testz_si256((__m256i)cond, (__m256i)zero);
 }
 
 static inline int
 any_v2_u64(v_i64x2_t cond)
 {
     const v_i64x2_t zero = _MM_SET1_I64x2(0);
-    return ! _mm_testz_si128(cond, zero);
+    return ! _mm_testz_si128((__m128i)cond, (__m128i)zero);
 }
 
 // Condition check with for loop for better performance
 static inline int
-any_v4_u32_loop(v_i32x4_t cond)
+any_v4_u32_loop(v_u32x4_t cond)
 {
     int ret = 0;
 
@@ -311,7 +359,7 @@ any_v4_u32_loop(v_i32x4_t cond)
 
 // Condition check with for loop for better performance
 static inline int
-any_v2_u64_loop(v_i64x2_t cond)
+any_v2_u64_loop(v_u64x2_t cond)
 {
     int ret = 0;
 
@@ -327,7 +375,7 @@ any_v2_u64_loop(v_i64x2_t cond)
 
 // Condition check with for loop for better performance
 static inline int
-any_v4_u64_loop(v_i64x4_t cond)
+any_v4_u64_loop(v_u64x4_t cond)
 {
     int ret = 0;
     for (int i = 0; i < 4; i++) {
@@ -348,7 +396,7 @@ static inline v_f32x8_t
 call_v8_f32(float (*fn)(float),
             v_f32x8_t x,
             v_f32x8_t result,
-            v_i32x8_t cond)
+            v_u32x8_t cond)
 {
     return (v_f32x8_t) {
         cond[0] ? fn(x[0]) : result[0],
@@ -402,7 +450,7 @@ static inline v_f32x4_t
 call_v4_f32(float (*fn)(float),
            v_f32x4_t orig,
            v_f32x4_t result,
-           v_i32x4_t cond)
+           v_u32x4_t cond)
 {
     return (v_f32x4_t){cond[0] ? fn(orig[0]) : result[0],
             cond[1] ? fn(orig[1]) : result[1],
@@ -413,8 +461,11 @@ call_v4_f32(float (*fn)(float),
 
 #ifndef ALM_HAS_V4_CALL_2_F32
 #define ALM_HAS_V4_CALL_2_F32
+
+#define v_call2_f32(...)	call2_v4_f32(__VA_ARGS__)
+
 static inline v_f32x4_t
-v_call2_f32(float (*fn)(float, float),
+call2_v4_f32(float (*fn)(float, float),
             v_f32x4_t x,
             v_f32x4_t y,
             v_f32x4_t result,
@@ -430,11 +481,14 @@ v_call2_f32(float (*fn)(float, float),
 
 #ifndef ALM_HAS_V4_CALL_F64
 #define ALM_HAS_V4_CALL_F64
+
+#define v_call_f64(...)  call_v4_f64(__VA_ARGS__)
+
 static inline v_f64x4_t
-v_call_f64(double (*fn)(double),
+call_v4_f64(double (*fn)(double),
            v_f64x4_t orig,
            v_f64x4_t result,
-           v_i64x4_t cond)
+           v_u64x4_t cond)
 {
     return (v_f64x4_t){cond[0] ? fn(orig[0]) : result[0],
             cond[1] ? fn(orig[1]) : result[1],
@@ -443,6 +497,25 @@ v_call_f64(double (*fn)(double),
 }
 #endif
 
+#ifndef ALM_HAS_V2_CALL_F64
+#define ALM_HAS_V2_CALL_F64
+
+#define v2_call_f64(...) call_v2_f64(__VA_ARGS__)
+
+static inline v_f64x2_t
+call_v2_f64(double (*fn)(double),
+            v_f64x2_t x,
+            v_f64x2_t result,
+            v_u64x2_t cond)
+{
+    return (v_f64x2_t) {
+        cond[0] ? fn(x[0]) : result[0],
+        cond[1] ? fn(x[1]) : result[1],
+        };
+}
+#endif
+
+
 #ifndef ALM_HAS_V4_CALL_2_F64
 #define ALM_HAS_V4_CALL_2_F64
 static inline v_f64x4_t
@@ -493,7 +566,7 @@ cast_v8_f32_to_s32(v_i32x8_t _xi32)
 
 // Condition check with for loop for better performance
 static inline int
-any_v8_u32_loop(v_i32x8_t cond)
+any_v8_u32_loop(v_u32x8_t cond)
 {
     int ret = 0;
 
diff --git a/include/libm_amd.h b/include/libm_amd.h
index ef7c8a9..484ac1c 100644
--- a/include/libm_amd.h
+++ b/include/libm_amd.h
@@ -1,19 +1,20 @@
+
 /*
- * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
+  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without modification,
+  *  are permitted provided that the following conditions are met:
+  * 1. Redistributions of source code must retain the above copyright notice,
+  *    this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright notice,
+  *    this list of conditions and the following disclaimer in the documentation
+  *    and/or other materials provided with the distribution.
  * 3. Neither the name of the copyright holder nor the names of its contributors
  *    may be used to endorse or promote products derived from this software without
  *    specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
@@ -254,6 +255,9 @@ __m256d FN_PROTOTYPE(vrd4_exp)(__m256d x);
 __m256d FN_PROTOTYPE(vrd4_exp2)(__m256d x);
 __m256d FN_PROTOTYPE(vrd4_expm1)(__m256d x);
 __m256d FN_PROTOTYPE(vrd4_log)(__m256d x);
+__m256d FN_PROTOTYPE(vrd4_cos)(__m256d x);
+__m256d FN_PROTOTYPE(vrd4_sin)(__m256d x);
+__m256d FN_PROTOTYPE(vrd4_tan)(__m256d x);
 __m256d FN_PROTOTYPE(vrd4_pow)(__m256d x, __m256d y);
 
 __m128 FN_PROTOTYPE(vrs4_expf)(__m128 x);
@@ -270,9 +274,17 @@ __m128 FN_PROTOTYPE(vrs4_log1pf)(__m128 x);
 __m128 FN_PROTOTYPE(vrs4_powf)(__m128 x, __m128 y);
 __m128 FN_PROTOTYPE(vrs4_powxf)(__m128 x, float y);
 __m128 FN_PROTOTYPE(vrs4_tanf)(__m128 x);
+__m128 FN_PROTOTYPE(vrs4_coshf)(__m128 x);
+__m128 FN_PROTOTYPE(vrs4_tanhf)(__m128 x);
 
+__m256 FN_PROTOTYPE(vrs8_expf)(__m256 x);
 __m256 FN_PROTOTYPE(vrs8_logf)(__m256 x);
+__m256 FN_PROTOTYPE(vrs8_cosf)(__m256 x);
+__m256 FN_PROTOTYPE(vrs8_sinf)(__m256 x);
+__m256 FN_PROTOTYPE(vrs8_tanf)(__m256 x);
 __m256 FN_PROTOTYPE(vrs8_powf)(__m256 x, __m256 y);
+__m256 FN_PROTOTYPE(vrs8_coshf)(__m256 x);
+__m256 FN_PROTOTYPE(vrs8_tanhf)(__m256 x);
 
 void  FN_PROTOTYPE(vrd2_sincos)(__m128d x, __m128d* ys, __m128d* yc);
 void  FN_PROTOTYPE(vrda_sincos)(int n, double *x, double *ys, double *yc);
diff --git a/include/libm_macros.h b/include/libm_macros.h
index 6738560..a3a07ad 100644
--- a/include/libm_macros.h
+++ b/include/libm_macros.h
@@ -28,10 +28,6 @@
 #ifndef __LIBM_MACROS_H__
 #define __LIBM_MACROS_H__
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-
 /*
  * Spare the ugliness to non-coders
  */
@@ -117,8 +113,5 @@ extern "C" {
 // enable or disable exceptions in linux
 #define __enable_IEEE_exceptions 1
 
-#ifdef __cplusplus
-}
-#endif
 
 #endif  /* __LIBM_MACROS_H__ */
diff --git a/include/libm_special.h b/include/libm_special.h
index 27557fc..2ac30e1 100644
--- a/include/libm_special.h
+++ b/include/libm_special.h
@@ -297,6 +297,7 @@ extern  float _remainderf_special       (float x, float y, uint32_t errorCode);
 extern  float _sinf_cosf_special        (float x, char *name, _AMDLIBM_CODE code);
 extern  float _sinf_special             (float x);
 extern  float _tanf_special             (float x);
+extern  float _tanhf_special            (float x);
 extern  float _truncf_special           (float x, float r);
 extern  void _sincosf_special           (float x, float *sy, float *cy);
 extern  float _sinf_cosf_special_underflow(float x, char *name, _AMDLIBM_CODE code);
diff --git a/include/libm_util_amd.h b/include/libm_util_amd.h
index 582aa64..5ce3599 100644
--- a/include/libm_util_amd.h
+++ b/include/libm_util_amd.h
@@ -165,7 +165,7 @@ static const float VAL_2PMMULTIPLIER_SP = 5.9604645e-8F;
 #define MXCSR_ES_DIVBYZERO     0x00000004
 #define MXCSR_ES_INVALID       0x00000001
 
-#if defined(WINDOWS) || defined(WIN64)
+#if defined(WINDOWS) || (WIN64)
 #define	AMD_F_NONE		  0x0
 #define AMD_F_OVERFLOW    0x00000001
 #define AMD_F_UNDERFLOW   0x00000002
diff --git a/src/arch/SConscript b/src/arch/SConscript
index 14912ed..0435436 100644
--- a/src/arch/SConscript
+++ b/src/arch/SConscript
@@ -47,7 +47,7 @@ e.Append(
 
 objs = []
 
-dirs = ['zen2']
+dirs = ['zen2', 'zen3']
 
 for d in dirs:
     aenv = e.Clone()
diff --git a/src/arch/zen2/cos.c b/src/arch/zen2/cos.c
new file mode 100644
index 0000000..0fc3e38
--- /dev/null
+++ b/src/arch/zen2/cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/cos.c"
diff --git a/src/arch/zen2/coshf.c b/src/arch/zen2/coshf.c
new file mode 100644
index 0000000..4a2488b
--- /dev/null
+++ b/src/arch/zen2/coshf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/coshf.c"
diff --git a/src/arch/zen2/tan.c b/src/arch/zen2/tan.c
new file mode 100644
index 0000000..8cc76e1
--- /dev/null
+++ b/src/arch/zen2/tan.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+
+#include "../../optmized/tan.c"
diff --git a/src/arch/zen2/tanhf.c b/src/arch/zen2/tanhf.c
new file mode 100644
index 0000000..6999583
--- /dev/null
+++ b/src/arch/zen2/tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/tanhf.c"
diff --git a/src/arch/zen2/vrd2_cos.c b/src/arch/zen2/vrd2_cos.c
new file mode 100644
index 0000000..36bca7b
--- /dev/null
+++ b/src/arch/zen2/vrd2_cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd2_cos.c"
diff --git a/src/arch/zen2/vrd2_exp.c b/src/arch/zen2/vrd2_exp.c
new file mode 100644
index 0000000..7f5c71d
--- /dev/null
+++ b/src/arch/zen2/vrd2_exp.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd2_exp.c"
diff --git a/src/arch/zen2/vrd2_log.c b/src/arch/zen2/vrd2_log.c
new file mode 100644
index 0000000..8a7399a
--- /dev/null
+++ b/src/arch/zen2/vrd2_log.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd2_log.c"
diff --git a/src/arch/zen2/vrd2_pow.c b/src/arch/zen2/vrd2_pow.c
new file mode 100644
index 0000000..63d9a5a
--- /dev/null
+++ b/src/arch/zen2/vrd2_pow.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd2_pow.c"
diff --git a/src/arch/zen2/vrd2_tan.c b/src/arch/zen2/vrd2_tan.c
new file mode 100644
index 0000000..89d28a7
--- /dev/null
+++ b/src/arch/zen2/vrd2_tan.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd2_tan.c"
diff --git a/src/arch/zen2/vrd4_cos.c b/src/arch/zen2/vrd4_cos.c
new file mode 100644
index 0000000..b773fba
--- /dev/null
+++ b/src/arch/zen2/vrd4_cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd4_cos.c"
diff --git a/src/arch/zen2/vrd4_exp.c b/src/arch/zen2/vrd4_exp.c
new file mode 100644
index 0000000..72df4dc
--- /dev/null
+++ b/src/arch/zen2/vrd4_exp.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd4_exp.c"
diff --git a/src/arch/zen2/vrd4_log.c b/src/arch/zen2/vrd4_log.c
new file mode 100644
index 0000000..02ca658
--- /dev/null
+++ b/src/arch/zen2/vrd4_log.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd4_log.c"
diff --git a/src/arch/zen2/vrd4_pow.c b/src/arch/zen2/vrd4_pow.c
new file mode 100644
index 0000000..ee3cdce
--- /dev/null
+++ b/src/arch/zen2/vrd4_pow.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd4_pow.c"
diff --git a/src/arch/zen2/vrd4_tan.c b/src/arch/zen2/vrd4_tan.c
new file mode 100644
index 0000000..02e9a74
--- /dev/null
+++ b/src/arch/zen2/vrd4_tan.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrd4_tan.c"
diff --git a/src/arch/zen2/vrs4_coshf.c b/src/arch/zen2/vrs4_coshf.c
new file mode 100644
index 0000000..f0807ac
--- /dev/null
+++ b/src/arch/zen2/vrs4_coshf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs4_coshf.c"
diff --git a/src/arch/zen2/vrs4_expf.c b/src/arch/zen2/vrs4_expf.c
new file mode 100644
index 0000000..c0881d9
--- /dev/null
+++ b/src/arch/zen2/vrs4_expf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs4_expf.c"
diff --git a/src/arch/zen2/vrs4_logf.c b/src/arch/zen2/vrs4_logf.c
new file mode 100644
index 0000000..8a6f66a
--- /dev/null
+++ b/src/arch/zen2/vrs4_logf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs4_logf.c"
diff --git a/src/arch/zen2/vrs4_powf.c b/src/arch/zen2/vrs4_powf.c
new file mode 100644
index 0000000..52af874
--- /dev/null
+++ b/src/arch/zen2/vrs4_powf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs4_powf.c"
diff --git a/src/arch/zen2/vrs4_tanf.c b/src/arch/zen2/vrs4_tanf.c
index 29d45cc..b523cff 100644
--- a/src/arch/zen2/vrs4_tanf.c
+++ b/src/arch/zen2/vrs4_tanf.c
@@ -25,8 +25,8 @@
  *
  */
 
-#define ALM_OVERRIDE 1 
+#define ALM_OVERRIDE 1
 
-#include <libm/arch/zen2.h> 
+#include <libm/arch/zen2.h>
 
 #include "../../optmized/vec/vrs4_tanf.c"
diff --git a/src/arch/zen2/vrs4_tanhf.c b/src/arch/zen2/vrs4_tanhf.c
new file mode 100644
index 0000000..e7dbeff
--- /dev/null
+++ b/src/arch/zen2/vrs4_tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs4_tanhf.c"
diff --git a/src/arch/zen2/vrs8_coshf.c b/src/arch/zen2/vrs8_coshf.c
new file mode 100644
index 0000000..4f3dfdb
--- /dev/null
+++ b/src/arch/zen2/vrs8_coshf.c
@@ -0,0 +1,4 @@
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs8_coshf.c"
diff --git a/src/arch/zen2/vrs8_expf.c b/src/arch/zen2/vrs8_expf.c
new file mode 100644
index 0000000..e950ed2
--- /dev/null
+++ b/src/arch/zen2/vrs8_expf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/zen2.h>
+
+#include "../../optmized/vec/vrs8_expf.c"
diff --git a/src/arch/zen2/vrs8_logf.c b/src/arch/zen2/vrs8_logf.c
new file mode 100644
index 0000000..497bdf7
--- /dev/null
+++ b/src/arch/zen2/vrs8_logf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+
+#include "../../optmized/vec/vrs8_logf.c"
diff --git a/src/arch/zen2/vrs8_powf.c b/src/arch/zen2/vrs8_powf.c
new file mode 100644
index 0000000..c4caf31
--- /dev/null
+++ b/src/arch/zen2/vrs8_powf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+
+#include "../../optmized/vec/vrs8_powf.c"
diff --git a/src/arch/zen2/vrs8_tanhf.c b/src/arch/zen2/vrs8_tanhf.c
new file mode 100644
index 0000000..3981560
--- /dev/null
+++ b/src/arch/zen2/vrs8_tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen2.h>
+#include "../../optmized/vec/vrs8_tanhf.c"
diff --git a/src/arch/zen3/SConscript b/src/arch/zen3/SConscript
new file mode 100644
index 0000000..b4ceb7a
--- /dev/null
+++ b/src/arch/zen3/SConscript
@@ -0,0 +1,58 @@
+# Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without modification,
+# are permitted provided that the following conditions are met:
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright notice,
+#    this list of conditions and the following disclaimer in the documentation
+#    and/or other materials provided with the distribution.
+# 3. Neither the name of the copyright holder nor the names of its contributors
+#    may be used to endorse or promote products derived from this software without
+#    specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+# Inherit global environment
+Import('env')
+from os.path import join as joinpath
+
+builddir = joinpath(env['BUILDROOT'], 'src', 'optmized')
+
+e = env.Clone()
+
+# These rearrangements are not value-safe:
+#	 (a ⊕ b) ⊕ c ⇒ a ⊕ (b ⊕ c)
+#	 a ⊗ (b ⊕ c) ⇒ (a ⊗ b) ⊕ (a ⊕ c)
+# 
+# To Disallow these changes in gcc remove -ffast-math
+if '-ffast-math' in e['CFLAGS']:
+    e['CFLAGS'].remove('-ffast-math')
+
+incpaths = [
+    '#' + joinpath(Dir('.').srcnode().path),
+    '#' + joinpath(Dir('.').srcnode().path, 'include')
+]
+
+e.MergeFlags({
+    'CFLAGS'  : ['-march=znver3', '-O3', '-fPIC', '-flax-vector-conversions'],
+    'CPPPATH' : incpaths
+})
+
+experimental_src = []
+
+source = Glob('*.c', exclude=experimental_src)
+#source = Glob('*.c')
+
+objs = e.StaticObject(source)
+
+Return('objs')
diff --git a/src/arch/zen3/cos.c b/src/arch/zen3/cos.c
new file mode 100644
index 0000000..c07e303
--- /dev/null
+++ b/src/arch/zen3/cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/cos.c"
diff --git a/src/arch/zen3/cosf.c b/src/arch/zen3/cosf.c
new file mode 100644
index 0000000..3102301
--- /dev/null
+++ b/src/arch/zen3/cosf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/cosf.c"
diff --git a/src/arch/zen3/coshf.c b/src/arch/zen3/coshf.c
new file mode 100644
index 0000000..940e22c
--- /dev/null
+++ b/src/arch/zen3/coshf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/coshf.c"
diff --git a/src/arch/zen3/exp.c b/src/arch/zen3/exp.c
new file mode 100644
index 0000000..be4f50f
--- /dev/null
+++ b/src/arch/zen3/exp.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE  1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/exp.c"
+
diff --git a/src/arch/zen3/exp2.c b/src/arch/zen3/exp2.c
new file mode 100644
index 0000000..e954a86
--- /dev/null
+++ b/src/arch/zen3/exp2.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/exp2.c"
diff --git a/src/arch/zen3/expf.c b/src/arch/zen3/expf.c
new file mode 100644
index 0000000..66123b8
--- /dev/null
+++ b/src/arch/zen3/expf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/expf.c"
diff --git a/src/arch/zen3/expm1f.c b/src/arch/zen3/expm1f.c
new file mode 100644
index 0000000..8361513
--- /dev/null
+++ b/src/arch/zen3/expm1f.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE   1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/expm1f.c"
+
diff --git a/src/arch/zen3/log.c b/src/arch/zen3/log.c
new file mode 100644
index 0000000..ce31f7f
--- /dev/null
+++ b/src/arch/zen3/log.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/log.c"
diff --git a/src/arch/zen3/logf.c b/src/arch/zen3/logf.c
new file mode 100644
index 0000000..73af956
--- /dev/null
+++ b/src/arch/zen3/logf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/logf.c"
diff --git a/src/arch/zen3/pow.c b/src/arch/zen3/pow.c
new file mode 100644
index 0000000..34fdedf
--- /dev/null
+++ b/src/arch/zen3/pow.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/pow.c"
diff --git a/src/arch/zen3/powf.c b/src/arch/zen3/powf.c
new file mode 100644
index 0000000..c439911
--- /dev/null
+++ b/src/arch/zen3/powf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/powf.c"
diff --git a/src/arch/zen3/sin.c b/src/arch/zen3/sin.c
new file mode 100644
index 0000000..4ef9dbf
--- /dev/null
+++ b/src/arch/zen3/sin.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE  1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/sin.c"
+
diff --git a/src/arch/zen3/sinf.c b/src/arch/zen3/sinf.c
new file mode 100644
index 0000000..bd146e3
--- /dev/null
+++ b/src/arch/zen3/sinf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/sinf.c"
diff --git a/src/arch/zen3/tan.c b/src/arch/zen3/tan.c
new file mode 100644
index 0000000..7287ce1
--- /dev/null
+++ b/src/arch/zen3/tan.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/tan.c"
diff --git a/src/arch/zen3/tanf.c b/src/arch/zen3/tanf.c
new file mode 100644
index 0000000..97006a0
--- /dev/null
+++ b/src/arch/zen3/tanf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/tanf.c"
diff --git a/src/arch/zen3/tanhf.c b/src/arch/zen3/tanhf.c
new file mode 100644
index 0000000..6e6ff41
--- /dev/null
+++ b/src/arch/zen3/tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/tanhf.c"
diff --git a/src/arch/zen3/vrd2_cos.c b/src/arch/zen3/vrd2_cos.c
new file mode 100644
index 0000000..25d8032
--- /dev/null
+++ b/src/arch/zen3/vrd2_cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd2_cos.c"
diff --git a/src/arch/zen3/vrd2_exp.c b/src/arch/zen3/vrd2_exp.c
new file mode 100644
index 0000000..79a6d5d
--- /dev/null
+++ b/src/arch/zen3/vrd2_exp.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd2_exp.c"
diff --git a/src/arch/zen3/vrd2_log.c b/src/arch/zen3/vrd2_log.c
new file mode 100644
index 0000000..e6210e2
--- /dev/null
+++ b/src/arch/zen3/vrd2_log.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd2_log.c"
diff --git a/src/arch/zen3/vrd2_pow.c b/src/arch/zen3/vrd2_pow.c
new file mode 100644
index 0000000..b0796a1
--- /dev/null
+++ b/src/arch/zen3/vrd2_pow.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd2_pow.c"
diff --git a/src/arch/zen3/vrd2_sin.c b/src/arch/zen3/vrd2_sin.c
new file mode 100644
index 0000000..ee5a87c
--- /dev/null
+++ b/src/arch/zen3/vrd2_sin.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd2_sin.c"
diff --git a/src/arch/zen3/vrd2_tan.c b/src/arch/zen3/vrd2_tan.c
new file mode 100644
index 0000000..77765c7
--- /dev/null
+++ b/src/arch/zen3/vrd2_tan.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd2_tan.c"
diff --git a/src/arch/zen3/vrd4_cos.c b/src/arch/zen3/vrd4_cos.c
new file mode 100644
index 0000000..989469f
--- /dev/null
+++ b/src/arch/zen3/vrd4_cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd4_cos.c"
diff --git a/src/arch/zen3/vrd4_exp.c b/src/arch/zen3/vrd4_exp.c
new file mode 100644
index 0000000..4d00ed0
--- /dev/null
+++ b/src/arch/zen3/vrd4_exp.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd4_exp.c"
diff --git a/src/arch/zen3/vrd4_log.c b/src/arch/zen3/vrd4_log.c
new file mode 100644
index 0000000..4a3104b
--- /dev/null
+++ b/src/arch/zen3/vrd4_log.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd4_log.c"
diff --git a/src/arch/zen3/vrd4_pow.c b/src/arch/zen3/vrd4_pow.c
new file mode 100644
index 0000000..ab79212
--- /dev/null
+++ b/src/arch/zen3/vrd4_pow.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd4_pow.c"
diff --git a/src/arch/zen3/vrd4_sin.c b/src/arch/zen3/vrd4_sin.c
new file mode 100644
index 0000000..3110b9d
--- /dev/null
+++ b/src/arch/zen3/vrd4_sin.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd4_sin.c"
diff --git a/src/arch/zen3/vrd4_tan.c b/src/arch/zen3/vrd4_tan.c
new file mode 100644
index 0000000..8d7bbe8
--- /dev/null
+++ b/src/arch/zen3/vrd4_tan.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrd4_tan.c"
diff --git a/src/arch/zen3/vrs4_cosf.c b/src/arch/zen3/vrs4_cosf.c
new file mode 100644
index 0000000..88e4895
--- /dev/null
+++ b/src/arch/zen3/vrs4_cosf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_cosf.c"
diff --git a/src/arch/zen3/vrs4_coshf.c b/src/arch/zen3/vrs4_coshf.c
new file mode 100644
index 0000000..2815250
--- /dev/null
+++ b/src/arch/zen3/vrs4_coshf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_coshf.c"
diff --git a/src/arch/zen3/vrs4_expf.c b/src/arch/zen3/vrs4_expf.c
new file mode 100644
index 0000000..0d06b6a
--- /dev/null
+++ b/src/arch/zen3/vrs4_expf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_expf.c"
diff --git a/src/arch/zen3/vrs4_logf.c b/src/arch/zen3/vrs4_logf.c
new file mode 100644
index 0000000..6f4918f
--- /dev/null
+++ b/src/arch/zen3/vrs4_logf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_logf.c"
diff --git a/src/arch/zen3/vrs4_powf.c b/src/arch/zen3/vrs4_powf.c
new file mode 100644
index 0000000..dbe97da
--- /dev/null
+++ b/src/arch/zen3/vrs4_powf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_powf.c"
diff --git a/src/arch/zen3/vrs4_sinf.c b/src/arch/zen3/vrs4_sinf.c
new file mode 100644
index 0000000..4eb37db
--- /dev/null
+++ b/src/arch/zen3/vrs4_sinf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_sinf.c"
diff --git a/src/arch/zen3/vrs4_tanf.c b/src/arch/zen3/vrs4_tanf.c
new file mode 100644
index 0000000..c4812b7
--- /dev/null
+++ b/src/arch/zen3/vrs4_tanf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/vec/vrs4_tanf.c"
diff --git a/src/arch/zen3/vrs4_tanhf.c b/src/arch/zen3/vrs4_tanhf.c
new file mode 100644
index 0000000..a7c5db7
--- /dev/null
+++ b/src/arch/zen3/vrs4_tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs4_tanhf.c"
diff --git a/src/arch/zen3/vrs8_cosf.c b/src/arch/zen3/vrs8_cosf.c
new file mode 100644
index 0000000..30527e3
--- /dev/null
+++ b/src/arch/zen3/vrs8_cosf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs8_cosf.c"
diff --git a/src/arch/zen3/vrs8_coshf.c b/src/arch/zen3/vrs8_coshf.c
new file mode 100644
index 0000000..c5afba9
--- /dev/null
+++ b/src/arch/zen3/vrs8_coshf.c
@@ -0,0 +1,4 @@
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs8_coshf.c"
diff --git a/src/arch/zen3/vrs8_expf.c b/src/arch/zen3/vrs8_expf.c
new file mode 100644
index 0000000..d7de30e
--- /dev/null
+++ b/src/arch/zen3/vrs8_expf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/vec/vrs8_expf.c"
diff --git a/src/arch/zen3/vrs8_logf.c b/src/arch/zen3/vrs8_logf.c
new file mode 100644
index 0000000..a25c6a6
--- /dev/null
+++ b/src/arch/zen3/vrs8_logf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/vec/vrs8_logf.c"
diff --git a/src/arch/zen3/vrs8_powf.c b/src/arch/zen3/vrs8_powf.c
new file mode 100644
index 0000000..e1211aa
--- /dev/null
+++ b/src/arch/zen3/vrs8_powf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+
+#include "../../optmized/vec/vrs8_powf.c"
diff --git a/src/arch/zen3/vrs8_sinf.c b/src/arch/zen3/vrs8_sinf.c
new file mode 100644
index 0000000..ed8babd
--- /dev/null
+++ b/src/arch/zen3/vrs8_sinf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs8_sinf.c"
diff --git a/src/arch/zen3/vrs8_tanf.c b/src/arch/zen3/vrs8_tanf.c
new file mode 100644
index 0000000..dcf5837
--- /dev/null
+++ b/src/arch/zen3/vrs8_tanf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs8_tanf.c"
diff --git a/src/arch/zen3/vrs8_tanhf.c b/src/arch/zen3/vrs8_tanhf.c
new file mode 100644
index 0000000..df15bdb
--- /dev/null
+++ b/src/arch/zen3/vrs8_tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/zen3.h>
+#include "../../optmized/vec/vrs8_tanhf.c"
diff --git a/src/cpu_features.c b/src/cpu_features.c
index 111042c..abc65ef 100644
--- a/src/cpu_features.c
+++ b/src/cpu_features.c
@@ -34,26 +34,26 @@
 #include <libm/compiler.h>
 #include <libm/iface.h>
 
-struct cpu_features cpu_features HIDDEN;
+struct alm_cpu_features cpu_features HIDDEN;
 
 struct {
     uint32_t eax;
     uint32_t ecx;
-} __cpuid_values[CPUID_MAX] = {
-    [CPUID_EAX_1] = {0x1, 0x0},                         /* eax = 0, ecx=0 */
-    [CPUID_EAX_7] = {0x7, 0x0},                         /* eax = 7,  -"- */
-    [CPUID_EAX_8_01] = {0x80000001, 0x0},               /* eax = 0x80000001 */
-    [CPUID_EAX_8_07] = {0x80000007, 0x0},               /* eax = 0x80000007 */
-    [CPUID_EAX_8_08] = {0x80000008, 0x0},               /* eax = 0x80000008 */
+} __cpuid_values[ALM_CPUID_MAX] = {
+    [ALM_CPUID_EAX_1] = {0x1, 0x0},                         /* eax = 0, ecx=0 */
+    [ALM_CPUID_EAX_7] = {0x7, 0x0},                         /* eax = 7,  -"- */
+    [ALM_CPUID_EAX_8_01] = {0x80000001, 0x0},               /* eax = 0x80000001 */
+    [ALM_CPUID_EAX_8_07] = {0x80000007, 0x0},               /* eax = 0x80000007 */
+    [ALM_CPUID_EAX_8_08] = {0x80000008, 0x0},               /* eax = 0x80000008 */
 };
 
 static void
-__get_mfg_info(struct cpuid_regs *regs, struct cpu_mfg_info *mfg_info)
+__get_mfg_info(struct alm_cpuid_regs *regs, struct alm_cpu_mfg_info *mfg_info)
 {
     uint32_t ext_model;
 
     if (mfg_info) {
-        struct cpuid_regs regs;
+        struct alm_cpuid_regs regs;
         uint32_t eax;
 
         __cpuid_1(1, &regs);
@@ -82,24 +82,24 @@ __init_cpu_features(void)
 {
     static unsigned initialized = 0;
 
-    struct cpu_mfg_info *mfg_info = &cpu_features.cpu_mfg_info;
+    struct alm_cpu_mfg_info *mfg_info = &cpu_features.cpu_mfg_info;
     int arr_size = ARRAY_SIZE(__cpuid_values);
-    //assert(arr_size <= CPUID_MAX);
+    //assert(arr_size <= ALM_CPUID_MAX);
 
     if (initialized == INITIALIZED_MAGIC)
         return;
 
-    struct cpuid_regs regs;
+    struct alm_cpuid_regs regs;
     __cpuid_1(0, &regs);
 
     /* "AuthenticAMD" */
     if (regs.ebx == 0x68747541 && regs.ecx == 0x444d4163 &&
         regs.edx == 0x69746e65) {
-        cpu_features.cpu_mfg_info.mfg_type = CPU_MFG_AMD;
+        cpu_features.cpu_mfg_info.mfg_type = ALM_CPU_MFG_AMD;
     }
 
     for (int i = 0; i < arr_size; i++) {
-        struct cpuid_regs ft;
+        struct alm_cpuid_regs ft;
 
         __cpuid_2(__cpuid_values[i].eax, __cpuid_values[i].ecx, &ft);
 
@@ -109,37 +109,44 @@ __init_cpu_features(void)
         cpu_features.available[i].edx = ft.edx;
     }
 
-    __get_mfg_info(&cpu_features.available[CPUID_EAX_1], mfg_info);
+    __get_mfg_info(&cpu_features.available[ALM_CPUID_EAX_1], mfg_info);
 
     /*
      * Globally disable some *_USEABLE flags, so that all ifunc's
      * sees them
      */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
+    if (mfg_info->mfg_type == ALM_CPU_MFG_AMD) {
         memcpy(&cpu_features.usable[0], &cpu_features.available[0],
                sizeof(cpu_features.usable));
 
         switch(mfg_info->family) {
-        case 0x15:                      /* Naples */
+        case ALM_CPU_FAMILY_NAPLES:     /* Naples */
             break;
-        case 0x17:                      /* Rome */
+        case ALM_CPU_FAMILY_ROME:       /* Rome */
             break;
-        case 0x19:                      /* Milan */
+        case ALM_CPU_FAMILY_MILAN:      /* Milan */
             break;
         }
     }
 
     initialized = INITIALIZED_MAGIC;
+
+#if defined(DEVELOPER)
+		/* We override any from  */
+		const char *env_cpuid_str = ALM_ENV_ALM_CPUID;
+		alm_env_get(env_cpuid_str, sizeof(env_cpuid_str), mfg_info);
+
+#endif
 }
 
 static void CONSTRUCTOR
-libm_init_cpu(void)
+alm_init_cpu(void)
 {
     __init_cpu_features();
 }
 
-struct cpu_features *
-libm_cpu_get_features(void)
+struct alm_cpu_features *
+alm_cpu_get_features(void)
 {
     __init_cpu_features();
 
@@ -147,17 +154,54 @@ libm_cpu_get_features(void)
 }
 
 int
-libm_cpu_feature_is_avx_usable(void)
+alm_cpu_is_amd(void)
+{
+    __init_cpu_features();
+    struct alm_cpu_mfg_info *mfg_info = &cpu_features.cpu_mfg_info;
+
+    return mfg_info->mfg_type == ALM_CPU_MFG_AMD;
+}
+
+static int
+alm_cpu_arch_is(uint16_t family)
+{
+    __init_cpu_features();
+
+    struct alm_cpu_mfg_info *mfg_info = &cpu_features.cpu_mfg_info;
+
+    return mfg_info->family == family;
+}
+
+int
+alm_cpu_arch_is_zen(void)
+{
+    return alm_cpu_arch_is(ALM_CPU_FAMILY_NAPLES);
+}
+
+int
+alm_cpu_arch_is_zen2(void)
+{
+    return alm_cpu_arch_is(ALM_CPU_FAMILY_ROME);
+}
+
+int
+alm_cpu_arch_is_zen3(void)
+{
+    return alm_cpu_arch_is(ALM_CPU_FAMILY_MILAN);
+}
+
+int
+alm_cpu_feature_is_avx_usable(void)
 {
     __init_cpu_features();
 
-    return CPU_FEATURE_AVX_USABLE(&cpu_features);
+    return ALM_CPU_FEATURE_AVX_USABLE(&cpu_features);
 }
 
 int
-libm_cpu_feature_is_avx2_usable(void)
+alm_cpu_feature_is_avx2_usable(void)
 {
     __init_cpu_features();
 
-    return CPU_FEATURE_AVX2_USABLE(&cpu_features);
+    return ALM_CPU_FEATURE_AVX2_USABLE(&cpu_features);
 }
diff --git a/src/entry_pt.c b/src/entry_pt.c
index 7e258b1..3e20623 100644
--- a/src/entry_pt.c
+++ b/src/entry_pt.c
@@ -18,7 +18,7 @@
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * OR PROFITS; OR BUSINESS INTERRUPT_PTRION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
@@ -37,218 +37,222 @@ extern "C"
 {
 #endif
 
-double G_ENTRY_PT(acos)(double x);
-double G_ENTRY_PT(acosh)(double x);
-double G_ENTRY_PT(asin)(double x);
-double G_ENTRY_PT(asinh)(double x);
-double G_ENTRY_PT(atan2)(double x, double y);
-double G_ENTRY_PT(atan)(double x);
-double G_ENTRY_PT(atanh)(double x);
-double G_ENTRY_PT(cbrt)(double x);
-double G_ENTRY_PT(ceil)(double x);
-double G_ENTRY_PT(copysign)(double x, double y);
-double G_ENTRY_PT(cos)(double x);
-double G_ENTRY_PT(cosh)(double x);
-double G_ENTRY_PT(cospi)(double x);
-double G_ENTRY_PT(exp10)(double x);
-double G_ENTRY_PT(exp2)(double x);
-double G_ENTRY_PT(exp)(double x);
-double G_ENTRY_PT(expm1)(double x);
-double G_ENTRY_PT(fabs)(double x);
-double G_ENTRY_PT(fastpow)(double x, double y);
-double G_ENTRY_PT(fdim)(double x, double y);
-double G_ENTRY_PT(floor)(double x);
-double G_ENTRY_PT(fma)(double x, double y, double z);
-double G_ENTRY_PT(fmax)(double x, double y);
-double G_ENTRY_PT(fmin)(double x, double y);
-double G_ENTRY_PT(fmod)(double x, double y);
-double G_ENTRY_PT(frexp)(double value, int *exp);
-double G_ENTRY_PT(hypot)(double x, double y);
-double G_ENTRY_PT(ldexp)(double x, int exp);
-double G_ENTRY_PT(log10)(double x);
-double G_ENTRY_PT(log1p)(double x);
-double G_ENTRY_PT(log2)(double x);
-double G_ENTRY_PT(logb)(double x);
-double G_ENTRY_PT(log)(double x);
-double G_ENTRY_PT(modf)(double x, double *iptr);
-double G_ENTRY_PT(nan)(const char *tagp);
-double G_ENTRY_PT(nearbyint)(double x);
-double G_ENTRY_PT(nextafter)(double x, double y);
-double G_ENTRY_PT(nexttoward)(double x, long double y);
-double G_ENTRY_PT(pow)(double x, double y);
-double G_ENTRY_PT(remainder)(double x, double y);
-double G_ENTRY_PT(remquo) (double x, double y, int *quo);
-double G_ENTRY_PT(rint)(double x);
-double G_ENTRY_PT(round)(double f);
-double G_ENTRY_PT(scalbln)(double x, long int n);
-double G_ENTRY_PT(scalbn)(double x, int n);
-double G_ENTRY_PT(sin)(double x);
-double G_ENTRY_PT(sinh)(double x);
-double G_ENTRY_PT(sinpi)(double x);
-double G_ENTRY_PT(sqrt)(double x);
-double G_ENTRY_PT(tan)(double x);
-double G_ENTRY_PT(tanh)(double x);
-double G_ENTRY_PT(tanpi)(double x);
-double G_ENTRY_PT(trunc)(double x);
+alm_func_t        G_ENTRY_PT_PTR(acos);
+alm_func_t        G_ENTRY_PT_PTR(acosh);
+alm_func_t        G_ENTRY_PT_PTR(asin);
+alm_func_t        G_ENTRY_PT_PTR(asinh);
+alm_func_t        G_ENTRY_PT_PTR(atan2);
+alm_func_t        G_ENTRY_PT_PTR(atan);
+alm_func_t        G_ENTRY_PT_PTR(atanh);
+alm_func_t        G_ENTRY_PT_PTR(cbrt);
+alm_func_t        G_ENTRY_PT_PTR(ceil);
+alm_func_t        G_ENTRY_PT_PTR(copysign);
+alm_func_t        G_ENTRY_PT_PTR(cos);
+alm_func_t        G_ENTRY_PT_PTR(cosh);
+alm_func_t        G_ENTRY_PT_PTR(cospi);
+alm_func_t        G_ENTRY_PT_PTR(exp10);
+alm_func_t        G_ENTRY_PT_PTR(exp2);
+alm_func_t        G_ENTRY_PT_PTR(exp);
+alm_func_t        G_ENTRY_PT_PTR(expm1);
+alm_func_t        G_ENTRY_PT_PTR(fabs);
+alm_func_t        G_ENTRY_PT_PTR(fastpow);
+alm_func_t        G_ENTRY_PT_PTR(fdim);
+alm_func_t        G_ENTRY_PT_PTR(floor);
+alm_func_t        G_ENTRY_PT_PTR(fma);
+alm_func_t        G_ENTRY_PT_PTR(fmax);
+alm_func_t        G_ENTRY_PT_PTR(fmin);
+alm_func_t        G_ENTRY_PT_PTR(fmod);
+alm_func_t        G_ENTRY_PT_PTR(frexp);
+alm_func_t        G_ENTRY_PT_PTR(hypot);
+alm_func_t        G_ENTRY_PT_PTR(ldexp);
+alm_func_t        G_ENTRY_PT_PTR(log10);
+alm_func_t        G_ENTRY_PT_PTR(log1p);
+alm_func_t        G_ENTRY_PT_PTR(log2);
+alm_func_t        G_ENTRY_PT_PTR(logb);
+alm_func_t        G_ENTRY_PT_PTR(log);
+alm_func_t        G_ENTRY_PT_PTR(modf);
+alm_func_t        G_ENTRY_PT_PTR(nan);
+alm_func_t        G_ENTRY_PT_PTR(nearbyint);
+alm_func_t        G_ENTRY_PT_PTR(nextafter);
+alm_func_t        G_ENTRY_PT_PTR(nexttoward);
+alm_func_t        G_ENTRY_PT_PTR(pow);
+alm_func_t        G_ENTRY_PT_PTR(remainder);
+alm_func_t        G_ENTRY_PT_PTR(remquo);
+alm_func_t        G_ENTRY_PT_PTR(rint);
+alm_func_t        G_ENTRY_PT_PTR(round);
+alm_func_t        G_ENTRY_PT_PTR(scalbln);
+alm_func_t        G_ENTRY_PT_PTR(scalbn);
+alm_func_t        G_ENTRY_PT_PTR(sin);
+alm_func_t        G_ENTRY_PT_PTR(sinh);
+alm_func_t        G_ENTRY_PT_PTR(sinpi);
+alm_func_t        G_ENTRY_PT_PTR(sqrt);
+alm_func_t        G_ENTRY_PT_PTR(tan);
+alm_func_t        G_ENTRY_PT_PTR(tanh);
+alm_func_t        G_ENTRY_PT_PTR(tanpi);
+alm_func_t        G_ENTRY_PT_PTR(trunc);
 
 /*
  * required by NAG tests
  */
-double G_ENTRY_PT(remainder_piby2)(double x, double y);
-double G_ENTRY_PT(remainder_piby2d2f)(double x, double y);
+alm_func_t        G_ENTRY_PT_PTR(remainder_piby2);
+alm_func_t        G_ENTRY_PT_PTR(remainder_piby2d2f);
 
 /*
  * Single Precision functions
  */
-float G_ENTRY_PT(acosf)(float x);
-float G_ENTRY_PT(acoshf)(float x);
-float G_ENTRY_PT(asinf)(float x);
-float G_ENTRY_PT(asinhf)(float x);
-float G_ENTRY_PT(atan2f)(float x, float y);
-float G_ENTRY_PT(atanf)(float x);
-float G_ENTRY_PT(atanhf)(float x);
-float G_ENTRY_PT(cbrtf)(float x);
-float G_ENTRY_PT(ceilf)(float x);
-float G_ENTRY_PT(copysignf)(float x, float y);
-float G_ENTRY_PT(cosf)(float x);
-float G_ENTRY_PT(coshf)(float fx);
-float G_ENTRY_PT(cospif)(float x);
-float G_ENTRY_PT(exp10f)(float x);
-float G_ENTRY_PT(exp2f)(float x);
-float G_ENTRY_PT(expf)(float x);
-float G_ENTRY_PT(expm1f)(float x);
-float G_ENTRY_PT(fabsf)(float x);
-float G_ENTRY_PT(fdimf)(float x, float y);
-float G_ENTRY_PT(floorf)(float x);
-float G_ENTRY_PT(fmaf)(float x, float y, float z);
-float G_ENTRY_PT(fmaxf)(float x, float y);
-float G_ENTRY_PT(fminf)(float x, float y);
-float G_ENTRY_PT(fmodf)(float x, float y);
-float G_ENTRY_PT(frexpf)(float value, int *exp);
-float G_ENTRY_PT(hypotf)(float x, float y);
-float G_ENTRY_PT(ldexpf)(float x, int exp);
-float G_ENTRY_PT(log10f)(float x);
-float G_ENTRY_PT(log1pf)(float x);
-float G_ENTRY_PT(log2f)(float x);
-float G_ENTRY_PT(logbf)(float x);
-float G_ENTRY_PT(logf)(float x);
-float G_ENTRY_PT(modff)(float x, float *iptr);
-float G_ENTRY_PT(nanf)(const char *tagp);
-float G_ENTRY_PT(nearbyintf)(float x);
-float G_ENTRY_PT(nextafterf)(float x, float y);
-float G_ENTRY_PT(nexttowardf)(float x, long double y);
-float G_ENTRY_PT(powf)(float x, float y);
-float G_ENTRY_PT(remainderf)(float x, float y);
-float G_ENTRY_PT(remquof) (float x, float y, int *quo);
-float G_ENTRY_PT(rintf)(float x);
-float G_ENTRY_PT(roundf)(float f);
-float G_ENTRY_PT(scalblnf)(float x, long int n);
-float G_ENTRY_PT(scalbnf)(float x, int n);
-float G_ENTRY_PT(sinf)(float x);
-float G_ENTRY_PT(sinhf)(float x);
-float G_ENTRY_PT(sinpif)(float x);
-float G_ENTRY_PT(sqrtf)(float x);
-float G_ENTRY_PT(tanf)(float x);
-float G_ENTRY_PT(tanhf)(float x);
-float G_ENTRY_PT(tanpif)(float x);
-float G_ENTRY_PT(truncf)(float x);
+alm_func_t        G_ENTRY_PT_PTR(acosf);
+alm_func_t        G_ENTRY_PT_PTR(acoshf);
+alm_func_t        G_ENTRY_PT_PTR(asinf);
+alm_func_t        G_ENTRY_PT_PTR(asinhf);
+alm_func_t        G_ENTRY_PT_PTR(atan2f);
+alm_func_t        G_ENTRY_PT_PTR(atanf);
+alm_func_t        G_ENTRY_PT_PTR(atanhf);
+alm_func_t        G_ENTRY_PT_PTR(cbrtf);
+alm_func_t        G_ENTRY_PT_PTR(ceilf);
+alm_func_t        G_ENTRY_PT_PTR(copysignf);
+alm_func_t        G_ENTRY_PT_PTR(cosf);
+alm_func_t        G_ENTRY_PT_PTR(coshf);
+alm_func_t        G_ENTRY_PT_PTR(cospif);
+alm_func_t        G_ENTRY_PT_PTR(exp10f);
+alm_func_t        G_ENTRY_PT_PTR(exp2f);
+alm_func_t        G_ENTRY_PT_PTR(expf);
+alm_func_t        G_ENTRY_PT_PTR(expm1f);
+alm_func_t        G_ENTRY_PT_PTR(fabsf);
+alm_func_t        G_ENTRY_PT_PTR(fdimf);
+alm_func_t        G_ENTRY_PT_PTR(floorf);
+alm_func_t        G_ENTRY_PT_PTR(fmaf);
+alm_func_t        G_ENTRY_PT_PTR(fmaxf);
+alm_func_t        G_ENTRY_PT_PTR(fminf);
+alm_func_t        G_ENTRY_PT_PTR(fmodf);
+alm_func_t        G_ENTRY_PT_PTR(frexpf);
+alm_func_t        G_ENTRY_PT_PTR(hypotf);
+alm_func_t        G_ENTRY_PT_PTR(ldexpf);
+alm_func_t        G_ENTRY_PT_PTR(log10f);
+alm_func_t        G_ENTRY_PT_PTR(log1pf);
+alm_func_t        G_ENTRY_PT_PTR(log2f);
+alm_func_t        G_ENTRY_PT_PTR(logbf);
+alm_func_t        G_ENTRY_PT_PTR(logf);
+alm_func_t        G_ENTRY_PT_PTR(modff);
+alm_func_t        G_ENTRY_PT_PTR(nanf);
+alm_func_t        G_ENTRY_PT_PTR(nearbyintf);
+alm_func_t        G_ENTRY_PT_PTR(nextafterf);
+alm_func_t        G_ENTRY_PT_PTR(nexttowardf);
+alm_func_t        G_ENTRY_PT_PTR(powf);
+alm_func_t        G_ENTRY_PT_PTR(remainderf);
+alm_func_t        G_ENTRY_PT_PTR(remquof);
+alm_func_t        G_ENTRY_PT_PTR(rintf);
+alm_func_t        G_ENTRY_PT_PTR(roundf);
+alm_func_t        G_ENTRY_PT_PTR(scalblnf);
+alm_func_t        G_ENTRY_PT_PTR(scalbnf);
+alm_func_t        G_ENTRY_PT_PTR(sinf);
+alm_func_t        G_ENTRY_PT_PTR(sinhf);
+alm_func_t        G_ENTRY_PT_PTR(sinpif);
+alm_func_t        G_ENTRY_PT_PTR(sqrtf);
+alm_func_t        G_ENTRY_PT_PTR(tanf);
+alm_func_t        G_ENTRY_PT_PTR(tanhf);
+alm_func_t        G_ENTRY_PT_PTR(tanpif);
+alm_func_t        G_ENTRY_PT_PTR(truncf);
 
 /*
  * Integer variants
  */
-int G_ENTRY_PT(finite)(double x);
-int G_ENTRY_PT(finitef)(float x);
-int G_ENTRY_PT(ilogb)(double x);
-int G_ENTRY_PT(ilogbf)(float x);
-long int G_ENTRY_PT(lrint)(double x);
-long int G_ENTRY_PT(lrintf)(float x);
-long int G_ENTRY_PT(lround)(double d);
-long int G_ENTRY_PT(lroundf)(float f);
-long long int G_ENTRY_PT(llrint)(double x);
-long long int G_ENTRY_PT(llrintf)(float x);
-long long int G_ENTRY_PT(llround)(double d);
-long long int G_ENTRY_PT(llroundf)(float f);
+alm_func_t        G_ENTRY_PT_PTR(finite);
+alm_func_t        G_ENTRY_PT_PTR(finitef);
+alm_func_t        G_ENTRY_PT_PTR(ilogb);
+alm_func_t        G_ENTRY_PT_PTR(ilogbf);
+alm_func_t        G_ENTRY_PT_PTR(lrint);
+alm_func_t        G_ENTRY_PT_PTR(lrintf);
+alm_func_t        G_ENTRY_PT_PTR(lround);
+alm_func_t        G_ENTRY_PT_PTR(lroundf);
+alm_func_t        G_ENTRY_PT_PTR(llrint);
+alm_func_t        G_ENTRY_PT_PTR(llrintf);
+alm_func_t        G_ENTRY_PT_PTR(llround);
+alm_func_t        G_ENTRY_PT_PTR(llroundf);
 
-void G_ENTRY_PT(vrda_cbrt)(int, double*, double*);
-void G_ENTRY_PT(vrda_cos)(int, double*, double*);
-void G_ENTRY_PT(vrda_exp)(int, double*, double*);
-void G_ENTRY_PT(vrda_exp2)(int, double*, double*);
-void G_ENTRY_PT(vrda_exp10)(int, double*, double*);
-void G_ENTRY_PT(vrda_expm1)(int, double*, double*);
-void G_ENTRY_PT(vrda_log)(int, double*, double*);
-void G_ENTRY_PT(vrda_log10)(int, double*, double*);
-void G_ENTRY_PT(vrda_log1p)(int, double*, double*);
-void G_ENTRY_PT(vrda_log2)(int, double*, double*);
-void G_ENTRY_PT(vrda_pow)(int, double*, double*);
-void G_ENTRY_PT(vrda_sin)(int, double*, double*);
+alm_func_t        G_ENTRY_PT_PTR(vrda_cbrt);
+alm_func_t        G_ENTRY_PT_PTR(vrda_cos);
+alm_func_t        G_ENTRY_PT_PTR(vrda_exp);
+alm_func_t        G_ENTRY_PT_PTR(vrda_exp2);
+alm_func_t        G_ENTRY_PT_PTR(vrda_exp10);
+alm_func_t        G_ENTRY_PT_PTR(vrda_expm1);
+alm_func_t        G_ENTRY_PT_PTR(vrda_log);
+alm_func_t        G_ENTRY_PT_PTR(vrda_log10);
+alm_func_t        G_ENTRY_PT_PTR(vrda_log1p);
+alm_func_t        G_ENTRY_PT_PTR(vrda_log2);
+alm_func_t        G_ENTRY_PT_PTR(vrda_pow);
+alm_func_t        G_ENTRY_PT_PTR(vrda_sin);
 
 
-void G_ENTRY_PT(vrsa_cosf)(int, float*, float*);
-void G_ENTRY_PT(vrsa_expf)(int, float*, float*);
-void G_ENTRY_PT(vrsa_exp2f)(int, float*, float*);
-void G_ENTRY_PT(vrsa_exp10f)(int, float*, float*);
-void G_ENTRY_PT(vrsa_expm1f)(int, float*, float*);
-void G_ENTRY_PT(vrsa_log1pf)(int, float*, float*);
-void G_ENTRY_PT(vrsa_sinf)(int, float*, float*);
-void G_ENTRY_PT(vrsa_log2f)(int, float*, float*);
-void G_ENTRY_PT(vrsa_cbrtf)(int, float*, float*);
-void G_ENTRY_PT(vrsa_log10f)(int, float*, float*);
-void G_ENTRY_PT(vrsa_logf)(int, float*, float*);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_cosf);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_expf);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_exp2f);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_exp10f);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_expm1f);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_log1pf);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_sinf);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_log2f);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_cbrtf);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_log10f);
+alm_func_t        G_ENTRY_PT_PTR(vrsa_logf);
 
 #ifndef _MSC_VER
-void  G_ENTRY_PT(sincos)(double,double *,double *);
-void  G_ENTRY_PT(sincosf)(float,float *,float *);
+alm_func_t        G_ENTRY_PT_PTR(sincos);
+alm_func_t        G_ENTRY_PT_PTR(sincosf);
 #endif
 
-__m128  G_ENTRY_PT(vrs4_cosf)(__m128);
-__m128  G_ENTRY_PT(vrs4_cbrtf)(__m128);
-__m128  G_ENTRY_PT(vrs4_expf)(__m128);
-__m128  G_ENTRY_PT(vrs4_exp2f)(__m128);
-__m128  G_ENTRY_PT(vrs4_exp10f)(__m128);
-__m128  G_ENTRY_PT(vrs4_expm1f)(__m128);
-__m128  G_ENTRY_PT(vrs4_logf)(__m128);
-__m128  G_ENTRY_PT(vrs4_log2f)(__m128);
-__m128  G_ENTRY_PT(vrs4_log10f)(__m128);
-__m128  G_ENTRY_PT(vrs4_log1pf)(__m128);
-__m128  G_ENTRY_PT(vrs4_sinf)(__m128);
-__m128  G_ENTRY_PT(vrs4_tanf)(__m128);
-__m128  G_ENTRY_PT(vrs4_powf)(__m128, __m128);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_cosf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_cbrtf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_expf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_exp2f);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_exp10f);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_expm1f);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_logf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_log2f);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_log10f);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_log1pf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_sinf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_tanf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_coshf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_tanhf);
+alm_func_t        G_ENTRY_PT_PTR(vrs4_powf);
 
-__m256  G_ENTRY_PT(vrs8_logf)(__m256);
-__m256  G_ENTRY_PT(vrs8_expf)(__m256);
-__m256  G_ENTRY_PT(vrs8_sinf)(__m256);
-__m256  G_ENTRY_PT(vrs8_tanf)(__m256);
-__m256  G_ENTRY_PT(vrs8_cosf)(__m256);
-__m256  G_ENTRY_PT(vrs8_powf)(__m256, __m256);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_logf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_expf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_sinf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_tanf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_cosf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_coshf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_tanhf);
+alm_func_t        G_ENTRY_PT_PTR(vrs8_powf);
 
-__m128d G_ENTRY_PT(vrd2_cbrt)(__m128d);
-__m128d G_ENTRY_PT(vrd2_cos)(__m128d);
-__m128d G_ENTRY_PT(vrd2_cosh)(__m128d);
-__m128d G_ENTRY_PT(vrd2_exp)(__m128d);
-__m128d G_ENTRY_PT(vrd2_exp2)(__m128d);
-__m128d G_ENTRY_PT(vrd2_exp10)(__m128d);
-__m128d G_ENTRY_PT(vrd2_expm1)(__m128d);
-__m128d G_ENTRY_PT(vrd2_log)(__m128d);
-__m128d G_ENTRY_PT(vrd2_log2)(__m128d);
-__m128d G_ENTRY_PT(vrd2_log10)(__m128d);
-__m128d G_ENTRY_PT(vrd2_log1p)(__m128d);
-__m128d G_ENTRY_PT(vrd2_pow)(__m128d, __m128d);
-__m128d G_ENTRY_PT(vrd2_sin)(__m128d);
-__m128d G_ENTRY_PT(vrd2_tan)(__m128d);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_cbrt);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_cos);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_cosh);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_exp);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_exp2);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_exp10);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_expm1);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_log);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_log2);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_log10);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_log1p);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_pow);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_sin);
+alm_func_t        G_ENTRY_PT_PTR(vrd2_tan);
 
-__m256d G_ENTRY_PT(vrd4_cbrt)(__m256d);
-__m256d G_ENTRY_PT(vrd4_cos)(__m256d);
-__m256d G_ENTRY_PT(vrd4_exp)(__m256d);
-__m256d G_ENTRY_PT(vrd4_exp2)(__m256d);
-__m256d G_ENTRY_PT(vrd4_exp10)(__m256d);
-__m256d G_ENTRY_PT(vrd4_expm1)(__m256d);
-__m256d G_ENTRY_PT(vrd4_log)(__m256d);
-__m256d G_ENTRY_PT(vrd4_log2)(__m256d);
-__m256d G_ENTRY_PT(vrd4_log10)(__m256d);
-__m256d G_ENTRY_PT(vrd4_log1p)(__m256d);
-__m256d G_ENTRY_PT(vrd4_pow)(__m256d, __m256d);
-__m256d G_ENTRY_PT(vrd4_sin)(__m256d);
-__m256d G_ENTRY_PT(vrd4_tan)(__m256d);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_cbrt);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_cos);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_exp);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_exp2);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_exp10);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_expm1);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_log);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_log2);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_log10);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_log1p);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_pow);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_sin);
+alm_func_t        G_ENTRY_PT_PTR(vrd4_tan);
 
 
 #ifdef __cplusplus
@@ -258,96 +262,5 @@ __m256d G_ENTRY_PT(vrd4_tan)(__m256d);
 static void CONSTRUCTOR
 init_map_entry_points(void)
 {
-    /* First call __init_cpu_featues() via libm_cpu_get_features */
-
-    /* Call interfaces to initialize functions */
-
-    if (libm_cpu_feature_is_avx2_usable()) {
-
-        g_amd_libm_ep_cbrt       =	FN_PROTOTYPE_FMA3(cbrt);
-        g_amd_libm_ep_cbrtf      =	FN_PROTOTYPE_FMA3(cbrtf);
-        g_amd_libm_ep_sin        =	FN_PROTOTYPE_FMA3(sin);
-#ifndef _MSC_VER
-        g_amd_libm_ep_sincos     =	FN_PROTOTYPE_FMA3(sincos);
-        g_amd_libm_ep_sincosf    =	FN_PROTOTYPE_FMA3(sincosf);
-#endif
-        g_amd_libm_ep_sinf       =	FN_PROTOTYPE_FMA3(sinf);
-        g_amd_libm_ep_cos        =	FN_PROTOTYPE_FMA3(cos) ;
-        g_amd_libm_ep_cosf       =	FN_PROTOTYPE_FMA3(cosf);
-        g_amd_libm_ep_tan        =	FN_PROTOTYPE_FMA3(tan);
-        g_amd_libm_ep_tanf       =	FN_PROTOTYPE_FMA3(tanf);
-        g_amd_libm_ep_vrd2_cbrt  =	FN_PROTOTYPE_FMA3(vrd2_cbrt);
-        g_amd_libm_ep_vrs4_cbrtf =	FN_PROTOTYPE_FMA3(vrs4_cbrtf);
-        g_amd_libm_ep_vrd2_cos   =	FN_PROTOTYPE_FMA3(vrd2_cos);
-        g_amd_libm_ep_vrs4_cosf  =	FN_PROTOTYPE_FMA3(vrs4_cosf);
-        g_amd_libm_ep_vrd2_sin   =	FN_PROTOTYPE_FMA3(vrd2_sin);
-        g_amd_libm_ep_vrs4_sinf  =	FN_PROTOTYPE_FMA3(vrs4_sinf);
-        g_amd_libm_ep_vrd2_tan   =	FN_PROTOTYPE_FMA3(vrd2_tan);
-        g_amd_libm_ep_vrs4_tanf  =	FN_PROTOTYPE_FMA3(vrs4_tanf);
-        g_amd_libm_ep_vrd2_log   =	FN_PROTOTYPE_FMA3(vrd2_log);
-        g_amd_libm_ep_vrd2_log2  =	FN_PROTOTYPE_FMA3(vrd2_log2);
-        g_amd_libm_ep_vrd2_log10 =	FN_PROTOTYPE_FMA3(vrd2_log10);
-        g_amd_libm_ep_vrd2_log1p =	FN_PROTOTYPE_FMA3(vrd2_log1p);
-        g_amd_libm_ep_vrs4_logf  =	FN_PROTOTYPE_FMA3(vrs4_logf);
-        g_amd_libm_ep_vrs4_powf  = FN_PROTOTYPE_BAS64(vrs4_powf);
-        g_amd_libm_ep_vrs4_log2f =	FN_PROTOTYPE_FMA3(vrs4_log2f);
-        g_amd_libm_ep_vrs4_log10f=	FN_PROTOTYPE_FMA3(vrs4_log10f);
-        g_amd_libm_ep_vrs4_log1pf=	FN_PROTOTYPE_FMA3(vrs4_log1pf);
-        g_amd_libm_ep_logf       =	FN_PROTOTYPE_FMA3(logf);
-        g_amd_libm_ep_log2f      =	FN_PROTOTYPE_FMA3(log2f);
-        g_amd_libm_ep_log10f     =	FN_PROTOTYPE_FMA3(log10f);
-        g_amd_libm_ep_log1pf     =	FN_PROTOTYPE_FMA3(log1pf);
-        g_amd_libm_ep_log        =	FN_PROTOTYPE_FMA3(log);
-        g_amd_libm_ep_log2       =	FN_PROTOTYPE_FMA3(log2);
-        g_amd_libm_ep_log10      =	FN_PROTOTYPE_FMA3(log10);
-        g_amd_libm_ep_log1p      =	FN_PROTOTYPE_FMA3(log1p);
-        g_amd_libm_ep_exp        =	FN_PROTOTYPE_FMA3(exp);
-        g_amd_libm_ep_exp2       =	FN_PROTOTYPE_FMA3(exp2);
-        g_amd_libm_ep_exp10      =	FN_PROTOTYPE_FMA3(exp10);
-        g_amd_libm_ep_expm1      =	FN_PROTOTYPE_FMA3(expm1);
-        g_amd_libm_ep_expf       =	FN_PROTOTYPE_FMA3(expf);
-        g_amd_libm_ep_exp2f	 =	FN_PROTOTYPE_FMA3(exp2f);
-        g_amd_libm_ep_exp10f	 =	FN_PROTOTYPE_FMA3(exp10f);
-        g_amd_libm_ep_expm1f	 =	FN_PROTOTYPE_FMA3(expm1f);
-        g_amd_libm_ep_vrs4_expf  =	FN_PROTOTYPE_FMA3(vrs4_expf);
-        g_amd_libm_ep_vrs4_exp2f =	FN_PROTOTYPE_FMA3(vrs4_exp2f);
-        g_amd_libm_ep_vrs4_exp10f=	FN_PROTOTYPE_FMA3(vrs4_exp10f);
-        g_amd_libm_ep_vrs4_expm1f=	FN_PROTOTYPE_FMA3(vrs4_expm1f);
-        g_amd_libm_ep_vrd2_exp   =	FN_PROTOTYPE_FMA3(vrd2_exp);
-        g_amd_libm_ep_vrd2_exp2	 =	FN_PROTOTYPE_FMA3(vrd2_exp2);
-        g_amd_libm_ep_vrd2_exp10 =	FN_PROTOTYPE_FMA3(vrd2_exp10);
-        g_amd_libm_ep_vrd2_expm1 =	FN_PROTOTYPE_FMA3(vrd2_expm1);
-        g_amd_libm_ep_vrda_cbrt	 =	FN_PROTOTYPE_FMA3(vrda_cbrt);
-        g_amd_libm_ep_vrda_log	 =	FN_PROTOTYPE_FMA3(vrda_log);
-        g_amd_libm_ep_vrda_log10 =	FN_PROTOTYPE_FMA3(vrda_log10);
-        g_amd_libm_ep_vrda_log1p =	FN_PROTOTYPE_FMA3(vrda_log1p);
-        g_amd_libm_ep_vrda_log2	 =	FN_PROTOTYPE_FMA3(vrda_log2);
-        g_amd_libm_ep_vrda_sin	 =	FN_PROTOTYPE_FMA3(vrda_sin);
-        g_amd_libm_ep_vrda_cos	 =	FN_PROTOTYPE_FMA3(vrda_cos);
-
-
-        g_amd_libm_ep_vrsa_cbrtf =	FN_PROTOTYPE_FMA3(vrsa_cbrtf);
-        g_amd_libm_ep_vrsa_logf	 =	FN_PROTOTYPE_FMA3(vrsa_logf);
-        g_amd_libm_ep_vrsa_log10f=	FN_PROTOTYPE_FMA3(vrsa_log10f);
-        g_amd_libm_ep_vrsa_log1pf=	FN_PROTOTYPE_FMA3(vrsa_log1pf);
-        g_amd_libm_ep_vrsa_log2f =	FN_PROTOTYPE_FMA3(vrsa_log2f);
-        g_amd_libm_ep_vrsa_sinf	 =	FN_PROTOTYPE_FMA3(vrsa_sinf);
-        g_amd_libm_ep_vrsa_cosf	 =	FN_PROTOTYPE_FMA3(vrsa_cosf);
-
-        g_amd_libm_ep_vrda_exp   =	FN_PROTOTYPE_FMA3(vrda_exp);
-        g_amd_libm_ep_vrda_exp2	 =	FN_PROTOTYPE_FMA3(vrda_exp2);
-        g_amd_libm_ep_vrda_exp10 =	FN_PROTOTYPE_FMA3(vrda_exp10);
-        g_amd_libm_ep_vrda_expm1 =	FN_PROTOTYPE_FMA3(vrda_expm1);
-        g_amd_libm_ep_vrsa_expf  =	FN_PROTOTYPE_FMA3(vrsa_expf);
-        g_amd_libm_ep_vrsa_exp2f =	FN_PROTOTYPE_FMA3(vrsa_exp2f);
-        g_amd_libm_ep_vrsa_exp10f=	FN_PROTOTYPE_FMA3(vrsa_exp10f);
-        g_amd_libm_ep_vrsa_expm1f=	FN_PROTOTYPE_FMA3(vrsa_expm1f);
-        g_amd_libm_ep_fmaf       =	FN_PROTOTYPE_FMA3(fmaf);
-        g_amd_libm_ep_fma        =	FN_PROTOTYPE_FMA3(fma);
-        g_amd_libm_ep_pow        =	FN_PROTOTYPE_FMA3(pow);
-        g_amd_libm_ep_fastpow    = FN_PROTOTYPE_FMA3(fastpow);
-        g_amd_libm_ep_powf       =	FN_PROTOTYPE_FMA3(powf);
-    }
-
     libm_iface_init();
 }
diff --git a/src/entry_pt_map.c b/src/entry_pt_map.c
index ff11a67..b7f3caf 100644
--- a/src/entry_pt_map.c
+++ b/src/entry_pt_map.c
@@ -209,6 +209,8 @@ LIBM_DECL_FN_MAP(vrd4_expm1);
 LIBM_DECL_FN_MAP(vrd4_log);
 LIBM_DECL_FN_MAP(vrd4_pow);
 LIBM_DECL_FN_MAP(vrd4_sin);
+LIBM_DECL_FN_MAP(vrd4_cos);
+LIBM_DECL_FN_MAP(vrd4_tan);
 
 LIBM_DECL_FN_MAP(vrs4_cbrtf);
 LIBM_DECL_FN_MAP(vrs4_cosf);
@@ -223,6 +225,8 @@ LIBM_DECL_FN_MAP(vrs4_logf);
 LIBM_DECL_FN_MAP(vrs4_powf);
 LIBM_DECL_FN_MAP(vrs4_sinf);
 LIBM_DECL_FN_MAP(vrs4_tanf);
+LIBM_DECL_FN_MAP(vrs4_coshf);
+LIBM_DECL_FN_MAP(vrs4_tanhf);
 
 LIBM_DECL_FN_MAP(vrs8_logf);
 LIBM_DECL_FN_MAP(vrs8_expf);
@@ -230,6 +234,8 @@ LIBM_DECL_FN_MAP(vrs8_powf);
 LIBM_DECL_FN_MAP(vrs8_sinf);
 LIBM_DECL_FN_MAP(vrs8_tanf);
 LIBM_DECL_FN_MAP(vrs8_cosf);
+LIBM_DECL_FN_MAP(vrs8_coshf);
+LIBM_DECL_FN_MAP(vrs8_tanhf);
 
 LIBM_DECL_FN_MAP(vrda_cbrt);
 LIBM_DECL_FN_MAP(vrda_cos);
diff --git a/src/fast/SConscript b/src/fast/SConscript
index cb69dff..73c3af0 100644
--- a/src/fast/SConscript
+++ b/src/fast/SConscript
@@ -35,13 +35,11 @@ incpaths = [
 
 
 e.Append(
-    CCFLAGS = [
-        #'-Wall', '-W', '-Wstrict-prototypes', '-Werror',
-        #'-Wno-unused-but-set-parameter',
-        #'-Wno-unused-parameter', '-O3',
-        #'-fPIC',
-        '-mavx2', '-march=znver2'
-    ],
+    CCFLAGS = ['-Wall', '-W', '-Wstrict-prototypes', '-Werror',
+               #'-Wno-unused-but-set-parameter',
+               '-Wno-unused-parameter', '-O3',
+               '-fPIC',
+               '-mavx2', '-march=znver2'],
     CPPPATH = incpaths,
     # CCFLAGS = [],
     # LINKFLAGS = ['-T$LINKERSCRIPT'],
diff --git a/src/fast/powf.c b/src/fast/powf.c
new file mode 100644
index 0000000..5be101c
--- /dev/null
+++ b/src/fast/powf.c
@@ -0,0 +1,323 @@
+/*
+ * Copyright (C) 2019-2020, Advanced Micro Devices. All rights reserved.
+ */
+
+/*
+ * Description: Faster version of powf()
+ *
+ * Reference : Self contained exponentian -Clark, Cody
+ * powf(x, y) = x^y
+ *           = 2^(y*log2(x))
+ *           = 2^w where w = y*log2(x)
+ *
+ * Evaluate log2(x)
+ *          Required Values:
+ *							b = n/C where n = 0 to C
+ *							a = 2^(-b)
+ *
+ * Convert x to the form:
+ *							 x = 2^k*m  where m lies in [1/2,1)
+ *							   = 2^(k-b(p))*m/a(p)find the index p, p lies in [0,C]
+ *
+ *			log2(x) = (k-b(p))+log2(m/a(p))
+ *							=  s1 + s2s2 lies in [2^(-1/C), 2^(1/C)]
+ *											Where s1 is straight forward and
+ *														s2 is calculated by polynomial approximation
+ *
+ * The values of b, a and 1/a are saved in a Lookup Table
+ *
+ *			 w = y*log2(x)
+ *			      w = w1 + w2 , for extended precision
+ *			      where w1 = int(C*w)*1/C
+ *							    w2 = w-w1
+ *
+ * powf(x, y) = 2^w
+ *			      = 2^(w1+w2)
+ *						= 2^w1 * 2^w2				    % convert w1 and w2 into below shown
+ *						= 2^(l + j/C) * 2^w2
+ *						= 2^l * 2^(j/C) * 2^w2  % where w2 lies in (-1/C,0]
+ *
+ * In the above the first term 2^l is calculated using left shift operators the
+ * second term 2^(j/C) is calculated from look up table the third terms 2^w2 is
+ * calculated by a polynomial approximation
+ */
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+#include <libm_amd.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/amd_funcs_internal.h>
+
+#if 1
+#define EXPSHIFTBITS_SP32       23
+#define MANTBITS_SP32           0x007fffff
+#define HALFEXPBITS_SP32        0x3f000000
+#define SIGN_BIAS               0x80000000
+#endif
+
+const struct log2f_data {
+      struct {
+          double B, A, inv_a;
+      } tab[17];
+    double c;
+    double inv_c;
+    double log2_poly[4], pow2_poly[4];
+} __log2f_data = {
+    .c =  0x1p4,
+    .inv_c =  0x1p-4,
+    .tab = {
+        { 0 ,       0x1.0p0,               0x1.0p0 },
+        { 0x1.0p-4, 0x1.ea4afa2a490d98p-1, 0x1.0b5586cf9890f8p0 },
+        { 0x1.0p-3, 0x1.d5818dcfba487p-1,  0x1.172b83c7d517bp0 },
+        { 0x1.8p-3, 0x1.c199bdd85529cp-1,  0x1.2387a6e7562388p0 },
+        { 0x1.0p-2, 0x1.ae89f995ad3ad8p-1, 0x1.306fe0a31b715p0 },
+        { 0x1.4p-2, 0x1.9c49182a3f09p-1,   0x1.3dea64c123422p0 },
+        { 0x1.8p-2, 0x1.8ace5422aa0db8p-1, 0x1.4bfdad5362a27p0 },
+        { 0x1.cp-2, 0x1.7a11473eb0187p-1,  0x1.5ab07dd4854298p0 },
+        { 0x1.0p-1, 0x1.6a09e667f3bcc8p-1, 0x1.6a09e667f3bcc8p0 },
+        { 0x1.2p-1, 0x1.5ab07dd4854298p-1, 0x1.7a11473eb0187p0 },
+        { 0x1.4p-1, 0x1.4bfdad5362a27p-1,  0x1.8ace5422aa0db8p0 },
+        { 0x1.6p-1, 0x1.3dea64c123422p-1,  0x1.9c49182a3f09p0 },
+        { 0x1.8p-1, 0x1.306fe0a31b715p-1,  0x1.ae89f995ad3ad8p0 },
+        { 0x1.ap-1, 0x1.2387a6e7562388p-1, 0x1.c199bdd85529cp0 },
+        { 0x1.cp-1, 0x1.172b83c7d517bp-1,  0x1.d5818dcfba487p0 },
+        { 0x1.ep-1, 0x1.0b5586cf9890f8p-1, 0x1.ea4afa2a490d98p0 },
+        { 0x1.0p0 , 0x1.0p-1,              0x1.0p1 },
+    },
+
+    .log2_poly = {
+        0x1.71547432c09b9p0,
+        -0x1.715490933e352p-1,
+        0x1.ecfe48bedff7p-2,
+        -0x1.70c69f47da9a1p-2,
+    },
+
+    .pow2_poly = {
+        0x1.62e42fee489cep-1,
+        0x1.ebfbd52835d5ep-3,
+        0x1.c6a30bc837418p-5,
+        0x1.35c122ef66d3ap-7,
+    },
+};
+
+#define C       __log2f_data.c
+#define INVC    __log2f_data.inv_c
+#define T       __log2f_data.tab
+#define L       __log2f_data.log2_poly
+#define S       __log2f_data.pow2_poly
+
+#include <libm_macros.h>
+#include <libm_util_amd.h>
+#include <libm/compiler.h>
+
+#ifndef ARRAY_SIZE
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof(x[0]))
+#endif
+
+/*
+ * Get the index of mantissa in A using binary search
+ */
+static inline int
+binarysearch(double_t m)
+{
+    int lo= 0, hi = ARRAY_SIZE(T) - 1, middle, p;
+
+    while (lo < hi) {
+        middle = (hi - lo) >> 2;
+        if (T[middle].A > m)
+            lo = middle;
+        else
+            hi = middle;
+    }
+
+    if (T[lo].A * (T[lo].A-m) < T[lo].A * (m-T[lo].A))
+        p = lo;
+    else
+        p = lo;
+
+    return p;
+}
+
+#define ABSOLUTE_VALUE   0x7FFFFFFFFFFFFFFF /*  */
+
+static inline uint32_t checkint(uint64_t u)
+{
+    int32_t u_exp = ((u & ABSOLUTE_VALUE) >> EXPSHIFTBITS_DP64);
+    /*
+     * See whether u is an integer.
+     * status = 0 - not an integer.
+     * status = 1 - odd
+     * status = 2 - even
+     */
+    if (u_exp < 0x3ff)  return 0;
+
+    if (u_exp > 0x3ff + EXPSHIFTBITS_DP64)
+        return 2;
+
+    if (u & ((1ULL << (0x3ff + EXPSHIFTBITS_DP64 - u_exp)) - 1))
+        return 0;
+
+    if (u & (1ULL << (0x3ff + EXPSHIFTBITS_DP64 - u_exp)))
+        return 1; /*  odd integer */
+
+    return 2;
+}
+
+static inline int issignaling(double x)
+{
+    uint64_t ix;
+    ix = asuint64(x);
+    return 2 * (ix ^ QNAN_MASK_64) > 2 * QNANBITPATT_DP64;
+
+}
+
+/*
+ * Check if input is the bit representation of 0, infinity or nan.
+ */
+static inline int checkzeroinfnan(uint64_t i)
+{
+    return 2 * i - 1 >= 2 * EXPBITS_DP64 - 1;
+}
+
+#define ALM_POW_ARG_MAX   PINFBITPATT_SP32
+#define ALM_POW_ARG_MIN   0x3F8800000
+
+float
+ALM_PROTO_FAST(powf)(float x, float y)
+{
+    double_t k, m, s1, s2;
+    uint32_t ux, uy, mant;
+    int p, sign_bias = 1;
+    double s22, A1, A2, A3, log2x;
+    double w, w1, w2, w22, poly, z, P, scale, result;
+    unsigned int pdash;
+    int iw1, i, mdash;
+
+    ux = asuint32(x);
+    uy = asuint32(y);
+
+    if (unlikely (ux - ALM_POW_ARG_MIN >=
+                  ALM_POW_ARG_MAX - ALM_POW_ARG_MIN ||
+                  checkzeroinfnan(uy))) {
+
+        /*
+         * All x less than infinity, NaN and y = zero, infinity or NAN caught
+         * here x < 0x1p-126 or inf or nan. Either (x < 0x1p-126 or inf or nan)
+         * or (y is 0 or inf or nan).
+         *
+         */
+        if (unlikely (checkzeroinfnan(uy))) {
+            if (2 * uy == 0)
+                return issignaling(x) ? x + y : 1.0f;
+
+            if (ux == ONEEXPBITS_SP32)
+                return issignaling(y) ? x + y : 1.0f;
+
+            if (2 * ux > 2u * 0x7f800000 || 2 * uy > 2u * 0x7f800000)
+                return x + y;
+
+            if (2 * ux == TWOEXPBITS_SP32)
+                return 1.0f;
+
+            /*  |x|<1 && y==inf or |x|>1 && y==-inf.  */
+            if ((2 * ux < TWOEXPBITS_SP32) == !(uy & 0x80000000))
+                return 0.0f;
+
+            return y * y;
+        }
+
+        if (unlikely (checkzeroinfnan(ux))) {
+            float x2 = x * x;
+
+            /*  x is -0 and y is odd */
+            if (ux & 0x80000000 && checkint(uy) == 1) {
+                x2 = -x2;
+                sign_bias = SIGN_BIAS;
+            }
+
+            if (2 * ux == 0 && uy & 0x80000000) {
+                x = 1.0 / 0.0;
+                return asfloat((sign_bias >> 23) | ux);
+            }
+
+            /*  if y is negative, return 1/x else return x */
+            return (uy & 0x80000000 ? (1 / x2) : x2);
+        }
+
+        /*  x and y are non-zero finite  */
+        if (ux & 0x80000000) {
+            /*  x is negative */
+            /*  Finite x < 0 */
+            int yint = checkint (uy);
+            if (yint == 0)      return sqrt(x);
+            if (yint == 1)      sign_bias = -1;
+
+            ux &= 0x7fffffff; /*  x is negative, y is integer */
+            x = asfloat(ux);
+
+            return x * y;
+        }
+
+    }
+
+    /* Get the exponent */
+    k = (double)(ux >> EXPSHIFTBITS_SP32) - EMAX_SP32;
+
+    /* Get mantissa, m is in [1/2 1) */
+    mant = ux & MANTBITS_SP32;
+    m = asfloat (mant |= HALFEXPBITS_SP32);
+
+    /* Get the index of m in A */
+    p = binarysearch(m);
+    s1 = k - T[p].B;
+    s2 = (m * T[p].inv_a) - 1.0;        /* s2 is in [2^(-1/C), 2^(1/C)] */
+
+    /* Evaluate polynomial for s2 */
+    s22 = s2*s2;
+    A1 = L[0] + L[1] * s2;
+    A2 = L[2] + L[3] * s2;
+    A3 = A1 + s22 * A2;
+
+    log2x = s1 + s2 * A3;
+
+    w = y * log2x;
+
+    /* Split w into two parts i.e. w = w1+w2 */
+    w1 =  trunc(C * w) * INVC;
+    w2 = w - w1;
+    iw1 = trunc(C * w1);
+
+    /* Set value of i based on iw1 */
+    i = (iw1 < 0) ? 0 : 1;
+
+    /* Check is w2 < 0 if not make it */
+    if (w2 > 0) {
+        w1 = w1 + INVC;
+        w2 = w2 - INVC;   /* w2 lies in (-1/C,0] */
+        iw1 = iw1 + 1;
+    }
+
+    mdash = trunc(w1) + i;
+    pdash = C * mdash - iw1;
+
+    /* Find 2^w2 using polynomial evaluation */
+    w22 = w2*w2;
+    A1 = S[0] + S[1] * w2;
+    A2 = S[2] + S[3] * w2;
+    A3 = A1 + w22 * A2;
+    poly = w2 * A3;
+    z = T[pdash].A + T[pdash].A * poly;
+
+    P = (mdash + 127) << 23;
+    scale = asfloat(P);
+    result = scale * z;
+
+    return sign_bias * result;
+}
+
+strong_alias (__powf_finite, ALM_PROTO_FAST(powf))
+weak_alias (amd_powf, ALM_PROTO_FAST(powf))
+weak_alias (powf, ALM_PROTO_FAST(powf))
diff --git a/src/fast/tan.c b/src/fast/tan.c
new file mode 100644
index 0000000..15bd09f
--- /dev/null
+++ b/src/fast/tan.c
@@ -0,0 +1,210 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+
+#include <stdint.h>
+
+#include <libm_macros.h>
+#include <libm_util_amd.h>
+#include <libm_special.h>
+
+#include <libm/amd_funcs_internal.h>
+
+#include <libm/types.h>
+#include <libm/constants.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   double tan(double x)
+ *
+ * Spec:
+ *   tan(n· 2π + π/4)  = 1       if n∈Z and |n· 2π + π/4|   <= big_angle_F
+ *   tan(n· 2π + 3π/4) = −1      if n∈Z and |n· 2π + 3π/4|  <= big angle rF
+ *   tan(x) = x                  if x ∈ F^(2·π) and tan(x) != tan(x)
+ *                                               and |x| < sqrt(epsilonF/rF)
+ *   tan(−x) = −tan(x)          if x ∈ F^(2·π)
+ */
+
+static struct {
+    double invhalfpi, huge;
+    double halfpi1, halfpi2, halfpi3;
+    double poly[14];
+} tan_data = {
+    .huge      = 0x1.8000000000000p52,
+    //.halfpi   = 0x1.921fb54442d18p0,
+    .invhalfpi = 0x1.45f306dc9c882a53f85p-1,
+    .halfpi1   = 0x1.921fb54442d18p0,
+    .halfpi2   = 0x1.1a62633145c07p-54,
+    .halfpi3   = -0x1.f1976b7ed8fbcp-110,
+
+    /*
+     * Polynomial coefficients obtained using
+     * fpminimax algorithm from Sollya
+     */
+    .poly = {
+        0x1.55555555554bep-2,
+        0x1.1111111119f2ap-3,
+        0x1.ba1ba1b38733cp-5,
+        0x1.664f49c8b63e3p-6,
+        0x1.226e0f7f17778p-7,
+        0x1.d6d989f491431p-9,
+        0x1.7d57d7c375c03p-10,
+        0x1.38148605a1756p-11,
+        0x1.d15fa298b8b17p-13,
+        0x1.20250b03ea768p-13,
+        -0x1.cd6072c36a433p-16,
+        0x1.7b1cbff8d88e6p-14,
+        -0x1.7c588d6a4c96ep-15,
+        0x1.5fc28759e55bap-16,
+    },
+
+};
+
+#define ALM_TAN_HUGE_VAL        tan_data.huge
+//#define ALM_TAN_HALFPI          tan_data.halfpi
+#define ALM_TAN_HALFPI1         tan_data.halfpi1
+#define ALM_TAN_HALFPI2         tan_data.halfpi2
+#define ALM_TAN_HALFPI3         tan_data.halfpi3
+#define ALM_TAN_INVHALFPI       tan_data.invhalfpi
+
+#define C1  tan_data.poly[0]
+#define C3  tan_data.poly[1]
+#define C5  tan_data.poly[2]
+#define C7  tan_data.poly[3]
+#define C9  tan_data.poly[4]
+#define C11 tan_data.poly[5]
+#define C13 tan_data.poly[6]
+#define C15 tan_data.poly[7]
+#define C17 tan_data.poly[8]
+#define C19 tan_data.poly[9]
+#define C21 tan_data.poly[10]
+#define C23 tan_data.poly[11]
+#define C25 tan_data.poly[12]
+#define C27 tan_data.poly[13]
+
+#define ALM_TAN_SIGN_MASK     (1UL<<63)
+#define ALM_TAN_ARG_MIN       (0x1p-1022)
+#define ALM_TAN_ARG_MAX       (0x1p+1023)
+
+/*
+ * Implementation Notes:
+ *
+ * float tanf(float x)
+ *      A given x is reduced into the form:
+ *
+ *               |x| = (N * π/2) + F
+ *
+ *      Where N is an integer obtained using:
+ *              N = round(x * 2/π)
+ *      And F is a fraction part lying in the interval
+ *              [-π/4, +π/4];
+ *
+ *      obtained as F = |x| - (N * π/2)
+ *
+ *      Thus tan(x) is given by
+ *
+ *              tan(x) = tan((N * π/2) + F) = tan(F)
+ *              when N is odd,
+ *                     = -cot(F) = -1/tan(F)
+ *              when N is even, tan(F) is approximated using a polynomial
+ *                      obtained from Remez approximation from Sollya.
+ *
+ */
+double
+ALM_PROTO_FAST(tan)(double x)
+{
+    double   dx, F, poly, result = 0.0;
+    uint64_t n, sign;
+    uint64_t ux = asuint64(x);
+
+    if (unlikely ((ux - asuint64(ALM_TAN_ARG_MIN)) >
+                  (asuint64(ALM_TAN_ARG_MAX) - asuint64(ALM_TAN_ARG_MIN)))) {
+
+        if ((ux & ~ALM_TAN_SIGN_MASK) >= PINFBITPATT_DP64) {
+            /* inf or NaN */
+            return _tan_special(x);
+        }
+    }
+
+    if (ux == 0)
+        return 0.0;
+
+    sign = ux & ALM_TAN_SIGN_MASK;
+
+    dx = asdouble(ux & ~ALM_TAN_SIGN_MASK);
+
+    /*
+     * dn = x * (2/π)
+     * would turn to fma
+     */
+    double dn =  dx * ALM_TAN_INVHALFPI + ALM_TAN_HUGE_VAL;
+
+    /* n = (int)dn */
+    n   = asuint64(dn);
+
+    dn -= ALM_TAN_HUGE_VAL;
+
+    /*
+     * Get the fraction part
+     *   F = xd - (n * π/2)
+     */
+    F = dx - dn * ALM_TAN_HALFPI1; // F = x - n*pi1/2
+    F = F - dn * ALM_TAN_HALFPI2;  // F = F - n*pi2/2
+    F = F - dn * ALM_TAN_HALFPI3;  // F = F - n*pi3/2
+
+    uint64_t odd = (n << 63);
+
+    /*
+     * Calculate the polynomial approximation
+     *  poly = x + C1*x^3 + C2*x^5 + C3*x^7 + C4*x^9 + C5*x^11 + \
+     *          C6*x^13 + C7*x^15 + C8*x^17 + C9*x^19 + \
+     *          C10*x^21 + C11*x^23 + C12*x^25 + C13*x^27 + C14*x^29;
+     *
+     *       = x + x * G*(C6 + G*(C7 + G*(C8 +
+     *                  G*(C9 + G*(C10+ G*(C11 + G*(C12 +
+     *                          G*(C13 + C14*G))))
+     *                  ))))
+     *
+     * Polynomial is approximated as x+x*P(G)  where G = x^2
+     */
+
+    poly = POLY_EVAL_ODD_29(F, C1, C3, C5, C7, C9,
+                            C11, C13, C15, C17, C19,
+                            C21, C23, C25, C27);
+
+    result = asdouble(asuint64(poly) ^ sign);
+
+    if (odd)
+        result = -1.0/result;
+
+    return result;
+}
diff --git a/src/iface.c b/src/iface.c
index 6f1462f..2b3411f 100644
--- a/src/iface.c
+++ b/src/iface.c
@@ -27,9 +27,11 @@
 
 #include <stddef.h>                     /* for NULL */
 
+#include <libm/cpu_features.h>
 #include <libm/entry_pt.h>
 #include <libm/iface.h>
 
+
 struct entry_pt_interface entry_pt_initializers[C_AMD_LAST_ENTRY] = {
     [C_AMD_ACOS]       = {LIBM_IFACE_PROTO(acos), NULL},
     [C_AMD_ACOSH]      = {LIBM_IFACE_PROTO(acosh), NULL},
@@ -112,3 +114,79 @@ libm_iface_init(void)
     }
 }
 
+
+static alm_func_t
+alm_iface_fixup_one(const struct alm_arch_funcs *alm_funcs,
+                    alm_uarch_ver_t arch_ver, int idx)
+{
+    alm_func_t ret = (alm_func_t)NULL;
+
+    if (!alm_funcs)
+        return  ret;
+
+    /* if invalid arg, fixup with defaults */
+    if (ALM_UARCH_MAX - arch_ver >=
+        ALM_UARCH_MAX - ALM_UARCH_VER_DEFAULT)
+        arch_ver = alm_funcs->def_arch;
+
+    /* if corrupted arch_version */
+    if (ALM_UARCH_MAX - arch_ver >=
+        ALM_UARCH_MAX - ALM_UARCH_VER_DEFAULT)
+        arch_ver = ALM_UARCH_VER_DEFAULT;
+
+    for (int i = arch_ver; i >=0 ; i--) {
+        /* Keep searching till we find default version */
+        if (alm_funcs->funcs[i][idx]) {
+            ret = alm_funcs->funcs[i][idx];
+            break;
+        }
+    }
+
+    /* or NULL */
+    return ret;
+}
+
+void
+alm_iface_fixup(alm_ep_wrapper_t *g_ep_wrapper,
+                const struct alm_arch_funcs *alm_funcs)
+{
+    static struct alm_cpu_features *features = NULL;
+
+    if (!alm_funcs)
+        return;
+
+    if (!features) {
+        features = alm_cpu_get_features();
+    }
+
+    struct alm_cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
+
+    alm_uarch_ver_t arch_ver = ALM_UARCH_VER_DEFAULT;
+
+    if (mfg_info->mfg_type == ALM_CPU_MFG_AMD) {
+        switch(mfg_info->family) {
+        case ALM_CPU_FAMILY_NAPLES:			/* Naples */
+            arch_ver = ALM_UARCH_VER_ZEN;
+            break;
+        case ALM_CPU_FAMILY_ROME:				/* Rome */
+            arch_ver = ALM_UARCH_VER_ZEN2;
+            break;
+        case ALM_CPU_FAMILY_MILAN:			/* Milan */
+            arch_ver = ALM_UARCH_VER_ZEN3;
+            break;
+        default:
+            break;
+        }
+    }
+
+    for (int i = ((int)ALM_FUNC_VAR_MAX-1); i >=0 ; i--) {
+        alm_ep_func_t *gptr = g_ep_wrapper->g_ep[i];
+
+        if (gptr) {
+            /* Overwrite only if find valid function */
+            alm_ep_func_t f = alm_iface_fixup_one(alm_funcs, arch_ver, i);
+            if (f)
+                *gptr = f;
+        }
+    }
+}
diff --git a/src/iface/acos.c b/src/iface/acos.c
index 86297c2..53d7b83 100644
--- a/src/iface/acos.c
+++ b/src/iface/acos.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_acos = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(acosf),
+            &FN_PROTOTYPE_REF(acos),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(acos)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(acos) = &FN_PROTOTYPE_REF(acos);
-
-	/* Single */
-	G_ENTRY_PT_PTR(acosf) = &FN_PROTOTYPE_REF(acosf);
+    alm_ep_wrapper_t g_entry_acos = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(acosf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(acos),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_acosf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_acosf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_acos),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_acos),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_acos, &__arch_funcs_acos);
 }
 
diff --git a/src/iface/acosh.c b/src/iface/acosh.c
index 1707b6e..8fde9eb 100644
--- a/src/iface/acosh.c
+++ b/src/iface/acosh.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_acosh = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(acoshf),
+            &FN_PROTOTYPE_REF(acosh),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(acosh)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(acosh) = &FN_PROTOTYPE_REF(acosh);
-
-	/* Single */
-	G_ENTRY_PT_PTR(acoshf) = &FN_PROTOTYPE_REF(acoshf);
+    alm_ep_wrapper_t g_entry_acosh = {
+        .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(acoshf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(acosh),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_acoshf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_acoshf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_acosh),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_acosh),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_acosh, &__arch_funcs_acosh);
 }
 
diff --git a/src/iface/asin.c b/src/iface/asin.c
index e080096..7aa874e 100644
--- a/src/iface/asin.c
+++ b/src/iface/asin.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_asin = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(asinf),
+            &FN_PROTOTYPE_REF(asin),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(asin)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(asin) = &FN_PROTOTYPE_REF(asin);
-
-	/* Single */
-	G_ENTRY_PT_PTR(asinf) = &FN_PROTOTYPE_REF(asinf);
+    alm_ep_wrapper_t g_entry_asin = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(asinf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(asin),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_asinf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_asinf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_asin),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_asin),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_asin, &__arch_funcs_asin);
 }
 
diff --git a/src/iface/asinh.c b/src/iface/asinh.c
index bd0803a..5bad73f 100644
--- a/src/iface/asinh.c
+++ b/src/iface/asinh.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_asinh = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(asinhf),
+            &FN_PROTOTYPE_REF(asinh),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(asinh)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(asinh) = &FN_PROTOTYPE_REF(asinh);
-
-	/* Single */
-	G_ENTRY_PT_PTR(asinhf) = &FN_PROTOTYPE_REF(asinhf);
+    alm_ep_wrapper_t g_entry_asinh = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(asinhf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(asinh),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_asinhf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_asinhf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_asinh),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_asinh),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_asinh, &__arch_funcs_asinh);
 }
 
diff --git a/src/iface/atan.c b/src/iface/atan.c
index 8bdd521..8629977 100644
--- a/src/iface/atan.c
+++ b/src/iface/atan.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_atan = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(atanf),
+            &FN_PROTOTYPE_REF(atan),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(atan)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(atan) = &FN_PROTOTYPE_REF(atan);
-
-	/* Single */
-	G_ENTRY_PT_PTR(atanf) = &FN_PROTOTYPE_REF(atanf);
+    alm_ep_wrapper_t g_entry_atan = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(atanf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(atan),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_atanf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_atanf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_atan),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_atan),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_atan, &__arch_funcs_atan);
 }
 
diff --git a/src/iface/atan2.c b/src/iface/atan2.c
index 08142a7..2d2ce9b 100644
--- a/src/iface/atan2.c
+++ b/src/iface/atan2.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_atan2 = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(atan2f),
+            &FN_PROTOTYPE_REF(atan2),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(atan2)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(atan2) = &FN_PROTOTYPE_REF(atan2);
-
-	/* Single */
-	G_ENTRY_PT_PTR(atan2f) = &FN_PROTOTYPE_REF(atan2f);
+    alm_ep_wrapper_t g_entry_atan2 = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(atan2f),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(atan2),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_atan2f),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_atan2f),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_atan2),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_atan2),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_atan2, &__arch_funcs_atan2);
 }
 
diff --git a/src/iface/atanh.c b/src/iface/atanh.c
index 8fb3973..b6c02b5 100644
--- a/src/iface/atanh.c
+++ b/src/iface/atanh.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_atanh = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(atanhf),
+            &FN_PROTOTYPE_REF(atanh),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(atanh)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(atanh) = &FN_PROTOTYPE_REF(atanh);
-
-	/* Single */
-	G_ENTRY_PT_PTR(atanhf) = &FN_PROTOTYPE_REF(atanhf);
+    alm_ep_wrapper_t g_entry_atanh = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(atanhf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(atanh),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_atanhf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_atanhf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_atanh),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_atanh),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_atanh, &__arch_funcs_atanh);
 }
 
diff --git a/src/iface/cbrt.c b/src/iface/cbrt.c
index 8812fbe..f98fde2 100644
--- a/src/iface/cbrt.c
+++ b/src/iface/cbrt.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_cbrt = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(cbrtf),
+            &FN_PROTOTYPE_FMA3(cbrt),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(cbrt)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(cbrt) = &FN_PROTOTYPE_FMA3(cbrt);
-
-	/* Single */
-	G_ENTRY_PT_PTR(cbrtf) = &FN_PROTOTYPE_FMA3(cbrtf);
+    alm_ep_wrapper_t g_entry_cbrt = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(cbrtf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(cbrt),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_cbrtf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_cbrtf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_cbrt),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_cbrt),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_cbrt, &__arch_funcs_cbrt);
 }
 
diff --git a/src/iface/ceil.c b/src/iface/ceil.c
index 18a0466..608d9a4 100644
--- a/src/iface/ceil.c
+++ b/src/iface/ceil.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_ceil = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(ceilf),
+            &FN_PROTOTYPE_REF(ceil),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(ceil)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(ceil) = &FN_PROTOTYPE_REF(ceil);
-
-	/* Single */
-	G_ENTRY_PT_PTR(ceilf) = &FN_PROTOTYPE_REF(ceilf);
+    alm_ep_wrapper_t g_entry_ceil = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(ceilf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(ceil),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_ceilf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_ceilf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_ceil),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_ceil),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_ceil, &__arch_funcs_ceil);
 }
 
diff --git a/src/iface/copysign.c b/src/iface/copysign.c
index e6cb4af..a60e52e 100644
--- a/src/iface/copysign.c
+++ b/src/iface/copysign.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_copysign = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(copysignf),
+            &FN_PROTOTYPE_BAS64(copysign),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(copysign)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(copysign) = &FN_PROTOTYPE_BAS64(copysign);
-
-	/* Single */
-	G_ENTRY_PT_PTR(copysignf) = &FN_PROTOTYPE_BAS64(copysignf);
+    alm_ep_wrapper_t g_entry_copysign = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(copysignf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(copysign),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_copysignf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_copysignf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_copysign),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_copysign),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_copysign, &__arch_funcs_copysign);
 }
 
diff --git a/src/iface/cos.c b/src/iface/cos.c
index 4b59d56..fa0ae05 100644
--- a/src/iface/cos.c
+++ b/src/iface/cos.c
@@ -26,88 +26,61 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
 #include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_cos = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(cos),
+            &FN_PROTOTYPE_FMA3(cosf),
+            &FN_PROTOTYPE_FMA3(vrs4_cosf),
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(vrd2_cos),
+            NULL,                           /* vrd4 ? */
+        },
+
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(cosf),
+            &ALM_PROTO_ARCH_ZN2(cos),
+            &ALM_PROTO_ARCH_ZN2(vrs4_cosf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_cosf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_cos),
+            &ALM_PROTO_ARCH_ZN2(vrd4_cos),
+        },
 
-typedef double (*amd_cos_t)(double);
-typedef float  (*amd_cosf_t)(float);
-typedef __m128d (*amd_cos_v2d_t)(__m128d);
-typedef __m128  (*amd_cos_v4s_t)(__m128);
-typedef __m256  (*amd_cos_v8s_t)(__m256);
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(cosf),
+            &ALM_PROTO_ARCH_ZN3(cos),
+            &ALM_PROTO_ARCH_ZN3(vrs4_cosf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_cosf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_cos),
+            &ALM_PROTO_ARCH_ZN3(vrd4_cos),
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(cos)(void *arg)
 {
-    amd_cos_t  fn_d = NULL;
-    amd_cosf_t fn_s = NULL;
-    amd_cos_v4s_t fn_v4s = NULL;
-    amd_cos_v2d_t fn_v2d = NULL;
-    amd_cos_v8s_t fn_v8s = NULL;
-
-    static struct cpu_features *features = NULL;
-
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
-
-    struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
-
-    fn_d = &FN_PROTOTYPE_FMA3(cos);
-    fn_s = &FN_PROTOTYPE_FMA3(cosf);
-    fn_v4s = &FN_PROTOTYPE_FMA3(vrs4_cosf);
-    fn_v2d = &FN_PROTOTYPE_FMA3(vrd2_cos);
-
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-        //fn_d = &FN_PROTOTYPE_OPT(cos);
-        fn_s = &FN_PROTOTYPE_OPT(cosf);
-        fn_v4s = &FN_PROTOTYPE_OPT(vrs4_cosf);
-        fn_v8s = &FN_PROTOTYPE_OPT(vrs8_cosf);
-    } else if (CPU_HAS_SSSE3(features) &&
-               CPU_FEATURE_SSSE3_USABLE(features)) {
-        fn_d = &FN_PROTOTYPE_BAS64(cos);
-    } else if (CPU_HAS_AVX(features) &&
-               CPU_FEATURE_AVX_USABLE(features)) {
-        fn_d = &FN_PROTOTYPE_BAS64(exp);
-    }
-
-    /*
-     * Template:
-     *     override with any micro-architecture-specific
-     *     implementations
-     */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
-        switch(mfg_info->family) {
-            case 0x15:                      /* Naples */
-                        break;
-            case 0x17:                      /* Rome */
-                        fn_s = &ALM_PROTO_ARCH_ZN2(cosf);
-                        fn_v4s = &ALM_PROTO_ARCH_ZN2(vrs4_cosf);
-                        fn_v8s = &ALM_PROTO_ARCH_ZN2(vrs8_cosf);
-                        break;
-            case 0x19:                      /* Milan */
-                        fn_s = &ALM_PROTO_ARCH_ZN2(cosf);
-                        fn_v4s = &ALM_PROTO_ARCH_ZN2(vrs4_cosf);
-                        fn_v8s = &ALM_PROTO_ARCH_ZN2(vrs8_cosf);
-                        break;
-        }
-    }
-
-    /* Double */
-    G_ENTRY_PT_PTR(cos) = fn_d;
-
-    /* Single */
-    G_ENTRY_PT_PTR(cosf) = fn_s;
-
-    /* Vector Double */
-    G_ENTRY_PT_PTR(vrd2_cos) = fn_v2d;
+    alm_ep_wrapper_t g_entry_cos = {
+        .g_ep = {
+            [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(cosf),
+            [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(cos),
+            [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_cosf),
+            [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_cosf),
+            [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_cos),
+            [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_cos),
+        },
+    };
 
-    /* Vector Single */
-    G_ENTRY_PT_PTR(vrs4_cosf) = fn_v4s;
-    G_ENTRY_PT_PTR(vrs8_cosf) = fn_v8s;
+    alm_iface_fixup(&g_entry_cos, &__arch_funcs_cos);
 }
 
diff --git a/src/iface/cosh.c b/src/iface/cosh.c
index 9a53fd1..a2a1dab 100644
--- a/src/iface/cosh.c
+++ b/src/iface/cosh.c
@@ -26,22 +26,61 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_cosh = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(coshf),
+            &FN_PROTOTYPE_REF(cosh),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_REF(vrd2_cosh),
+            NULL,                           /* vrd4 ? */
+        },
+
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(coshf),
+            NULL, //&ALM_PROTO_ARCH_ZN2(cosh),
+            &ALM_PROTO_ARCH_ZN2(vrs4_coshf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_coshf),
+            NULL, //&ALM_PROTO_ARCH_ZN2(vrd2_cosh),
+            NULL, //&ALM_PROTO_ARCH_ZN2(vrd4_cosh),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(coshf),
+            NULL, //&ALM_PROTO_ARCH_ZN3(cosh),
+            &ALM_PROTO_ARCH_ZN3(vrs4_coshf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_coshf),
+            NULL, //&ALM_PROTO_ARCH_ZN3(vrd2_cosh),
+            NULL, //&ALM_PROTO_ARCH_ZN3(vrd4_cosh),
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(cosh)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(cosh) = &FN_PROTOTYPE_REF(cosh);
-
-	/* Single */
-	G_ENTRY_PT_PTR(coshf) = &FN_PROTOTYPE_REF(coshf);
+    alm_ep_wrapper_t g_entry_cosh = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(coshf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(cosh),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_coshf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_coshf),
+        //[ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_cosh),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_cosh),
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_cosh, &__arch_funcs_cosh);
 }
 
diff --git a/src/iface/cospi.c b/src/iface/cospi.c
index cbb5f8b..f181a7d 100644
--- a/src/iface/cospi.c
+++ b/src/iface/cospi.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_cospi = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(cospif),
+            &FN_PROTOTYPE_REF(cospi),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(cospi)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(cospi) = &FN_PROTOTYPE_REF(cospi);
-
-	/* Single */
-	G_ENTRY_PT_PTR(cospif) = &FN_PROTOTYPE_REF(cospif);
+    alm_ep_wrapper_t g_entry_cospi = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(cospif),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(cospi),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_cospif),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_cospif),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_cospi),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_cospi),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_cospi, &__arch_funcs_cospi);
 }
 
diff --git a/src/iface/exp.c b/src/iface/exp.c
index 965879d..9d87ad3 100644
--- a/src/iface/exp.c
+++ b/src/iface/exp.c
@@ -29,81 +29,58 @@
 #include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
 #include <libm/entry_pt.h>
-#include <libm/cpu_features.h>
 
-typedef double (*amd_exp_t)(double);
-typedef float (*amd_expf_t)(float);
-typedef __m128d (*amd_exp_v2d_t)(__m128d);
-typedef __m256d (*amd_exp_v4d_t)(__m256d);
-typedef __m128  (*amd_exp_v4s_t)(__m128);
-typedef __m256  (*amd_exp_v8s_t)(__m256);
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
-void
-LIBM_IFACE_PROTO(exp)(void *arg)
-{
-    /*
-     * Should setup all variants,
-     * single, double, and vectors (also complex if available)
-     */
-    amd_exp_t  fn_d = NULL;
-    amd_expf_t fn_s = NULL;
-    amd_exp_v4d_t fn_v4d = NULL;
-    amd_exp_v4s_t fn_v4s = NULL;
-    amd_exp_v8s_t fn_v8s = NULL;
-    amd_exp_v2d_t fn_v2d = NULL;
-
-    static struct cpu_features *features = NULL;
-
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
+static const
+struct alm_arch_funcs __arch_funcs_exp = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(expf),
+            &FN_PROTOTYPE_FMA3(exp),
+            &FN_PROTOTYPE_FMA3(vrs4_expf),
+            NULL,                             /* vrs8 ? */ 
+            &FN_PROTOTYPE_FMA3(vrd2_exp),
+            NULL,                             /* vrd4 ? */
+        },
 
-    struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(expf),
+            &ALM_PROTO_ARCH_ZN2(exp),
+            &ALM_PROTO_ARCH_ZN2(vrs4_expf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_expf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_exp),
+            &ALM_PROTO_ARCH_ZN2(vrd4_exp),
+        },
 
-    fn_d = &FN_PROTOTYPE_FMA3(exp);
-    fn_s = &FN_PROTOTYPE_FMA3(expf);
-    fn_v4d = &FN_PROTOTYPE_FMA3(vrd4_exp);
-    fn_v4s = &FN_PROTOTYPE_FMA3(vrs4_expf);
-    fn_v8s = &FN_PROTOTYPE_OPT(vrs8_expf);
-    fn_v2d = &FN_PROTOTYPE_FMA3(vrd2_exp);
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(expf),
+            &ALM_PROTO_ARCH_ZN3(exp),
+            &ALM_PROTO_ARCH_ZN3(vrs4_expf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_expf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_exp),
+            &ALM_PROTO_ARCH_ZN3(vrd4_exp),
+        },
+    },
+};
 
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-	    fn_d = &FN_PROTOTYPE_OPT(exp);
-	    fn_s = &FN_PROTOTYPE_OPT(expf);
-        fn_v4s = &FN_PROTOTYPE_OPT(vrs4_expf);
-        fn_v8s = &FN_PROTOTYPE_OPT(vrs8_expf);
-        fn_v2d = &FN_PROTOTYPE_OPT(vrd2_exp);
-        fn_v4d = &FN_PROTOTYPE_OPT(vrd4_exp);
-     } else if (CPU_HAS_SSSE3(features) &&
-               CPU_FEATURE_SSSE3_USABLE(features)) {
-	    fn_d = &FN_PROTOTYPE_BAS64(exp);
-    } else if (CPU_HAS_AVX(features) &&
-               CPU_FEATURE_AVX_USABLE(features)) {
-	    fn_d = &FN_PROTOTYPE_BAS64(exp);
-    }
-
-    /*
-     * Template:
-     *     override with any micro-architecture-specific
-     *     implementations
-     */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
-        switch(mfg_info->family) {
-        case 0x15:                      /* Naples */
-            break;
-        case 0x17:                      /* Rome */
-            break;
-        case 0x19:                      /* Milan */
-            break;
-        }
-    }
+void
+LIBM_IFACE_PROTO(exp)(void *arg)
+{
+    alm_ep_wrapper_t g_entry_exp = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(expf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(exp),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_expf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_expf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_exp),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_exp),
+        },
+    };
 
-    G_ENTRY_PT_PTR(exp) = fn_d;
-    G_ENTRY_PT_PTR(expf) = fn_s;
-    G_ENTRY_PT_PTR(vrd4_exp) = fn_v4d;
-    G_ENTRY_PT_PTR(vrs4_expf) = fn_v4s;
-    G_ENTRY_PT_PTR(vrs8_expf) = fn_v8s;
-    G_ENTRY_PT_PTR(vrd2_exp) = fn_v2d;
+    alm_iface_fixup(&g_entry_exp, &__arch_funcs_exp);
 }
 
diff --git a/src/iface/exp10.c b/src/iface/exp10.c
index bc13299..5a1650b 100644
--- a/src/iface/exp10.c
+++ b/src/iface/exp10.c
@@ -26,22 +26,46 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_exp10 = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(exp10f),
+            &FN_PROTOTYPE_FMA3(exp10),
+            &FN_PROTOTYPE_FMA3(exp10f),     /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(exp10),      /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(exp10)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(exp10) = &FN_PROTOTYPE_FMA3(exp10);
+    alm_ep_wrapper_t g_entry_exp10 = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(exp10f),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(exp10),
 
-	/* Single */
-	G_ENTRY_PT_PTR(exp10f) = &FN_PROTOTYPE_FMA3(exp10f);
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_exp10f),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_exp10),
+#if 0
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_exp10f),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_exp10),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_exp10, &__arch_funcs_exp10);
 }
 
diff --git a/src/iface/exp2.c b/src/iface/exp2.c
index 80c0b37..772161a 100644
--- a/src/iface/exp2.c
+++ b/src/iface/exp2.c
@@ -29,47 +29,58 @@
 #include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
 #include <libm/entry_pt.h>
-#include <libm/cpu_features.h>
 
-typedef double (*amd_exp2_t)(double);
-typedef float (*amd_exp2f_t)(float);
-typedef __m256d (*amd_exp2_v4d_t)(__m256d);
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
-void
-LIBM_IFACE_PROTO(exp2)(void *arg)
-{
-    /*
-     * Should setup all variants,
-     * single, double, and vectors (also complex if available)
-     */
-
-    amd_exp2_t  fn_d = NULL;
-    amd_exp2f_t fn_s = NULL;
-    amd_exp2_v4d_t fn_v4d = NULL;
-
-    static struct cpu_features *features = NULL;
+static const
+struct alm_arch_funcs __arch_funcs_exp2 = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(exp2f),
+            &FN_PROTOTYPE_FMA3(exp2),
+            &FN_PROTOTYPE_FMA3(vrs4_exp2f),
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(vrd2_exp2),
+            &FN_PROTOTYPE_FMA3(vrd4_exp2),
+        },
 
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
+        [ALM_UARCH_VER_ZEN2] = {
+            NULL, 
+            NULL, //&ALM_PROTO_ARCH_ZN2(exp2),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,//&ALM_PROTO_ARCH_ZN2(vrd2_exp2),
+            NULL,//&ALM_PROTO_ARCH_ZN2(vrd4_exp2),
+        },
 
-    //struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
+        [ALM_UARCH_VER_ZEN3] = {
+            NULL,
+            NULL, //&ALM_PROTO_ARCH_ZN3(exp2),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */ 
+            NULL,                           /* vrd4 ? */ 
+        },
+    },
+};
 
-    fn_d = &FN_PROTOTYPE_FMA3(exp2);
-    fn_s = &FN_PROTOTYPE_FMA3(exp2f);
-    fn_v4d = &FN_PROTOTYPE_FMA3(vrd4_exp2);
-
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-            //fn_d = &FN_PROTOTYPE_OPT(exp2);
-            //fn_s = &FN_PROTOTYPE_OPT(exp2f);
-    }
-
-    G_ENTRY_PT_PTR(exp2) = fn_d;
-    G_ENTRY_PT_PTR(exp2f) = fn_s;
+void
+LIBM_IFACE_PROTO(exp2)(void *arg)
+{
+    alm_ep_wrapper_t g_entry_exp2 = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(exp2f),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(exp2),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_exp2f),
+        //[ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_exp2f),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_exp2),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_exp2),
+        },
+    };
 
-    /*vector versions*/
-    G_ENTRY_PT_PTR(vrd2_exp2) = &FN_PROTOTYPE_FMA3(vrd2_exp2);
-    G_ENTRY_PT_PTR(vrd4_exp2) = fn_v4d;
+    alm_iface_fixup(&g_entry_exp2, &__arch_funcs_exp2);
 }
 
diff --git a/src/iface/expm1.c b/src/iface/expm1.c
index e80ad89..0813a6b 100644
--- a/src/iface/expm1.c
+++ b/src/iface/expm1.c
@@ -26,21 +26,54 @@
  */
 
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
 #include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_expm1 = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(expm1f),
+            &FN_PROTOTYPE_FMA3(expm1),
+            &FN_PROTOTYPE_FMA3(vrs4_expm1f),
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(expm1f),
+            &ALM_PROTO_ARCH_ZN2(expm1),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(expm1f),
+            &ALM_PROTO_ARCH_ZN3(expm1),
+        },
+#endif
+    },
+};
+
 void
 LIBM_IFACE_PROTO(expm1)(void *arg)
 {
-    /*
-     * Should setup all variants,
-     * single, double, and vectors (also complex if available)
-     */
-    G_ENTRY_PT_PTR(expm1) = &FN_PROTOTYPE_BAS64(expm1);
-    G_ENTRY_PT_PTR(expm1f) = &FN_PROTOTYPE_BAS64(expm1f);
+    alm_ep_wrapper_t g_entry_expm1 = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(expm1f),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(expm1),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_expm1f),
+        //[ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_expm1f),
+        //[ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_expm1),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_expm1),
+        },
+    };
 
-    /*vector versions*/
-    G_ENTRY_PT_PTR(vrd4_expm1) = &FN_PROTOTYPE(vrd4_expm1);
+    alm_iface_fixup(&g_entry_expm1, &__arch_funcs_expm1);
 }
+
diff --git a/src/iface/fabs.c b/src/iface/fabs.c
index 512b776..edd88b6 100644
--- a/src/iface/fabs.c
+++ b/src/iface/fabs.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_fabs = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(fabsf),
+            &FN_PROTOTYPE_FMA3(fabs),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(fabs)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(fabs) = &FN_PROTOTYPE_BAS64(fabs);
-
-	/* Single */
-	G_ENTRY_PT_PTR(fabsf) = &FN_PROTOTYPE_BAS64(fabsf);
+    alm_ep_wrapper_t g_entry_fabs = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(fabsf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(fabs),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_fabsf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_fabsf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_fabs),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_fabs),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_fabs, &__arch_funcs_fabs);
 }
 
diff --git a/src/iface/fdim.c b/src/iface/fdim.c
index fca70aa..c0a94b0 100644
--- a/src/iface/fdim.c
+++ b/src/iface/fdim.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_fdim = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(fdimf),
+            &FN_PROTOTYPE_BAS64(fdim),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(fdim)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(fdim) = &FN_PROTOTYPE_BAS64(fdim);
-
-	/* Single */
-	G_ENTRY_PT_PTR(fdimf) = &FN_PROTOTYPE_BAS64(fdimf);
+    alm_ep_wrapper_t g_entry_fdim = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(fdimf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(fdim),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_fdimf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_fdimf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_fdim),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_fdim),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_fdim, &__arch_funcs_fdim);
 }
 
diff --git a/src/iface/finite.c b/src/iface/finite.c
index b9cc42e..8fc4a3c 100644
--- a/src/iface/finite.c
+++ b/src/iface/finite.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_finite = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(finitef),
+            &FN_PROTOTYPE_REF(finite),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(finite)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(finite) = &FN_PROTOTYPE_REF(finite);
-
-	/* Single */
-	G_ENTRY_PT_PTR(finitef) = &FN_PROTOTYPE_REF(finitef);
+    alm_ep_wrapper_t g_entry_finite = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(finitef),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(finite),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_finitef),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_finitef),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_finite),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_finite),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_finite, &__arch_funcs_finite);
 }
 
diff --git a/src/iface/floor.c b/src/iface/floor.c
index 4412888..f81aa41 100644
--- a/src/iface/floor.c
+++ b/src/iface/floor.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_floor = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(floorf),
+            &FN_PROTOTYPE_REF(floor),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(floor)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(floor) = &FN_PROTOTYPE_REF(floor);
-
-	/* Single */
-	G_ENTRY_PT_PTR(floorf) = &FN_PROTOTYPE_REF(floorf);
+    alm_ep_wrapper_t g_entry_floor = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(floorf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(floor),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_floorf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_floorf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_floor),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_floor),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_floor, &__arch_funcs_floor);
 }
 
diff --git a/src/iface/fma.c b/src/iface/fma.c
index b280efd..62a24fd 100644
--- a/src/iface/fma.c
+++ b/src/iface/fma.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_fma = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(fmaf),
+            &FN_PROTOTYPE_FMA3(fma),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(fma)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(fma) = &FN_PROTOTYPE_FMA3(fma);
-
-	/* Single */
-	G_ENTRY_PT_PTR(fmaf) = &FN_PROTOTYPE_FMA3(fmaf);
+    alm_ep_wrapper_t g_entry_fma = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(fmaf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(fma),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_fmaf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_fmaf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_fma),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_fma),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_fma, &__arch_funcs_fma);
 }
 
diff --git a/src/iface/fmax.c b/src/iface/fmax.c
index 707c760..dcb57bd 100644
--- a/src/iface/fmax.c
+++ b/src/iface/fmax.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_fmax = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(fmaxf),
+            &FN_PROTOTYPE_BAS64(fmax),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(fmax)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(fmax) = &FN_PROTOTYPE_BAS64(fmax);
-
-	/* Single */
-	G_ENTRY_PT_PTR(fmaxf) = &FN_PROTOTYPE_BAS64(fmaxf);
+    alm_ep_wrapper_t g_entry_fmax = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(fmaxf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(fmax),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_fmaxf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_fmaxf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_fmax),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_fmax),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_fmax, &__arch_funcs_fmax);
 }
 
diff --git a/src/iface/fmin.c b/src/iface/fmin.c
index 6fcea4f..32e005c 100644
--- a/src/iface/fmin.c
+++ b/src/iface/fmin.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_fmin = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(fminf),
+            &FN_PROTOTYPE_BAS64(fmin),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(fmin)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(fmin) = &FN_PROTOTYPE_BAS64(fmin);
-
-	/* Single */
-	G_ENTRY_PT_PTR(fminf) = &FN_PROTOTYPE_BAS64(fminf);
+    alm_ep_wrapper_t g_entry_fmin = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(fminf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(fmin),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_fminf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_fminf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_fmin),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_fmin),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_fmin, &__arch_funcs_fmin);
 }
 
diff --git a/src/iface/fmod.c b/src/iface/fmod.c
index 9e2cb03..765aa84 100644
--- a/src/iface/fmod.c
+++ b/src/iface/fmod.c
@@ -26,22 +26,45 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_fmod = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(fmodf),
+            &FN_PROTOTYPE_BAS64(fmod),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(fmod)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(fmod) = &FN_PROTOTYPE_BAS64(fmod);
-
-	/* Single */
-	G_ENTRY_PT_PTR(fmodf) = &FN_PROTOTYPE_BAS64(fmodf);
+    alm_ep_wrapper_t g_entry_fmod = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(fmodf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(fmod),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_fmodf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_fmodf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_fmod),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_fmod),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_fmod, &__arch_funcs_fmod);
 }
 
diff --git a/src/iface/frexp.c b/src/iface/frexp.c
index daa0be1..66b0cc8 100644
--- a/src/iface/frexp.c
+++ b/src/iface/frexp.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_frexp = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(frexpf),
+            &FN_PROTOTYPE_REF(frexp),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(frexpf),
+            &FN_PROTOTYPE_FMA3(frexp),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(frexp)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(frexp) = &FN_PROTOTYPE_REF(frexp);
-
-	/* Single */
-	G_ENTRY_PT_PTR(frexpf) = &FN_PROTOTYPE_REF(frexpf);
+    alm_ep_wrapper_t g_entry_frexp = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(frexpf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(frexp),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_frexpf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_frexpf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_frexp),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_frexp),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_frexp, &__arch_funcs_frexp);
 }
 
diff --git a/src/iface/hypot.c b/src/iface/hypot.c
index ea48433..5f6e2ed 100644
--- a/src/iface/hypot.c
+++ b/src/iface/hypot.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_hypot = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(hypotf),
+            &FN_PROTOTYPE_REF(hypot),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(hypotf),
+            &FN_PROTOTYPE_FMA3(hypot),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(hypot)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(hypot) = &FN_PROTOTYPE_REF(hypot);
-
-	/* Single */
-	G_ENTRY_PT_PTR(hypotf) = &FN_PROTOTYPE_REF(hypotf);
+    alm_ep_wrapper_t g_entry_hypot = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(hypotf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(hypot),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_hypotf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_hypotf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_hypot),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_hypot),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_hypot, &__arch_funcs_hypot);
 }
 
diff --git a/src/iface/ilogb.c b/src/iface/ilogb.c
index 8145a7d..6f6af8c 100644
--- a/src/iface/ilogb.c
+++ b/src/iface/ilogb.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_ilogb = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(ilogbf),
+            &FN_PROTOTYPE_REF(ilogb),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(ilogbf),
+            &FN_PROTOTYPE_FMA3(ilogb),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+         },
+#endif
+    },
+};
 
 void
 LIBM_IFACE_PROTO(ilogb)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(ilogb) = &FN_PROTOTYPE_REF(ilogb);
-
-	/* Single */
-	G_ENTRY_PT_PTR(ilogbf) = &FN_PROTOTYPE_REF(ilogbf);
+    alm_ep_wrapper_t g_entry_ilogb = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(ilogbf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(ilogb),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_ilogbf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_ilogbf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_ilogb),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_ilogb),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_ilogb, &__arch_funcs_ilogb);
 }
 
diff --git a/src/iface/ldexp.c b/src/iface/ldexp.c
index 53a6485..d66ba90 100644
--- a/src/iface/ldexp.c
+++ b/src/iface/ldexp.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_ldexp = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(ldexpf),
+            &FN_PROTOTYPE_REF(ldexp),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(ldexpf),
+            &FN_PROTOTYPE_FMA3(ldexp),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    },
+};
 
 void
 LIBM_IFACE_PROTO(ldexp)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(ldexp) = &FN_PROTOTYPE_REF(ldexp);
-
-	/* Single */
-	G_ENTRY_PT_PTR(ldexpf) = &FN_PROTOTYPE_REF(ldexpf);
+    alm_ep_wrapper_t g_entry_ldexp = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(ldexpf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(ldexp),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_ldexpf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_ldexpf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_ldexp),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_ldexp),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_ldexp, &__arch_funcs_ldexp);
 }
 
diff --git a/src/iface/llrint.c b/src/iface/llrint.c
index 652fc01..63d34d4 100644
--- a/src/iface/llrint.c
+++ b/src/iface/llrint.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_llrint = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(llrintf),
+            &FN_PROTOTYPE_REF(llrint),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(llrintf),
+            &FN_PROTOTYPE_FMA3(llrint),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(llrint)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(llrint) = &FN_PROTOTYPE_REF(llrint);
-
-	/* Single */
-	G_ENTRY_PT_PTR(llrintf) = &FN_PROTOTYPE_REF(llrintf);
+    alm_ep_wrapper_t g_entry_llrint = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(llrintf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(llrint),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_llrintf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_llrintf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_llrint),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_llrint),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_llrint, &__arch_funcs_llrint);
 }
 
diff --git a/src/iface/llround.c b/src/iface/llround.c
index 2ea7229..1345ba8 100644
--- a/src/iface/llround.c
+++ b/src/iface/llround.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_llround = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(llroundf),
+            &FN_PROTOTYPE_REF(llround),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(llroundf),
+            &FN_PROTOTYPE_FMA3(llround),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(llround)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(llround) = &FN_PROTOTYPE_REF(llround);
-
-	/* Single */
-	G_ENTRY_PT_PTR(llroundf) = &FN_PROTOTYPE_REF(llroundf);
+    alm_ep_wrapper_t g_entry_llround = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(llroundf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(llround),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_llroundf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_llroundf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_llround),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_llround),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_llround, &__arch_funcs_llround);
 }
 
diff --git a/src/iface/log.c b/src/iface/log.c
index 13bf816..51c1ad5 100644
--- a/src/iface/log.c
+++ b/src/iface/log.c
@@ -24,88 +24,63 @@
  * POSSIBILITY OF SUCH DAMAGE.
  *
  */
+
 #include <libm_macros.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
 #include <libm/entry_pt.h>
-#include <libm/cpu_features.h>
 
-typedef double (*amd_log_t)(double);
-typedef float (*amd_logf_t)(float);
-typedef __m128d (*amd_log_v2d_t)(__m128d);
-typedef __m256d (*amd_log_v4d_t)(__m256d);
-typedef __m128  (*amd_log_v4s_t)(__m128);
-typedef __m256  (*amd_log_v8s_t)(__m256);
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_log = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(logf),
+            &FN_PROTOTYPE_FMA3(log),
+            &FN_PROTOTYPE_FMA3(vrs4_logf),
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(vrd2_log),
+            NULL,                           /* vrd4 ? */
+        },
 
-__m128 FN_PROTOTYPE_FMA3(vrs4_logf_dev)(__m128 x);
-float FN_PROTOTYPE_OPT(logf_v3)(float x);
-__m128 FN_PROTOTYPE_OPT(vrs4_logf)(__m128 x);
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(logf),
+            &ALM_PROTO_ARCH_ZN2(log),
+            &ALM_PROTO_ARCH_ZN2(vrs4_logf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_logf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_log),
+            &ALM_PROTO_ARCH_ZN2(vrd4_log),
+        },
 
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(logf),
+            &ALM_PROTO_ARCH_ZN3(log),
+            &ALM_PROTO_ARCH_ZN3(vrs4_logf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_logf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_log),
+            &ALM_PROTO_ARCH_ZN3(vrd4_log),
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(log)(void *arg)
 {
+    alm_ep_wrapper_t g_entry_log = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(logf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(log),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_logf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_logf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_log),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_log),
+        },
+    };
 
-    amd_log_t  fn_d = NULL;
-    amd_logf_t fn_s = NULL;
-    amd_log_v4d_t fn_v4d = NULL;
-    amd_log_v2d_t fn_v2d = NULL;
-    amd_log_v4s_t fn_v4s = NULL;
-    amd_log_v8s_t fn_v8s = NULL;
-
-    static struct cpu_features *features = NULL;
-
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
-
-    struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
-
-    fn_d = &FN_PROTOTYPE_FMA3(log);
-    fn_s = &FN_PROTOTYPE_FMA3(logf);
-    fn_v4d = &FN_PROTOTYPE_FMA3(vrd4_log);
-    fn_v2d = &FN_PROTOTYPE_FMA3(vrd2_log);
-    fn_v4s = &FN_PROTOTYPE_FMA3(vrs4_logf);
-    /* we only have OPT version of vsr8_logf */
-    fn_v8s = &FN_PROTOTYPE_OPT(vrs8_logf);
-
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-            //fn_d = &FN_PROTOTYPE_OPT(log);	/* we dont have an optimized log yet */
-            fn_s   = &FN_PROTOTYPE_OPT(logf);
-            fn_v4s = &FN_PROTOTYPE_OPT(vrs4_logf);
-            fn_v8s = &FN_PROTOTYPE_OPT(vrs8_logf);
-            fn_v4d = &FN_PROTOTYPE_OPT(vrd4_log);
-            fn_v2d = &FN_PROTOTYPE_OPT(vrd2_log);
-    } else if (CPU_HAS_SSSE3(features) &&
-               CPU_FEATURE_SSSE3_USABLE(features)) {
-	    fn_d = &FN_PROTOTYPE_BAS64(log);
-    } else if (CPU_HAS_AVX(features) &&
-               CPU_FEATURE_AVX_USABLE(features)) {
-	    fn_d = &FN_PROTOTYPE_BAS64(log);
-    }
-
-    /*
-     * Template:
-     *     override with any micro-architecture-specific
-     *     implementations
-     */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
-        switch(mfg_info->family) {
-        case 0x15:                      /* Naples */
-            break;
-        case 0x17:                      /* Rome */
-            break;
-        case 0x19:                      /* Milan */
-            break;
-        }
-    }
-
-    G_ENTRY_PT_PTR(log) = fn_d;
-    G_ENTRY_PT_PTR(logf) = fn_s;
-    G_ENTRY_PT_PTR(vrd4_log) = fn_v4d;
-    G_ENTRY_PT_PTR(vrd2_log) = fn_v2d;
-    G_ENTRY_PT_PTR(vrs4_logf) = fn_v4s;
-    G_ENTRY_PT_PTR(vrs8_logf) = fn_v8s;
+    alm_iface_fixup(&g_entry_log, &__arch_funcs_log);
 }
 
diff --git a/src/iface/log10.c b/src/iface/log10.c
index be8f630..0e529cb 100644
--- a/src/iface/log10.c
+++ b/src/iface/log10.c
@@ -26,22 +26,63 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_log10 = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(log10f),
+            &FN_PROTOTYPE_FMA3(log10),
+            &FN_PROTOTYPE_FMA3(vrs4_log10f),
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(vrd2_log10),
+            NULL,                           /* vrd4 ? */
+        },
+
+#if 0
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(log10f),
+            &ALM_PROTO_ARCH_ZN2(log10),
+            &ALM_PROTO_ARCH_ZN2(vrs4_log10f),
+            &ALM_PROTO_ARCH_ZN2(vrs8_log10f),
+            &ALM_PROTO_ARCH_ZN2(vrd2_log10),
+            &ALM_PROTO_ARCH_ZN2(vrd4_log10),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(log10f),
+            &ALM_PROTO_ARCH_ZN3(log10),
+            &ALM_PROTO_ARCH_ZN3(vrs4_log10f),
+            &ALM_PROTO_ARCH_ZN3(vrs8_log10f),
+            &ALM_PROTO_ARCH_ZN3(vrd2_log10),
+            &ALM_PROTO_ARCH_ZN3(vrd4_log10),
+        },
+#endif
+    },
+};
 
 void
 LIBM_IFACE_PROTO(log10)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(log10) = &FN_PROTOTYPE_FMA3(log10);
-
-	/* Single */
-	G_ENTRY_PT_PTR(log10f) = &FN_PROTOTYPE_FMA3(log10f);
+    alm_ep_wrapper_t g_entry_log10 = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(log10f),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(log10),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_log10f),
+        //[ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_log10f),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_log10),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_log10),
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_log10, &__arch_funcs_log10);
 }
 
diff --git a/src/iface/log1p.c b/src/iface/log1p.c
index 5f8b7f6..82c6123 100644
--- a/src/iface/log1p.c
+++ b/src/iface/log1p.c
@@ -26,22 +26,63 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_log1p = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(log1pf),
+            &FN_PROTOTYPE_FMA3(log1p),
+            &FN_PROTOTYPE_FMA3(vrs4_log1pf),
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(vrd2_log1p),
+            NULL,                           /* vrd4 ? */
+        },
+
+#if 0
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(log1pf),
+            &ALM_PROTO_ARCH_ZN2(log1p),
+            &ALM_PROTO_ARCH_ZN2(vrs4_log1pf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_log1pf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_log1p),
+            &ALM_PROTO_ARCH_ZN2(vrd4_log1p),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(log1pf),
+            &ALM_PROTO_ARCH_ZN3(log1p),
+            &ALM_PROTO_ARCH_ZN3(vrs4_log1pf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_log1pf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_log1p),
+            &ALM_PROTO_ARCH_ZN3(vrd4_log1p),
+        },
+#endif
+    },
+};
 
 void
 LIBM_IFACE_PROTO(log1p)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(log1p) = &FN_PROTOTYPE_FMA3(log1p);
-
-	/* Single */
-	G_ENTRY_PT_PTR(log1pf) = &FN_PROTOTYPE_FMA3(log1pf);
+    alm_ep_wrapper_t g_entry_log1p = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(log1pf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(log1p),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_log1pf),
+        //[ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_log1pf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_log1p),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_log1p),
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_log1p, &__arch_funcs_log1p);
 }
 
diff --git a/src/iface/log2.c b/src/iface/log2.c
index 5f68132..921814f 100644
--- a/src/iface/log2.c
+++ b/src/iface/log2.c
@@ -26,22 +26,63 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_log2 = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(log2f),
+            &FN_PROTOTYPE_FMA3(log2),
+            &FN_PROTOTYPE_FMA3(vrs4_log2f),
+            NULL,                           /* vrs8 ? */
+            &FN_PROTOTYPE_FMA3(vrd2_log2),
+            NULL,                           /* vrd4 ? */
+        },
+
+#if 0
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(log2f),
+            &ALM_PROTO_ARCH_ZN2(log2),
+            &ALM_PROTO_ARCH_ZN2(vrs4_log2f),
+            &ALM_PROTO_ARCH_ZN2(vrs8_log2f),
+            &ALM_PROTO_ARCH_ZN2(vrd2_log2),
+            &ALM_PROTO_ARCH_ZN2(vrd4_log2),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(log2f),
+            &ALM_PROTO_ARCH_ZN3(log2),
+            &ALM_PROTO_ARCH_ZN3(vrs4_log2f),
+            &ALM_PROTO_ARCH_ZN3(vrs8_log2f),
+            &ALM_PROTO_ARCH_ZN3(vrd2_log2),
+            &ALM_PROTO_ARCH_ZN3(vrd4_log2),
+        },
+#endif
+    },
+};
 
 void
 LIBM_IFACE_PROTO(log2)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(log2) = &FN_PROTOTYPE_FMA3(log2);
-
-	/* Single */
-	G_ENTRY_PT_PTR(log2f) = &FN_PROTOTYPE_FMA3(log2f);
+    alm_ep_wrapper_t g_entry_log2 = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(log2f),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(log2),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_log2f),
+        //[ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_log2f),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_log2),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_log2),
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_log2, &__arch_funcs_log2);
 }
 
diff --git a/src/iface/logb.c b/src/iface/logb.c
index 00634ca..fa3049e 100644
--- a/src/iface/logb.c
+++ b/src/iface/logb.c
@@ -26,22 +26,63 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_logb = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(logbf),
+            &FN_PROTOTYPE_REF(logb),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+
+#if 0
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(logbf),
+            &ALM_PROTO_ARCH_ZN2(logb),
+            &ALM_PROTO_ARCH_ZN2(vrs4_logbf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_logbf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_logb),
+            &ALM_PROTO_ARCH_ZN2(vrd4_logb),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(logbf),
+            &ALM_PROTO_ARCH_ZN3(logb),
+            &ALM_PROTO_ARCH_ZN3(vrs4_logbf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_logbf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_logb),
+            &ALM_PROTO_ARCH_ZN3(vrd4_logb),
+        },
+#endif
+    },
+};
 
 void
 LIBM_IFACE_PROTO(logb)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(logb) = &FN_PROTOTYPE_REF(logb);
-
-	/* Single */
-	G_ENTRY_PT_PTR(logbf) = &FN_PROTOTYPE_REF(logbf);
+    alm_ep_wrapper_t g_entry_logb = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(logbf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(logb),
+        //[ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_logbf),
+        //[ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_logbf),
+        //[ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_logb),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_logb),
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_logb, &__arch_funcs_logb);
 }
 
diff --git a/src/iface/lrint.c b/src/iface/lrint.c
index 74e02e4..7adbf7a 100644
--- a/src/iface/lrint.c
+++ b/src/iface/lrint.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_lrint = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(lrint),
+            &FN_PROTOTYPE_REF(lrintf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(lrint),
+            &FN_PROTOTYPE_FMA3(lrintf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(lrint)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(lrint) = &FN_PROTOTYPE_REF(lrint);
-
-	/* Single */
-	G_ENTRY_PT_PTR(lrintf) = &FN_PROTOTYPE_REF(lrintf);
+    alm_ep_wrapper_t g_entry_lrint = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(lrintf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(lrint),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_lrintf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_lrintf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_lrint),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_lrint),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_lrint, &__arch_funcs_lrint);
 }
 
diff --git a/src/iface/lround.c b/src/iface/lround.c
index 2f3ce6d..fc5d977 100644
--- a/src/iface/lround.c
+++ b/src/iface/lround.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_lround = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(lroundf),
+            &FN_PROTOTYPE_REF(lround),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(lroundf),
+            &FN_PROTOTYPE_FMA3(lround),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(lround)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(lround) = &FN_PROTOTYPE_REF(lround);
-
-	/* Single */
-	G_ENTRY_PT_PTR(lroundf) = &FN_PROTOTYPE_REF(lroundf);
+    alm_ep_wrapper_t g_entry_lround = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(lroundf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(lround),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_lroundf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_lroundf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_lround),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_lround),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_lround, &__arch_funcs_lround);
 }
 
diff --git a/src/iface/modf.c b/src/iface/modf.c
index eb8edb6..b5f7d2a 100644
--- a/src/iface/modf.c
+++ b/src/iface/modf.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_modf = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(modff),
+            &FN_PROTOTYPE_REF(modf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_REF(modff),
+            &FN_PROTOTYPE_REF(modf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(modf)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(modf) = &FN_PROTOTYPE_REF(modf);
-
-	/* Single */
-	G_ENTRY_PT_PTR(modff) = &FN_PROTOTYPE_REF(modff);
+    alm_ep_wrapper_t g_entry_modf = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(modff),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(modf),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_modff),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_modff),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_modf),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_modf),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_modf, &__arch_funcs_modf);
 }
 
diff --git a/src/iface/nan.c b/src/iface/nan.c
index 1d88bf4..fb83e6a 100644
--- a/src/iface/nan.c
+++ b/src/iface/nan.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_nan = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(nanf),
+            &FN_PROTOTYPE_REF(nan),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(nanf),
+            &FN_PROTOTYPE_FMA3(nan),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(nan)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(nan) = &FN_PROTOTYPE_REF(nan);
-
-	/* Single */
-	G_ENTRY_PT_PTR(nanf) = &FN_PROTOTYPE_REF(nanf);
+    alm_ep_wrapper_t g_entry_nan = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(nanf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(nan),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_nanf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_nanf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_nan),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_nan),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_nan, &__arch_funcs_nan);
 }
 
diff --git a/src/iface/nearbyint.c b/src/iface/nearbyint.c
index 97934c5..2577f5f 100644
--- a/src/iface/nearbyint.c
+++ b/src/iface/nearbyint.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_nearbyint = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(nearbyintf),
+            &FN_PROTOTYPE_BAS64(nearbyint),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_REF(nearbyint),
+            &FN_PROTOTYPE_REF(nearbyintf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(nearbyint)(void *arg)
 {
-	/* Double */
-	//G_ENTRY_PT_PTR(nearbyint) = &FN_PROTOTYPE_REF(nearbyint);
-
-	/* Single */
-	G_ENTRY_PT_PTR(nearbyintf) = &FN_PROTOTYPE_REF(nearbyintf);
+    alm_ep_wrapper_t g_entry_nearbyint = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(nearbyintf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(nearbyint),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_nearbyintf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_nearbyintf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_nearbyint),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_nearbyint),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_nearbyint, &__arch_funcs_nearbyint);
 }
 
diff --git a/src/iface/nextafter.c b/src/iface/nextafter.c
index 4658e80..d987cdd 100644
--- a/src/iface/nextafter.c
+++ b/src/iface/nextafter.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_nextafter = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(nextafterf),
+            &FN_PROTOTYPE_REF(nextafter),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_REF(nextafter),
+            &FN_PROTOTYPE_REF(nextafterf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(nextafter)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(nextafter) = &FN_PROTOTYPE_REF(nextafter);
-
-	/* Single */
-	G_ENTRY_PT_PTR(nextafterf) = &FN_PROTOTYPE_REF(nextafterf);
+    alm_ep_wrapper_t g_entry_nextafter = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(nextafterf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(nextafter),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_nextafterf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_nextafterf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_nextafter),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_nextafter),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_nextafter, &__arch_funcs_nextafter);
 }
 
diff --git a/src/iface/nexttoward.c b/src/iface/nexttoward.c
index 93adf1a..16d4a90 100644
--- a/src/iface/nexttoward.c
+++ b/src/iface/nexttoward.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_nexttoward = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(nexttowardf),
+            &FN_PROTOTYPE_REF(nexttoward),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_REF(nexttoward),
+            &FN_PROTOTYPE_REF(nexttowardf),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(nexttoward)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(nexttoward) = &FN_PROTOTYPE_REF(nexttoward);
-
-	/* Single */
-	G_ENTRY_PT_PTR(nexttowardf) = &FN_PROTOTYPE_REF(nexttowardf);
+    alm_ep_wrapper_t g_entry_nexttoward = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(nexttowardf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(nexttoward),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_nexttowardf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_nexttowardf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_nexttoward),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_nexttoward),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_nexttoward, &__arch_funcs_nexttoward);
 }
 
diff --git a/src/iface/pow.c b/src/iface/pow.c
index 5bc2d9a..eabf81d 100644
--- a/src/iface/pow.c
+++ b/src/iface/pow.c
@@ -29,79 +29,58 @@
 #include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
 #include <libm/entry_pt.h>
-#include <libm/cpu_features.h>
 
-typedef double (*amd_pow_t)(double, double);
-typedef float (*amd_powf_t)(float, float) ;
-typedef __m128d (*amd_pow_v2d_t)(__m128d, __m128d);
-typedef __m256d (*amd_pow_v4d_t)(__m256d, __m256d);
-typedef __m128  (*amd_powf_v4s_t)(__m128, __m128);
-typedef __m256  (*amd_powf_v8s_t)(__m256, __m256);
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
-void
-LIBM_IFACE_PROTO(pow)(void *arg)
-{
-    /*
-     * Should setup all variants,
-     * single, double, and vectors (also complex if available)
-     */
-
-    amd_pow_t  fn_d = NULL;
-    amd_powf_t fn_s = NULL;
-    amd_pow_v4d_t fn_v4d = NULL;
-    amd_pow_v2d_t fn_v2d = NULL;
-    amd_powf_v4s_t fn_v4s = NULL;
-    amd_powf_v8s_t fn_v8s = NULL;
-
-    static struct cpu_features *features = NULL;
-
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
+static const
+struct alm_arch_funcs __arch_funcs_pow = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(powf),
+            &FN_PROTOTYPE_FMA3(pow),
+            NULL, //&FN_PROTOTYPE_FMA3(vrs4_powf),
+            NULL, //&FN_PROTOTYPE_FMA3(vrs8_powf),
+            &FN_PROTOTYPE_FMA3(vrd2_pow),
+            &FN_PROTOTYPE_FMA3(vrd4_pow),
+        },
 
-    struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(powf),
+            &ALM_PROTO_ARCH_ZN2(pow),
+            &ALM_PROTO_ARCH_ZN2(vrs4_powf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_powf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_pow),
+            &ALM_PROTO_ARCH_ZN2(vrd4_pow),
+        },
 
-    fn_d = &FN_PROTOTYPE_FMA3(pow);
-    fn_s = &FN_PROTOTYPE_FMA3(powf);
-    fn_v4d = &FN_PROTOTYPE_FMA3(vrd4_pow);
-    fn_v2d = &FN_PROTOTYPE_FMA3(vrd2_pow);
-    fn_v4s = &FN_PROTOTYPE_OPT(vrs4_powf);
-    fn_v8s = &FN_PROTOTYPE_OPT(vrs8_powf);
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(powf),
+            &ALM_PROTO_ARCH_ZN3(pow),
+            &ALM_PROTO_ARCH_ZN3(vrs4_powf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_powf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_pow),
+            &ALM_PROTO_ARCH_ZN3(vrd4_pow),
+        },
+    },
+};
 
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-        fn_d = &FN_PROTOTYPE_OPT(pow);
-        fn_s = &FN_PROTOTYPE_OPT(powf);
-        fn_v4d = &FN_PROTOTYPE_OPT(vrd4_pow);
-        fn_v2d = &FN_PROTOTYPE_OPT(vrd2_pow);
-    } else if (CPU_HAS_SSSE3(features) &&
-               CPU_FEATURE_SSSE3_USABLE(features)) {
-        fn_d = &FN_PROTOTYPE_BAS64(pow);
-    } else if (CPU_HAS_AVX(features) &&
-               CPU_FEATURE_AVX_USABLE(features)) {
-        fn_d = &FN_PROTOTYPE_BAS64(pow);
-    }
-
-    /*
-     * Template:
-     *     override with any micro-architecture-specific
-     *     implementations
-     */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
-        switch(mfg_info->family) {
-        case 0x15:                      /* Naples */
-            break;
-        case 0x17:                      /* Rome */
-            break;
-        case 0x19:                      /* Milan */
-            break;
-        }
-    }
+void
+LIBM_IFACE_PROTO(pow)(void *arg)
+{
+    alm_ep_wrapper_t g_entry_pow = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(powf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(pow),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_powf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_powf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_pow),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_pow),
+        },
+    };
 
-    G_ENTRY_PT_PTR(pow) = fn_d;
-    G_ENTRY_PT_PTR(powf) = fn_s;
-    G_ENTRY_PT_PTR(vrd4_pow) = fn_v4d;
-    G_ENTRY_PT_PTR(vrd2_pow) = fn_v2d;
-    G_ENTRY_PT_PTR(vrs4_powf) = fn_v4s;
-    G_ENTRY_PT_PTR(vrs8_powf) = fn_v8s;
+    alm_iface_fixup(&g_entry_pow, &__arch_funcs_pow);
 }
+
diff --git a/src/iface/remainder.c b/src/iface/remainder.c
index 20d2589..794b656 100644
--- a/src/iface/remainder.c
+++ b/src/iface/remainder.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_remainder = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(remainderf),
+            &FN_PROTOTYPE_BAS64(remainder),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(remainderf),
+            &FN_PROTOTYPE_FMA3(remainder),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(remainder)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(remainder) = &FN_PROTOTYPE_BAS64(remainder);
-
-	/* Single */
-	G_ENTRY_PT_PTR(remainderf) = &FN_PROTOTYPE_BAS64(remainderf);
+    alm_ep_wrapper_t g_entry_remainder = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(remainderf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(remainder),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_remainderf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_remainderf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_remainder),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_remainder),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_remainder, &__arch_funcs_remainder);
 }
 
diff --git a/src/iface/remquo.c b/src/iface/remquo.c
index 62314bc..f1df515 100644
--- a/src/iface/remquo.c
+++ b/src/iface/remquo.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_remquo = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(remquof),
+            &FN_PROTOTYPE_REF(remquo),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(remquof),
+            &FN_PROTOTYPE_FMA3(remquo),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(remquo)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(remquo) = &FN_PROTOTYPE_REF(remquo);
-
-	/* Single */
-	G_ENTRY_PT_PTR(remquof) = &FN_PROTOTYPE_REF(remquof);
+    alm_ep_wrapper_t g_entry_remquo = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(remquof),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(remquo),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_remquof),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_remquof),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_remquo),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_remquo),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_remquo, &__arch_funcs_remquo);
 }
 
diff --git a/src/iface/rint.c b/src/iface/rint.c
index 3999013..b41cb8c 100644
--- a/src/iface/rint.c
+++ b/src/iface/rint.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_rint = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(rintf),
+            &FN_PROTOTYPE_REF(rint),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(rintf),
+            &FN_PROTOTYPE_FMA3(rint),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(rint)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(rint) = &FN_PROTOTYPE_REF(rint);
-
-	/* Single */
-	G_ENTRY_PT_PTR(rintf) = &FN_PROTOTYPE_REF(rintf);
+    alm_ep_wrapper_t g_entry_rint = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(rintf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(rint),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_rintf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_rintf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_rint),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_rint),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_rint, &__arch_funcs_rint);
 }
 
diff --git a/src/iface/round.c b/src/iface/round.c
index 6f681f5..7e200aa 100644
--- a/src/iface/round.c
+++ b/src/iface/round.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_round = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(roundf),
+            NULL,                           /* s1d ? */
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(roundf),
+            &FN_PROTOTYPE_FMA3(round),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(round)(void *arg)
 {
-	/* Double */
-	//G_ENTRY_PT_PTR(round) = &FN_PROTOTYPE_REF(round);
-
-	/* Single */
-	G_ENTRY_PT_PTR(roundf) = &FN_PROTOTYPE_REF(roundf);
+    alm_ep_wrapper_t g_entry_round = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(roundf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(round),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_roundf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_roundf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_round),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_round),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_round, &__arch_funcs_round);
 }
 
diff --git a/src/iface/scalbln.c b/src/iface/scalbln.c
index 1d9a165..d6ab773 100644
--- a/src/iface/scalbln.c
+++ b/src/iface/scalbln.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_scalbln = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(scalblnf),
+            &FN_PROTOTYPE_REF(scalbln),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(scalblnf),
+            &FN_PROTOTYPE_FMA3(scalbln),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(scalbln)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(scalbln) = &FN_PROTOTYPE_REF(scalbln);
-
-	/* Single */
-	G_ENTRY_PT_PTR(scalblnf) = &FN_PROTOTYPE_REF(scalblnf);
+    alm_ep_wrapper_t g_entry_scalbln = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(scalblnf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(scalbln),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_scalblnf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_scalblnf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_scalbln),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_scalbln),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_scalbln, &__arch_funcs_scalbln);
 }
 
diff --git a/src/iface/scalbn.c b/src/iface/scalbn.c
index 1e9b2fa..14ef1b6 100644
--- a/src/iface/scalbn.c
+++ b/src/iface/scalbn.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_scalbn = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(scalbnf),
+            &FN_PROTOTYPE_REF(scalbn),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(scalbnf),
+            &FN_PROTOTYPE_FMA3(scalbn),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(scalbn)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(scalbn) = &FN_PROTOTYPE_REF(scalbn);
-
-	/* Single */
-	G_ENTRY_PT_PTR(scalbnf) = &FN_PROTOTYPE_REF(scalbnf);
+    alm_ep_wrapper_t g_entry_scalbn = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(scalbnf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(scalbn),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_scalbnf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_scalbnf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_scalbn),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_scalbn),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_scalbn, &__arch_funcs_scalbn);
 }
 
diff --git a/src/iface/sin.c b/src/iface/sin.c
index 193bc10..9cb9c44 100644
--- a/src/iface/sin.c
+++ b/src/iface/sin.c
@@ -25,107 +25,62 @@
  *
  */
 
-#include <stdio.h>
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
-#include <libm/arch/zen2.h>
+#include <libm/entry_pt.h>
 
-typedef double (*amd_sin_t)(double);
-typedef float (*amd_sinf_t)(float);
-typedef __m128d (*amd_sin_v2d_t)(__m128d);
-typedef __m256d (*amd_sin_v4d_t)(__m256d);
-typedef __m128  (*amd_sin_v4s_t)(__m128);
-typedef __m256  (*amd_sin_v8s_t)(__m256);
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_sin = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(sinf),
+            &FN_PROTOTYPE_FMA3(sin),
+            &FN_PROTOTYPE_FMA3(vrs4_sinf),
+            NULL,                           /* v8s ? */
+            &FN_PROTOTYPE_FMA3(vrd2_sin),
+            NULL,                           /* v4d ? */
+        },
+
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(sinf),
+            &ALM_PROTO_ARCH_ZN2(sin),
+            &ALM_PROTO_ARCH_ZN2(vrs4_sinf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_sinf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_sin),
+            &ALM_PROTO_ARCH_ZN2(vrd4_sin),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(sinf),
+            &ALM_PROTO_ARCH_ZN3(sin),
+            &ALM_PROTO_ARCH_ZN3(vrs4_sinf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_sinf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_sin),
+            &ALM_PROTO_ARCH_ZN3(vrd4_sin),
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(sin)(void *arg)
 {
-    /*
-     * Should setup all variants,
-     * single, double, and vectors (also complex if available)
-     */
-    amd_sin_t  fn_d = NULL;
-    amd_sinf_t fn_s = NULL;
-    amd_sin_v4s_t fn_v4s = NULL;
-    amd_sin_v8s_t fn_v8s = NULL;
-    amd_sin_v2d_t fn_v2d = NULL;
-    amd_sin_v4d_t fn_v4d = NULL;
-
-    static struct cpu_features *features = NULL;
-
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
-
-    struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
-
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-
-        fn_d = &FN_PROTOTYPE_OPT(sin);
-        fn_s = &FN_PROTOTYPE_OPT(sinf);
-        fn_v4s = &FN_PROTOTYPE_OPT(vrs4_sinf);
-        fn_v8s = &FN_PROTOTYPE_OPT(vrs8_sinf);
-        fn_v2d = &FN_PROTOTYPE_OPT(vrd2_sin);
-        fn_v4d = &FN_PROTOTYPE_OPT(vrd4_sin);
-
-     } else if (CPU_HAS_SSSE3(features) &&
-        CPU_FEATURE_SSSE3_USABLE(features)) {
-
-        fn_d = &FN_PROTOTYPE_BAS64(sin);
-        fn_s = &FN_PROTOTYPE_BAS64(sinf);
-
-    } else if (CPU_HAS_AVX(features) &&
-        CPU_FEATURE_AVX_USABLE(features)) {
-
-        fn_d = &FN_PROTOTYPE_BAS64(sin);
-        fn_s = &FN_PROTOTYPE_BAS64(sinf);
-
-    }
-
-     /*
-     * Template:
-     *     override with any micro-architecture-specific
-     *     implementations
-     */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
-        switch(mfg_info->family) {
-        case 0x15:                                      /* Naples */
-            break;
-        case 0x17: fn_d   = &ALM_PROTO_ARCH_ZN2(sin);   /* Rome */
-                   fn_s   = &ALM_PROTO_ARCH_ZN2(sinf);
-                   fn_v4s = &ALM_PROTO_ARCH_ZN2(vrs4_sinf);
-                   fn_v8s = &ALM_PROTO_ARCH_ZN2(vrs8_sinf);
-                   fn_v2d = &ALM_PROTO_ARCH_ZN2(vrd2_sin);
-                   fn_v4d = &ALM_PROTO_ARCH_ZN2(vrd4_sin);
-            break;
-        case 0x19: fn_d   = &ALM_PROTO_ARCH_ZN2(sin);   /* Milan */
-                   fn_s   = &ALM_PROTO_ARCH_ZN2(sinf);
-                   fn_v4s = &ALM_PROTO_ARCH_ZN2(vrs4_sinf);
-                   fn_v8s = &ALM_PROTO_ARCH_ZN2(vrs8_sinf);
-                   fn_v2d = &ALM_PROTO_ARCH_ZN2(vrd2_sin);
-                   fn_v4d = &ALM_PROTO_ARCH_ZN2(vrd4_sin);
-            break;
-        }
-    }
-
-    /* Double */
-    G_ENTRY_PT_PTR(sin) = fn_d;
-
-    /* Single */
-    G_ENTRY_PT_PTR(sinf) = fn_s;
-
-    /* Vector Double */
-    G_ENTRY_PT_PTR(vrd2_sin) = fn_v2d;
-
-    G_ENTRY_PT_PTR(vrd4_sin) = fn_v4d;
-
-    /* Vector Single */
-    G_ENTRY_PT_PTR(vrs4_sinf) = fn_v4s;
-
-    G_ENTRY_PT_PTR(vrs8_sinf) = fn_v8s;
+    alm_ep_wrapper_t g_entry_sin = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(sinf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(sin),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_sinf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_sinf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_sin),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_sin),
+        },
+    };
+
+    alm_iface_fixup(&g_entry_sin, &__arch_funcs_sin);
 }
 
diff --git a/src/iface/sinh.c b/src/iface/sinh.c
index c7c826e..3ca98d3 100644
--- a/src/iface/sinh.c
+++ b/src/iface/sinh.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_sinh = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(sinhf),
+            &FN_PROTOTYPE_REF(sinh),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(sinhf),
+            &FN_PROTOTYPE_FMA3(sinh),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(sinh)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(sinh) = &FN_PROTOTYPE_REF(sinh);
-
-	/* Single */
-	G_ENTRY_PT_PTR(sinhf) = &FN_PROTOTYPE_REF(sinhf);
+    alm_ep_wrapper_t g_entry_sinh = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(sinhf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(sinh),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_sinhf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_sinhf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_sinh),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_sinh),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_sinh, &__arch_funcs_sinh);
 }
 
diff --git a/src/iface/sinpi.c b/src/iface/sinpi.c
index abf6673..1a0d334 100644
--- a/src/iface/sinpi.c
+++ b/src/iface/sinpi.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_sinpi = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(sinpif),
+            &FN_PROTOTYPE_REF(sinpi),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(sinpif),
+            &FN_PROTOTYPE_FMA3(sinpi),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(sinpi)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(sinpi) = &FN_PROTOTYPE_REF(sinpi);
-
-	/* Single */
-	G_ENTRY_PT_PTR(sinpif) = &FN_PROTOTYPE_REF(sinpif);
+    alm_ep_wrapper_t g_entry_sinpi = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(sinpif),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(sinpi),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_sinpif),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_sinpif),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_sinpi),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_sinpi),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_sinpi, &__arch_funcs_sinpi);
 }
 
diff --git a/src/iface/sqrt.c b/src/iface/sqrt.c
index 39fbeca..4407383 100644
--- a/src/iface/sqrt.c
+++ b/src/iface/sqrt.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_sqrt = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(sqrtf),
+            &FN_PROTOTYPE_REF(sqrt),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(sqrtf),
+            &FN_PROTOTYPE_FMA3(sqrt),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(sqrt)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(sqrt) = &FN_PROTOTYPE_REF(sqrt);
-
-	/* Single */
-	G_ENTRY_PT_PTR(sqrtf) = &FN_PROTOTYPE_REF(sqrtf);
+    alm_ep_wrapper_t g_entry_sqrt = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(sqrtf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(sqrt),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_sqrtf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_sqrtf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_sqrt),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_sqrt),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_sqrt, &__arch_funcs_sqrt);
 }
 
diff --git a/src/iface/tan.c b/src/iface/tan.c
index ae682be..cf23e6a 100644
--- a/src/iface/tan.c
+++ b/src/iface/tan.c
@@ -29,78 +29,58 @@
 #include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
 #include <libm/entry_pt.h>
-#include <libm/cpu_features.h>
 
 //#include <libm/arch/zen.h>
 #include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
-typedef double  (*amd_tan_t)(double);
-typedef float   (*amd_tanf_t)(float);
-typedef __m128  (*amd_vrs4_tanf_t)(__m128);
-typedef __m256  (*amd_vrs8_tanf_t)(__m256);
+static const
+struct alm_arch_funcs __arch_funcs_tan = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_FMA3(tanf),
+            &FN_PROTOTYPE_REF(tan),
+            NULL,                           /* v4s ? */
+            NULL,                           /* v8s ? */
+            &FN_PROTOTYPE_FMA3(vrd2_tan),
+            NULL,                           /* v4d ? */
+        },
+
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(tanf),
+            &ALM_PROTO_ARCH_ZN2(tan),
+            &ALM_PROTO_ARCH_ZN2(vrs4_tanf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_tanf),
+            &ALM_PROTO_ARCH_ZN2(vrd2_tan),
+            &ALM_PROTO_ARCH_ZN2(vrd4_tan),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(tanf),
+            &ALM_PROTO_ARCH_ZN3(tan),
+            &ALM_PROTO_ARCH_ZN3(vrs4_tanf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_tanf),
+            &ALM_PROTO_ARCH_ZN3(vrd2_tan),
+            &ALM_PROTO_ARCH_ZN3(vrd4_tan),
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(tan)(void *arg)
 {
-    /*
-     * Should setup all variants,
-     * single, double, and vectors (also complex if available)
-     */
-    amd_tan_t        fn_d = NULL;
-    amd_tanf_t       fn_s = NULL;
-    amd_vrs4_tanf_t  fn_v4s = NULL;
-    amd_vrs8_tanf_t  fn_v8s = NULL;
-
-    static struct cpu_features *features = NULL;
-
-    if (!features) {
-        features = libm_cpu_get_features();
-    }
-
-    struct cpu_mfg_info *mfg_info = &features->cpu_mfg_info;
-
-    fn_d    = &FN_PROTOTYPE_REF(tan);
-    fn_s    = &FN_PROTOTYPE_FMA3(tanf);
-    fn_v4s  = &FN_PROTOTYPE_FMA3(vrs4_tanf);
-
-    if (CPU_HAS_AVX2(features) &&
-        CPU_FEATURE_AVX2_USABLE(features)) {
-	    //fn_d = &FN_PROTOTYPE_OPT(tan);
-	    fn_s = &FN_PROTOTYPE_OPT(tanf);
-     } else if (CPU_HAS_SSSE3(features) &&
-               CPU_FEATURE_SSSE3_USABLE(features)) {
-	    //fn_d = &FN_PROTOTYPE_BAS64(tan);
-    } else if (CPU_HAS_AVX(features) &&
-               CPU_FEATURE_AVX_USABLE(features)) {
-	    //fn_d = &FN_PROTOTYPE_BAS64(tan);
-    }
-
-    /*
-     * Template:
-     *     override with any micro-architecture-specific
-     *     implementations
-     */
-    if (mfg_info->mfg_type == CPU_MFG_AMD) {
-        switch(mfg_info->family) {
-        case 0x15:                      /* Naples */
-            //fn_s = &ALM_PROTO_ARCH_ZN(tanf);
-            break;
-        case 0x17:                      /* Rome */
-            fn_s = &ALM_PROTO_ARCH_ZN2(tanf);
-            fn_v4s = &ALM_PROTO_ARCH_ZN2(vrs4_tanf);
-            fn_v8s = &ALM_PROTO_ARCH_ZN2(vrs8_tanf);
-            break;
-        case 0x19:                      /* Milan */
-            fn_s = &ALM_PROTO_ARCH_ZN2(tanf);
-            fn_v4s = &ALM_PROTO_ARCH_ZN2(vrs4_tanf);
-            fn_v8s = &ALM_PROTO_ARCH_ZN2(vrs8_tanf);
-            break;
-        }
-    }
+    alm_ep_wrapper_t g_entry_tan = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(tanf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(tan),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_tanf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_tanf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_tan),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_tan),
+        },
+    };
 
-    G_ENTRY_PT_PTR(tan)       = fn_d;
-    G_ENTRY_PT_PTR(tanf)      = fn_s;
-    G_ENTRY_PT_PTR(vrs4_tanf) = fn_v4s;
-    G_ENTRY_PT_PTR(vrs8_tanf) = fn_v8s;
+    alm_iface_fixup(&g_entry_tan, &__arch_funcs_tan);
 }
 
diff --git a/src/iface/tanh.c b/src/iface/tanh.c
index ef2fb84..001b403 100644
--- a/src/iface/tanh.c
+++ b/src/iface/tanh.c
@@ -26,22 +26,61 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
+
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
 
+static const
+struct alm_arch_funcs __arch_funcs_tanh = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(tanhf),
+            &FN_PROTOTYPE_REF(tanh),
+            NULL,
+            NULL,                           /* v8s ? */
+            NULL,                           /* v2d ? */ 
+            NULL,                           /* v4d ? */
+        },
+
+        [ALM_UARCH_VER_ZEN2] = {
+            &ALM_PROTO_ARCH_ZN2(tanhf),
+            NULL, //&ALM_PROTO_ARCH_ZN2(tanh),
+            &ALM_PROTO_ARCH_ZN2(vrs4_tanhf),
+            &ALM_PROTO_ARCH_ZN2(vrs8_tanhf),
+            NULL, //&ALM_PROTO_ARCH_ZN2(vrd2_tanh),
+            NULL, //&ALM_PROTO_ARCH_ZN2(vrd4_tanh),
+        },
+
+        [ALM_UARCH_VER_ZEN3] = {
+            &ALM_PROTO_ARCH_ZN3(tanhf),
+            NULL, //&ALM_PROTO_ARCH_ZN3(tanh),
+            &ALM_PROTO_ARCH_ZN3(vrs4_tanhf),
+            &ALM_PROTO_ARCH_ZN3(vrs8_tanhf),
+            NULL, //&ALM_PROTO_ARCH_ZN3(vrd2_tanh),
+            NULL, //&ALM_PROTO_ARCH_ZN3(vrd4_tanh),
+        },
+    },
+};
 
 void
 LIBM_IFACE_PROTO(tanh)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(tanh) = &FN_PROTOTYPE_REF(tanh);
-
-	/* Single */
-	G_ENTRY_PT_PTR(tanhf) = &FN_PROTOTYPE_REF(tanhf);
+    alm_ep_wrapper_t g_entry_tanh = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(tanhf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(tanh),
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_tanhf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_tanhf),
+        //[ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_tanh),
+        //[ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_tanh),
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_tanh, &__arch_funcs_tanh);
 }
 
diff --git a/src/iface/tanpi.c b/src/iface/tanpi.c
index 24ebdbc..14ba7d5 100644
--- a/src/iface/tanpi.c
+++ b/src/iface/tanpi.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_tanpi = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_REF(tanpif),
+            &FN_PROTOTYPE_REF(tanpi),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(tanpif),
+            &FN_PROTOTYPE_FMA3(tanpi),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(tanpi)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(tanpi) = &FN_PROTOTYPE_REF(tanpi);
-
-	/* Single */
-	G_ENTRY_PT_PTR(tanpif) = &FN_PROTOTYPE_REF(tanpif);
+    alm_ep_wrapper_t g_entry_tanpi = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(tanpif),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(tanpi),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_tanpif),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_tanpif),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_tanpi),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_tanpi),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_tanpi, &__arch_funcs_tanpi);
 }
 
diff --git a/src/iface/trunc.c b/src/iface/trunc.c
index 8ee39a9..bff5111 100644
--- a/src/iface/trunc.c
+++ b/src/iface/trunc.c
@@ -26,22 +26,55 @@
  */
 
 #include <libm_macros.h>
-#include <libm/cpu_features.h>
-#include <libm/entry_pt.h>
+#include <libm/amd_funcs_internal.h>
 #include <libm/iface.h>
-#include <libm/amd_funcs_internal.h>    /* Contains all implementations */
+#include <libm/entry_pt.h>
 
+//#include <libm/arch/zen.h>
+#include <libm/arch/zen2.h>
+#include <libm/arch/zen3.h>
+
+static const
+struct alm_arch_funcs __arch_funcs_trunc = {
+    .def_arch = ALM_UARCH_VER_DEFAULT,
+    .funcs = {
+        [ALM_UARCH_VER_DEFAULT] = {
+            &FN_PROTOTYPE_BAS64(truncf),
+            &FN_PROTOTYPE_BAS64(trunc),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#if 0
+        [ALM_UARCH_VER_ZEN] = {
+            &FN_PROTOTYPE_FMA3(truncf),
+            &FN_PROTOTYPE_FMA3(trunc),
+            NULL,                           /* vrs4 ? */
+            NULL,                           /* vrs8 ? */
+            NULL,                           /* vrd2 ? */
+            NULL,                           /* vrd4 ? */
+        },
+#endif
+    }
+};
 
 void
 LIBM_IFACE_PROTO(trunc)(void *arg)
 {
-	/* Double */
-	G_ENTRY_PT_PTR(trunc) = &FN_PROTOTYPE_BAS64(trunc);
-
-	/* Single */
-	G_ENTRY_PT_PTR(truncf) = &FN_PROTOTYPE_BAS64(truncf);
+    alm_ep_wrapper_t g_entry_trunc = {
+       .g_ep = {
+        [ALM_FUNC_SCAL_SP]   = &G_ENTRY_PT_PTR(truncf),
+        [ALM_FUNC_SCAL_DP]   = &G_ENTRY_PT_PTR(trunc),
+#if 0
+        [ALM_FUNC_VECT_SP_4] = &G_ENTRY_PT_PTR(vrs4_truncf),
+        [ALM_FUNC_VECT_SP_8] = &G_ENTRY_PT_PTR(vrs8_truncf),
+        [ALM_FUNC_VECT_DP_2] = &G_ENTRY_PT_PTR(vrd2_trunc),
+        [ALM_FUNC_VECT_DP_4] = &G_ENTRY_PT_PTR(vrd4_trunc),
+#endif
+        },
+    };
 
-	/* Vector Double */
-	/* Vector Single */
+    alm_iface_fixup(&g_entry_trunc, &__arch_funcs_trunc);
 }
 
diff --git a/src/isa/SConscript b/src/isa/SConscript
index b6bc72e..0a44c68 100644
--- a/src/isa/SConscript
+++ b/src/isa/SConscript
@@ -44,13 +44,6 @@ e.Append(
     CPPDEFINES = ['AVX_XOP_FMA4_FMA3' ],
 )
 
-# The set of source files associated with this SConscript file.
-source = Glob('*.[cS]', exclude=['map.S'])	+ \
-    Glob('avx/gas/*.[cS]')    			+ \
-    Glob('avx2/gas/*.[cS]')   			+ \
-    Glob('fma4/gas/*.[cS]')   			+ \
-    Glob('avx512/gas/*.[cS]')
-
 asm_list = ['avx/gas', 'fma4/gas', 'avx512/gas']
 asm_objs = []
 
@@ -65,10 +58,10 @@ for asm_path in asm_list:
     asm_objs += new_env.StaticObject(srcs)
 
 avx2_objs = SConscript('avx2/SConscript',
-                           exports = {'env' : e},
-                           duplicate = 0,
-                           src_dir = '#src/isa/avx2',
-                           variant_dir = joinpath(builddir, 'optmized'))
+                       exports = {'env' : e},
+                       duplicate = 0,
+                       src_dir = '#src/isa/avx2',
+                       variant_dir = joinpath(builddir, 'optmized'))
 
 
 objs = asm_objs + avx2_objs
diff --git a/src/isa/avx2/SConscript b/src/isa/avx2/SConscript
index cf363c5..f918f32 100644
--- a/src/isa/avx2/SConscript
+++ b/src/isa/avx2/SConscript
@@ -41,6 +41,7 @@ incpaths = [
 
 e.Append(
     #CFLAGS = ['-O3', '-fPIC', '-flax-vector-conversions'],
+    CFLAGS = ['-O3', '-fPIC', '-mavx2'],
     CPPPATH = incpaths
 )
 
diff --git a/src/isa/avx2/cos.c b/src/isa/avx2/cos.c
new file mode 100644
index 0000000..c6b9a73
--- /dev/null
+++ b/src/isa/avx2/cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/cos.c"
diff --git a/src/isa/avx2/cosf.c b/src/isa/avx2/cosf.c
new file mode 100644
index 0000000..c5b3f07
--- /dev/null
+++ b/src/isa/avx2/cosf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/cosf.c"
diff --git a/src/isa/avx2/coshf.c b/src/isa/avx2/coshf.c
new file mode 100644
index 0000000..5dd4706
--- /dev/null
+++ b/src/isa/avx2/coshf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/coshf.c"
diff --git a/src/isa/avx2/exp.c b/src/isa/avx2/exp.c
new file mode 100644
index 0000000..17ba705
--- /dev/null
+++ b/src/isa/avx2/exp.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE  1
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/exp.c"
+
diff --git a/src/isa/avx2/exp2.c b/src/isa/avx2/exp2.c
new file mode 100644
index 0000000..12d5e2a
--- /dev/null
+++ b/src/isa/avx2/exp2.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/exp2.c"
diff --git a/src/isa/avx2/expf.c b/src/isa/avx2/expf.c
new file mode 100644
index 0000000..eab0358
--- /dev/null
+++ b/src/isa/avx2/expf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/expf.c"
diff --git a/src/isa/avx2/expm1f.c b/src/isa/avx2/expm1f.c
new file mode 100644
index 0000000..c15d041
--- /dev/null
+++ b/src/isa/avx2/expm1f.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE   1
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/expm1f.c"
+
diff --git a/src/isa/avx2/log.c b/src/isa/avx2/log.c
new file mode 100644
index 0000000..94b5595
--- /dev/null
+++ b/src/isa/avx2/log.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/log.c"
diff --git a/src/isa/avx2/logf.c b/src/isa/avx2/logf.c
new file mode 100644
index 0000000..d288bc7
--- /dev/null
+++ b/src/isa/avx2/logf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/logf.c"
diff --git a/src/isa/avx2/pow.c b/src/isa/avx2/pow.c
new file mode 100644
index 0000000..c496d2b
--- /dev/null
+++ b/src/isa/avx2/pow.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/pow.c"
diff --git a/src/isa/avx2/powf.c b/src/isa/avx2/powf.c
new file mode 100644
index 0000000..6efc057
--- /dev/null
+++ b/src/isa/avx2/powf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/powf.c"
diff --git a/src/isa/avx2/sin.c b/src/isa/avx2/sin.c
new file mode 100644
index 0000000..969e894
--- /dev/null
+++ b/src/isa/avx2/sin.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE  1
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/sin.c"
+
diff --git a/src/isa/avx2/sinf.c b/src/isa/avx2/sinf.c
new file mode 100644
index 0000000..7dadaee
--- /dev/null
+++ b/src/isa/avx2/sinf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/sinf.c"
diff --git a/src/isa/avx2/tan.c b/src/isa/avx2/tan.c
new file mode 100644
index 0000000..644a52f
--- /dev/null
+++ b/src/isa/avx2/tan.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/tan.c"
diff --git a/src/isa/avx2/tanf.c b/src/isa/avx2/tanf.c
new file mode 100644
index 0000000..cb4404e
--- /dev/null
+++ b/src/isa/avx2/tanf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h> 
+
+#include "../../optmized/tanf.c"
diff --git a/src/isa/avx2/tanhf.c b/src/isa/avx2/tanhf.c
new file mode 100644
index 0000000..651be80
--- /dev/null
+++ b/src/isa/avx2/tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/tanhf.c"
diff --git a/src/isa/avx2/vrd2_cos.c b/src/isa/avx2/vrd2_cos.c
new file mode 100644
index 0000000..d40bfa4
--- /dev/null
+++ b/src/isa/avx2/vrd2_cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd2_cos.c"
diff --git a/src/isa/avx2/vrd2_exp.c b/src/isa/avx2/vrd2_exp.c
new file mode 100644
index 0000000..c4d227d
--- /dev/null
+++ b/src/isa/avx2/vrd2_exp.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd2_exp.c"
diff --git a/src/isa/avx2/vrd2_log.c b/src/isa/avx2/vrd2_log.c
new file mode 100644
index 0000000..7ac1ae5
--- /dev/null
+++ b/src/isa/avx2/vrd2_log.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd2_log.c"
diff --git a/src/isa/avx2/vrd2_pow.c b/src/isa/avx2/vrd2_pow.c
new file mode 100644
index 0000000..f6d7be7
--- /dev/null
+++ b/src/isa/avx2/vrd2_pow.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd2_pow.c"
diff --git a/src/isa/avx2/vrd2_sin.c b/src/isa/avx2/vrd2_sin.c
new file mode 100644
index 0000000..cf03d4e
--- /dev/null
+++ b/src/isa/avx2/vrd2_sin.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd2_sin.c"
diff --git a/src/isa/avx2/vrd2_tan.c b/src/isa/avx2/vrd2_tan.c
new file mode 100644
index 0000000..3aae45f
--- /dev/null
+++ b/src/isa/avx2/vrd2_tan.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd2_tan.c"
diff --git a/src/isa/avx2/vrd4_cos.c b/src/isa/avx2/vrd4_cos.c
new file mode 100644
index 0000000..48f2c0d
--- /dev/null
+++ b/src/isa/avx2/vrd4_cos.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd4_cos.c"
diff --git a/src/isa/avx2/vrd4_exp.c b/src/isa/avx2/vrd4_exp.c
new file mode 100644
index 0000000..2bfd8ef
--- /dev/null
+++ b/src/isa/avx2/vrd4_exp.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd4_exp.c"
diff --git a/src/isa/avx2/vrd4_log.c b/src/isa/avx2/vrd4_log.c
new file mode 100644
index 0000000..137d1b8
--- /dev/null
+++ b/src/isa/avx2/vrd4_log.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd4_log.c"
diff --git a/src/isa/avx2/vrd4_pow.c b/src/isa/avx2/vrd4_pow.c
new file mode 100644
index 0000000..b9167d9
--- /dev/null
+++ b/src/isa/avx2/vrd4_pow.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd4_pow.c"
diff --git a/src/isa/avx2/vrd4_sin.c b/src/isa/avx2/vrd4_sin.c
new file mode 100644
index 0000000..baf2082
--- /dev/null
+++ b/src/isa/avx2/vrd4_sin.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd4_sin.c"
diff --git a/src/isa/avx2/vrd4_tan.c b/src/isa/avx2/vrd4_tan.c
new file mode 100644
index 0000000..7b166cc
--- /dev/null
+++ b/src/isa/avx2/vrd4_tan.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrd4_tan.c"
diff --git a/src/isa/avx2/vrs4_cosf.c b/src/isa/avx2/vrs4_cosf.c
new file mode 100644
index 0000000..adbbcf2
--- /dev/null
+++ b/src/isa/avx2/vrs4_cosf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_cosf.c"
diff --git a/src/isa/avx2/vrs4_coshf.c b/src/isa/avx2/vrs4_coshf.c
new file mode 100644
index 0000000..f3e21f2
--- /dev/null
+++ b/src/isa/avx2/vrs4_coshf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_coshf.c"
diff --git a/src/isa/avx2/vrs4_expf.c b/src/isa/avx2/vrs4_expf.c
new file mode 100644
index 0000000..db3b4a8
--- /dev/null
+++ b/src/isa/avx2/vrs4_expf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_expf.c"
diff --git a/src/isa/avx2/vrs4_logf.c b/src/isa/avx2/vrs4_logf.c
new file mode 100644
index 0000000..fdc9945
--- /dev/null
+++ b/src/isa/avx2/vrs4_logf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_logf.c"
diff --git a/src/isa/avx2/vrs4_powf.c b/src/isa/avx2/vrs4_powf.c
new file mode 100644
index 0000000..cba4a26
--- /dev/null
+++ b/src/isa/avx2/vrs4_powf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_powf.c"
diff --git a/src/isa/avx2/vrs4_sinf.c b/src/isa/avx2/vrs4_sinf.c
new file mode 100644
index 0000000..69cbc83
--- /dev/null
+++ b/src/isa/avx2/vrs4_sinf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_sinf.c"
diff --git a/src/isa/avx2/vrs4_tanf.c b/src/isa/avx2/vrs4_tanf.c
new file mode 100644
index 0000000..1d03bb7
--- /dev/null
+++ b/src/isa/avx2/vrs4_tanf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/vec/vrs4_tanf.c"
diff --git a/src/isa/avx2/vrs4_tanhf.c b/src/isa/avx2/vrs4_tanhf.c
new file mode 100644
index 0000000..205cf7b
--- /dev/null
+++ b/src/isa/avx2/vrs4_tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs4_tanhf.c"
diff --git a/src/isa/avx2/vrs8_cosf.c b/src/isa/avx2/vrs8_cosf.c
new file mode 100644
index 0000000..46a287f
--- /dev/null
+++ b/src/isa/avx2/vrs8_cosf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs8_cosf.c"
diff --git a/src/isa/avx2/vrs8_coshf.c b/src/isa/avx2/vrs8_coshf.c
new file mode 100644
index 0000000..d9874bc
--- /dev/null
+++ b/src/isa/avx2/vrs8_coshf.c
@@ -0,0 +1,4 @@
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs8_coshf.c"
diff --git a/src/isa/avx2/vrs8_expf.c b/src/isa/avx2/vrs8_expf.c
new file mode 100644
index 0000000..7b0853c
--- /dev/null
+++ b/src/isa/avx2/vrs8_expf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1 
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/vec/vrs8_expf.c"
diff --git a/src/isa/avx2/vrs8_logf.c b/src/isa/avx2/vrs8_logf.c
new file mode 100644
index 0000000..4ecbc03
--- /dev/null
+++ b/src/isa/avx2/vrs8_logf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/vec/vrs8_logf.c"
diff --git a/src/isa/avx2/vrs8_powf.c b/src/isa/avx2/vrs8_powf.c
new file mode 100644
index 0000000..527b08c
--- /dev/null
+++ b/src/isa/avx2/vrs8_powf.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+
+#include "../../optmized/vec/vrs8_powf.c"
diff --git a/src/isa/avx2/vrs8_sinf.c b/src/isa/avx2/vrs8_sinf.c
new file mode 100644
index 0000000..b3079b1
--- /dev/null
+++ b/src/isa/avx2/vrs8_sinf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs8_sinf.c"
diff --git a/src/isa/avx2/vrs8_tanf.c b/src/isa/avx2/vrs8_tanf.c
new file mode 100644
index 0000000..e09e3f0
--- /dev/null
+++ b/src/isa/avx2/vrs8_tanf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs8_tanf.c"
diff --git a/src/isa/avx2/vrs8_tanhf.c b/src/isa/avx2/vrs8_tanhf.c
new file mode 100644
index 0000000..baa53d9
--- /dev/null
+++ b/src/isa/avx2/vrs8_tanhf.c
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#define ALM_OVERRIDE 1
+
+#include <libm/arch/avx2.h>
+#include "../../optmized/vec/vrs8_tanhf.c"
diff --git a/src/libm_special.c b/src/libm_special.c
index 6c292a2..35e25b1 100644
--- a/src/libm_special.c
+++ b/src/libm_special.c
@@ -252,12 +252,19 @@ float _tanf_special(float x)
 
 	UT32 xu = {.f32 = x};
 	if ((xu.u32 & ~SIGNBIT_SP32) < 0x39000000) {
-		__amd_handle_errorf("tanf", __amd_tan, xu.u32, _UNDERFLOW, AMD_F_UNDERFLOW, 
+		__amd_handle_errorf("tanf", __amd_tan, xu.u32, _UNDERFLOW, AMD_F_UNDERFLOW,
 					ERANGE, x, 0.0F, 1);
 	}
 	return _sinf_cosf_special(x, "tanf", __amd_tan);
 }
 
+float _tanhf_special(float x)
+{
+    UT32 xu = {.f32 = x};
+    return __amd_handle_errorf("tanhf", __amd_tanh, xu.u32, _UNDERFLOW,
+                                AMD_F_INEXACT|AMD_F_UNDERFLOW, ERANGE, x, 0.0, 1);
+}
+
 double _fabs_special(double x)
 {
 	UT64 xu;
diff --git a/src/optmized/cos.c b/src/optmized/cos.c
new file mode 100644
index 0000000..d501222
--- /dev/null
+++ b/src/optmized/cos.c
@@ -0,0 +1,319 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   double cos(double x)
+ *
+ * Spec:
+ *   cos(0)    = 1
+ *   cos(-0)   = -1
+ *   cos(inf)  = NaN
+ *   cos(-inf) = NaN
+ *
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ *
+ * checks for special cases
+ * if ( ux = infinity) raise overflow exception and return x
+ * if x is NaN then raise invalid FP operation exception and return x.
+ *
+ * 1. Argument reduction
+ * if |x| > 5e5 then
+ *      __amd_remainder_piby2(x, &r, &rr, &region)
+ * else
+ *      Argument reduction
+ *      Let z = |x| * 2/pi
+ *      z = dn + r, where dn = round(z)
+ *      rhead =  dn * pi/2_head
+ *      rtail = dn * pi/2_tail
+ *      r = z – dn = |x| - rhead – rtail
+ *      expdiff = exp(dn) – exp(r)
+ *      if(expdiff) > 15)
+ *      rtail = |x| - dn*pi/2_tail2
+ *      r = |x| -  dn*pi/2_head -  dn*pi/2_tail1 -  dn*pi/2_tail2  - (((rhead + rtail) – rhead )-rtail)
+ * rr = (|x| – rhead) – r + rtail
+ *
+ * 2. Polynomial approximation
+ * if(dn is even)
+ *       rr = rr * r;
+ *       x4 = x2 * x2;
+ *       s = 0.5 * x2;
+ *       t =  s - 1.0;
+ *       poly = x4 * (C1 + x2 * (C2 + x2 * (C3 + x2 * (C4 + x2 * (C5 + x2 * x6)))))
+ *       r = (((1.0 + t) - s) - rr) + poly – t
+ * else
+ *       x3 = x2 * r
+ *       poly = S2 + (r2 * (S3 + (r2 * (S4 + (r2 * (S5 + S6 * r2))))))
+ *       r = r - ((x2 * (0.5*rr - x3 * poly)) - rr) - S1 * x3
+ * if((sign + 1) & 2)
+ *       return r
+ * else
+ *       return -r;
+
+ * if |x| < pi/4 && |x| > 2.0^(-13)
+ *   r = 0.5 * x2;
+ *   t = 1 - r;
+ *   cos(x) = t + ((1.0 - t) - r) + (x*x * (x*x * C1 + C2*x*x + C3*x*x
+ *             + C4*x*x +x*x*C5 + x*x*C6)))
+ *
+ * if |x| < 2.0^(-13) && |x| > 2.0^(-27)
+ *   cos(x) = 1.0 - x*x*0.5;;
+ *
+ * else return 1.0
+ ******************************************
+*/
+
+#include <stdint.h>
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+    const double twobypi, piby2_1, piby2_1tail, invpi, pi, pi1, pi2;
+    const double piby2_2, piby2_2tail, ALM_SHIFT;
+    const double one_by_six;
+    double poly_sin[7];
+    double poly_cos[6];
+ } cos_data = {
+     .ALM_SHIFT = 0x1.8p+52,
+     .one_by_six = 0.1666666666666666666,
+     .twobypi = 0x1.45f306dc9c883p-1,
+     .piby2_1 = 0x1.921fb54400000p0,
+     .piby2_1tail = 0x1.0b4611a626331p-34,
+     .piby2_2 = 0x1.0b4611a600000p-34,
+     .piby2_2tail = 0x1.3198a2e037073p-69,
+     .pi = 0x1.921fb54442d18p1,
+     .pi1 = 0x1.921fb50000000p1,
+     .pi2 = 0x1.110b4611a6263p-25,
+     .invpi = 0x1.45f306dc9c883p-2,
+     /*
+      * Polynomial coefficients
+      */
+     .poly_sin = {
+         -0x1.5555555555555p-3,
+         0x1.1111111110bb3p-7,
+         -0x1.a01a019e83e5cp-13,
+         0x1.71de3796cde01p-19,
+         -0x1.ae600b42fdfa7p-26,
+         0x1.5e0b2f9a43bb8p-33
+     },
+
+     .poly_cos = {
+         0x1.5555555555555p-5,   /* 0.0416667 */
+         -0x1.6c16c16c16967p-10, /* -0.00138889 */
+         0x1.A01A019F4EC91p-16,  /* 2.48016e-005 */
+         -0x1.27E4FA17F667Bp-22, /* -2.75573e-007 */
+         0x1.1EEB690382EECp-29,  /* 2.08761e-009 */
+         -0x1.907DB47258AA7p-37  /* -1.13826e-011 */
+     },
+};
+
+void __amd_remainder_piby2(double x, double *r, double *rr, int *region);
+
+#define pi          cos_data.pi
+#define pi1         cos_data.pi1
+#define pi2         cos_data.pi2
+#define invpi       cos_data.invpi
+#define TwobyPI     cos_data.twobypi
+#define PIby2_1     cos_data.piby2_1
+#define PIby2_1tail cos_data.piby2_1tail
+#define PIby2_2     cos_data.piby2_2
+#define PIby2_2tail cos_data.piby2_2tail
+#define PIby4       0x3fe921fb54442d18
+#define FiveE6      0x415312d000000000
+#define ONE_BY_SIX  cos_data.one_by_six
+#define ALM_SHIFT   cos_data.ALM_SHIFT
+
+#define S1  cos_data.poly_sin[0]
+#define S2  cos_data.poly_sin[1]
+#define S3  cos_data.poly_sin[2]
+#define S4  cos_data.poly_sin[3]
+#define S5  cos_data.poly_sin[4]
+#define S6  cos_data.poly_sin[5]
+
+#define C1  cos_data.poly_cos[0]
+#define C2  cos_data.poly_cos[1]
+#define C3  cos_data.poly_cos[2]
+#define C4  cos_data.poly_cos[3]
+#define C5  cos_data.poly_cos[4]
+#define C6  cos_data.poly_cos[5]
+
+#define SIGN_MASK   0x7FFFFFFFFFFFFFFF /* Infinity */
+#define INF         0x7ff0000000000000
+#define SIGN_MASK32 0x7FFFFFFF
+#define COS_SMALL   0x3f20000000000000  /* 2.0^(-13) */
+#define COS_SMALLER 0X3e40000000000000  /* 2.0^(-27) */
+
+
+double _cos_special(double x);
+
+double
+ALM_PROTO_OPT(cos)(double x)
+{
+
+    double r, rr, poly, x2, t, s;
+    double rhead, rtail, x3, x4;
+    uint64_t uy;
+    int32_t region;
+
+    /* cos(inf) = cos(-inf) = cos(NaN) = NaN */
+
+    uint64_t ux = asuint64(x);
+
+    ux = ux & SIGN_MASK;
+
+    if(unlikely((ux  & SIGN_MASK) >= INF)) {
+        /* infinity or NaN */
+        return _cos_special(x);
+    }
+
+    if(ux > PIby4){
+
+        x = asdouble(ux);
+        /* ux > pi/4 */
+        if(ux < FiveE6){
+            /* reduce  the argument to be in a range from -pi/4 to +pi/4
+                by subtracting multiples of pi/2 */
+
+            r = TwobyPI * x; /* x * two_by_pi*/
+
+            int32_t xexp = ux >> 52;
+
+            double npi2d = r + ALM_SHIFT;
+
+            int64_t npi2 = asuint64(npi2d);
+
+            npi2d -= ALM_SHIFT;
+
+            rhead  = x - npi2d * PIby2_1;
+
+            rtail  = npi2d * PIby2_1tail;
+
+            r = rhead - rtail;
+
+            uy = asuint64(r);
+
+            int64_t expdiff = xexp - ((uy << 1) >> 53);
+
+            region = npi2;
+
+            if (expdiff  > 15) {
+
+                t = rhead;
+
+                rtail =  npi2d * PIby2_2;
+
+                rhead = t- rtail;
+
+                rtail  = npi2d * PIby2_2tail - ((t - rhead) - rtail);
+
+                r = rhead - rtail;
+            }
+
+            rr = (rhead - r) - rtail;
+        }
+        else {
+            // Reduce x into range [-pi/4,pi/4]
+            __amd_remainder_piby2(x, &r, &rr, &region);
+        }
+
+        x2 = r * r;
+
+        if(region & 1) {
+
+            /*if region 1 or 3 then sin region */
+
+            x3 = x2 * r;
+
+            /* poly = S2 + (r2 * (S3 + (r2 * (S4 + (r2 * (S5 + S6 * r2)))))) */
+            poly = POLY_EVAL_5(x2, S2, S3, S4, S5, S6);
+
+            s = 0.5 * rr;
+
+            poly = ((x2 * (s - x3 * poly)) - rr) - S1 * x3;
+
+            r -= poly; /* r - ((r2 * (0.5 * rr - x3 * poly) - rr) - S1*r3 */
+
+        }
+        else {
+            /* region 0 or 2 do a cos calculation */
+            rr = rr * r;
+
+            x4 = x2 * x2;
+
+            s = 0.5 * x2;
+
+            t =  s - 1.0;
+
+            /* poly = x4 * (C1 + x2 * (C2 + x2 * (C3 + x2 * (C4 + x2 * (C5 + x2 * x6))))) */
+            poly = x4 * POLY_EVAL_6(x2, C1, C2, C3, C4, C5, C6);
+
+            r = (((1.0 + t) - s) - rr) + poly;
+
+            r -= t;
+
+        }
+
+        region += 1;
+
+        if(region & 2) {
+
+            return -r;
+
+        }
+
+        return r;
+    }
+    else if(ux >= COS_SMALL) {
+        /* pi/4 > |x| > 2.0^(-13) */
+        x2 = x * x;
+
+        r = 0.5 * x2;
+
+        t = 1 - r;
+
+        s = t + ((1.0 - t) - r);
+
+        return s + (x2 * (x2 * POLY_EVAL_6(x2, C1, C2, C3, C4, C5, C6)));
+
+    }
+    else if(ux >= COS_SMALLER){
+        /* if 2.0^(-13) > |x| > 2.0^(-27) */
+        return 1.0 - (x * x * 0.5);
+
+    }
+
+    return 1.0;
+}
diff --git a/src/optmized/cosf.c b/src/optmized/cosf.c
index 42b8ceb..17c2349 100644
--- a/src/optmized/cosf.c
+++ b/src/optmized/cosf.c
@@ -31,146 +31,276 @@
  *   float cosf(float x)
  *
  * Spec:
- *  cosf(0)    = 1
- *  cosf(-0)   = 1
- *  cosf(inf)  = NaN
- *  cosf(-inf) = NaN
+ *   cos(0)    = 1
+ *   cos(-0)   = -1
+ *   cos(inf)  = NaN
+ *   cos(-inf) = NaN
  *
  *
  ******************************************
  * Implementation Notes
  * ---------------------
- * To compute cosf(float x)
- * Using the identity,
- * cos(x) = sin(x + pi/2)           (1)
  *
- * 1. Argument Reduction
- *      Adding pi/2 to x, x is now x + pi/2
- *      Now, let x be represented as,
- *          |x| = N * pi + f        (2) | N is an integer,
- *                                        -pi/2 <= f <= pi/2
+ * Checks for special cases
+ * if ( ux = infinity) raise overflow exception and return x
+ * if x is NaN then raise invalid FP operation exception and return x.
  *
- *      From (2), N = int(x / pi)
- *                f = |x| - (N * pi)
+ * 1. Argument reduction
+ * if |x| > 5e5 then
+ *      __amd_remainder_piby2d2f((uint64_t)x, &r, &region)
+ * else
+ *      Argument reduction
+ *      Let z = |x| * 2/pi
+ *      z = dn + r, where dn = round(z)
+ *      rhead =  dn * pi/2_head
+ *      rtail = dn * pi/2_tail
+ *      r = z – dn = |x| - rhead – rtail
+ *      expdiff = exp(dn) – exp(r)
+ *      if(expdiff) > 15)
+ *      rtail = |x| - dn*pi/2_tail2
+ *      r = |x| -  dn*pi/2_head -  dn*pi/2_tail1
+ *          -  dn*pi/2_tail2  - (((rhead + rtail) – rhead )-rtail)
  *
- * 2. Polynomial Evaluation
- *       From (1) and (2),sin(f) can be calculated using a polynomial
- *       sin(f) = f*(1 + C1*f^2 + C2*f^4 + C3*f^6 + c4*f^8)
+ * 2. Polynomial approximation
+ * if(dn is even)
+ *       x4 = x2 * x2;
+ *       s = 0.5 * x2;
+ *       t =  1.0 - s;
+ *       poly = x4 * (C1 + x2 * (C2 + x2 * (C3 + x2 * C4 )))
+ *       r = t + poly
+ * else
+ *       x3 = x2 * r
+ *       poly = x3 * (S1 + x2 * (S2 + x2 * (S3 + x2 * S4)))
+ *       r = r + poly
+ * if((sign + 1) & 2)
+ *       return r
+ * else
+ *       return -r;
  *
- * 3. Reconstruction
- *      Hence, cos(x) = sin(x + pi/2) = (-1)^N * sin(f)
+ * if |x| < pi/4 && |x| > 2.0^(-13)
+ *   r = 0.5 * x2;
+ *   t = 1 - r;
+ *   cos(x) = t + ((1.0 - t) - r) + (x*x * (x*x * C1 + C2*x*x + C3*x*x
+ *             + C4*x*x +x*x*C5 + x*x*C6)))
  *
- * MAX ULP of current implementation : 1
+ * if |x| < 2.0^(-13) && |x| > 2.0^(-27)
+ *   cos(x) = 1.0 - x*x*0.5;;
+ *
+ * else return 1.0
+ ******************************************
  */
 
 #include <stdint.h>
-
 #include <libm_util_amd.h>
 #include <libm_special.h>
 #include <libm_macros.h>
-
 #include <libm/types.h>
 #include <libm/typehelper.h>
 #include <libm/compiler.h>
 #include <libm/poly.h>
 
 static struct {
+                const double piby2_1, piby2_1tail;
+                const double piby2_2, piby2_2tail;
+                const double twobypi, alm_shift;
+                double poly_sin[4];
+                double poly_cos[4];
+                } cosf_data = {
+                                .alm_shift = 0x1.8p+52,
+                                .twobypi = 0x1.45f306dc9c883p-1,
+                                .piby2_1 = 0x1.921fb54400000p0,
+                                .piby2_1tail = 0x1.0b4611a626331p-34,
+                                .piby2_2 = 0x1.0b4611a600000p-34,
+                                .piby2_2tail = 0x1.3198a2e037073p-69,
+                                /*
+                                 * Polynomial coefficients
+                                 */
+                                .poly_sin = {
+                                                -0x1.5555555555555p-3,
+                                                0x1.1111111110bb3p-7,
+                                                -0x1.a01a019e83e5cp-13,
+                                                0x1.71de3796cde01p-19,
+                                            },
 
-            double poly_cosf[4];
-            double half_pi, inv_pi, pi_head, pi_tail;
-            } cosf_data = {
-                            .half_pi = 0x1.921fb54442d18p0,
-                            .pi_head = 0x1.921fb50000000p1,
-                            .pi_tail = 0x1.110b4611a6263p-25,
-                            .inv_pi  = 0x1.45f306dc9c883p-2,
-              .poly_cosf = {
-                            -0x1.55554d018df8bp-3,
-                            0x1.110f0293a5dcbp-7,
-                            -0x1.9f781a0aebdb9p-13,
-                            0x1.5e2a3e7550c85p-19,
-                           },
-    };
-
-#define HALF_PI cosf_data.half_pi
-#define INV_PI  cosf_data.inv_pi
-#define PI_HEAD cosf_data.pi_head
-#define PI_TAIL cosf_data.pi_tail
-
-#define C1 cosf_data.poly_cosf[0]
-#define C2 cosf_data.poly_cosf[1]
-#define C3 cosf_data.poly_cosf[2]
-#define C4 cosf_data.poly_cosf[3]
-
-#define SIGN_MASK 0x7FFFFFFFFFFFFFFF
-#define SIGN_MASK32 0x7FFFFFFF
+                                .poly_cos = {
+                                                0x1.5555555555555p-5,
+                                                -0x1.6c16c16c16967p-10,
+                                                0x1.A01A019F4EC91p-16,
+                                                -0x1.27E4FA17F667Bp-22,
+                                            },
+                };
 
-float _cosf_special(float x);
-double _cos_special_underflow(double x);
 
-static inline uint32_t abstop12(float x)
-{
-    return(asuint32(x) & SIGN_MASK32) >> 20;
-}
+void __amd_remainder_piby2d2f(uint64_t x, double *r, int *region);
+
+#define COSF_PIBY2_1     cosf_data.piby2_1
+#define COSF_PIBY2_1TAIL cosf_data.piby2_1tail
+#define COSF_PIBY2_2     cosf_data.piby2_2
+#define COSF_PIBY2_2TAIL cosf_data.piby2_2tail
+#define COSF_TWO_BY_PI   cosf_data.twobypi
+#define COSF_ALM_SHIFT   cosf_data.alm_shift
+
+#define COSF_PIBY4       0x3F490FDB
+#define COSF_FIVE_E6     0x4A989680
+
+#define S1  cosf_data.poly_sin[0]
+#define S2  cosf_data.poly_sin[1]
+#define S3  cosf_data.poly_sin[2]
+#define S4  cosf_data.poly_sin[3]
+
+#define C1  cosf_data.poly_cos[0]
+#define C2  cosf_data.poly_cos[1]
+#define C3  cosf_data.poly_cos[2]
+#define C4  cosf_data.poly_cos[3]
+
+#define SIGN_MASK32  0x7FFFFFFF
+#define COSF_SMALL   0x3C000000 /* 2.0^(-13) */
+#define COSF_SMALLER 0x39000000 /* 2.0^(-27) */
+
+
+float _cosf_special(float x);
 
 float
 ALM_PROTO_OPT(cosf)(float x)
 {
 
-    double dinput,frac,poly,result;
-    uint64_t ixd;
+    double r, rhead, rtail;
+    double xd, x2, x3, x4;
+    double poly, t, s;
+    uint64_t uy;
+    int32_t region;
+
+    /* cos(inf) = cos(-inf) = cos(NaN) = NaN */
 
+    /* Get absolute value of input x */
     uint32_t ux = asuint32(x);
+    ux = ux & SIGN_MASK32;
+
+    if(unlikely(ux >= PINFBITPATT_SP32)) {
+        /* infinity or NaN */
+        return _cosf_special(x);
+    }
+
+    /* ux > pi/4 */
+    if(ux > COSF_PIBY4){
+
+        float ax = asfloat(ux);
+
+        /* Convert input to double precision */
+        xd = (double)ax;
+
+        if(ux < COSF_FIVE_E6){
+            /* reduce  the argument to be in a range from -pi/4 to +pi/4
+                by subtracting multiples of pi/2 */
+
+            /* |x| * 2/pi */
+            r = COSF_TWO_BY_PI * xd;
+
+            /* Get the exponent part */
+            int32_t xexp = ux >> 23;
+
+            /* dn = int(|x| * 2/pi) */
+            double npi2d = r + COSF_ALM_SHIFT;
+            int64_t npi2 = asuint64(npi2d);
+            npi2d -= COSF_ALM_SHIFT;
 
-    // Check for special cases
-    if(unlikely((ux - asuint32(0x1p-126)) > (0x7f800000 - asuint32(0x1p-126)))) {
+            /* rhead = x - dn * pi/2_head */
+            rhead  = xd - npi2d * COSF_PIBY2_1;
+
+            /* rtail = dn * pi/2_tail */
+            rtail  = npi2d * COSF_PIBY2_1TAIL;
+
+            /* r = |x| * 2/pi - dn */
+            r = rhead - rtail;
+
+            uy = asuint64(r);
+
+            /* expdiff = exponent(dn) – exponent(r) */
+            int64_t expdiff = xexp - ((uy << 1) >> 53);
+
+            region = npi2;
+
+            if (expdiff  > 15) {
+
+                t = rhead;
+
+                /* rtail = |x| - dn*pi/2_tail2 */
+                rtail =  npi2d * COSF_PIBY2_2;
+
+                /* r = |x| -  dn*pi/2_head -  dn*pi/2_tail1
+                 *     -  dn*pi/2_tail2  - (((rhead + rtail)
+                 *     – rhead )-rtail)
+                 */
+                rhead = t - rtail;
+                rtail  = npi2d * COSF_PIBY2_2TAIL - ((t - rhead) - rtail);
+                r = rhead - rtail;
+            }
 
-        if((ux  & SIGN_MASK32) >= 0x7f800000) {
-            // infinity or NaN
-            return _sinf_cosf_special(x, "cosf", __amd_cos);
         }
+        else {
 
-        if(abstop12(x) < abstop12(0x1p-126)) {
-            // Underflow
-             _sinf_cosf_special_underflow(x, "cosf", __amd_cos);
-             return x;
+            /* Reduce x into range [-pi/4,pi/4] */
+            __amd_remainder_piby2d2f(asuint64(xd), &r, &region);
         }
-    }
 
-    // Convert input to double precision
-    dinput = (double)x;
-    ixd = asuint64(dinput);
+        x2 = r * r;
 
-    // Remove sign from input
-    dinput = asdouble(ixd & SIGN_MASK);
+        if(region & 1) {
 
-    const double_t ALM_HUGE = 0x1.8000000000000p52;
+            /*if region 1 or 3 then sin region */
+            x3 = x2 * r;
 
-    // x + pi/2
-    dinput = dinput + HALF_PI;
+            /* poly = x3 * (S1 + x2 * (S2 + x2 * (S3 + x2 * S4))) */
+            r +=  x3 * POLY_EVAL_3(x2, S1, S2, S3, S4);
 
-    // Get n = int (x/pi)
-    double dn  = (dinput * INV_PI) + ALM_HUGE;
-    uint64_t n = asuint64(dn);
-    dn = dn - ALM_HUGE;
+        }
+        else {
+
+            /* region 0 or 2 do a cos calculation */
+            x4 = x2 * x2;
+            s = 0.5 * x2;
+            t =  1.0 - s;
 
-    // frac = x - (n*pi)
-    frac = dinput - (dn * PI_HEAD);
-    frac = frac - (dn * PI_TAIL);
+            /* poly = x4 * (C1 + x2 * (C2 + x2 * (C3 + x2 * C4))) */
+            poly = x4 * POLY_EVAL_3(x2, C1, C2, C3, C4);
+            r = t + poly;
 
-    // Check if n is odd or not
-    uint64_t odd = n << 63;
+        }
 
-    /* Compute sin(f) using the polynomial
-       x*(1+C1*x^2+C2*x^4+C3*x^6+C4*x^8)
-    */
-    poly = POLY_EVAL_ODD_9(frac, 1.0, C1, C2, C3, C4);
+        region += 1;
 
-    // If n is odd, result is negative
-    if(odd)
-        result = -poly;
-    else
-        result = poly;
+        if(region & 2) {
 
-    return (float)result;
+            /* If region is 2 or 3, sign is -ve */
+            return (float)-r;
+
+        }
+
+        return (float)(r);
+    }
+    /* if |x| < 2.0^(-13) && |x| > 2.0^(-27) */
+    else if(ux >= COSF_SMALLER) {
+
+         /* if |x| < pi/4 && |x| > 2.0^(-13) */
+         if(ux >= COSF_SMALL) {
+
+            /* r = 0.5 * x2 */
+            x2 = x * x;
+            r = 0.5 * x2;
+
+            t = 1 - r;
+
+            /* cos(x) = t + ((1.0 - t) - r) + (x2 * (x2 * C1 + C2 * x2 + C3 * x2
+             *          + C4 * x2 ))
+             */
+            s = t + ((1.0f - t) - r);
+            return s + (x2 * (x2 * POLY_EVAL_4(x2, C1, C2, C3, C4)));
+
+        }
+
+        /* cos(x) = 1.0 - x * x* 0.5 */
+        return 1.0f - (x * x * 0.5);
+    }
 
+    return 1.0f;
 }
diff --git a/src/optmized/coshf.c b/src/optmized/coshf.c
new file mode 100644
index 0000000..f102c9e
--- /dev/null
+++ b/src/optmized/coshf.c
@@ -0,0 +1,190 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   float coshf(float x)
+ *
+ * Spec:
+ *   coshf(|x| > 89.415985107421875) = Infinity
+ *   coshf(Infinity)  = infinity
+ *   coshf(-Infinity) = infinity
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ *
+ * cosh(x) = (exp(x) + exp(-x))/2
+ * cosh(-x) = +cosh(x)
+ *
+ * checks for special cases
+ * if ( asint(x) > infinity) return x with overflow exception and
+ * return x.
+ * if x is NaN then raise invalid FP operation exception and return x.
+ *
+ * if x < 0x1p-11
+ *  coshf(x) = 1+1/2*x*x
+ * if 0x1p-11 < x < 0x1.62e43p-2
+ *
+ *  coshf = C0 + Y*Y*(C1 + Y*Y*(C2 + Y*Y*C3))
+ * if 0x1.62e43p-2 < x < 8.5
+ *  coshf = 0.5 * (exp(x) + 1/exp(x))
+ *
+ * if 8.5 < x < 0x1.62e42ep6
+ *  coshf = 0.5 * exp(x)
+ *
+ * if 0x1.62e42ep6 < x
+ *  coshf = v/2 * exp(x - log(v)) where v = 0x1.0000e8p-1
+ *
+ */
+
+#include "libm_util_amd.h"
+#include "libm_inlines_amd.h"
+#include "libm_special.h"
+
+#include <stdint.h>
+#include <libm_macros.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+//#include <libm/poly-vec.h>
+
+static struct {
+    uint32_t arg_max, infinity;
+    float logV, invV2, halfV, halfVm1;
+    float theeps, xc, ybar, wmax;
+    float poly_coshf[4];
+    float half, t1;
+ } coshf_data = {
+        .arg_max = 0x42B2D4FC,
+        .infinity = 0x7F800000,
+        .logV = 0x1.62e6p-1,
+        .invV2 =  0x1.fffc6p-3,
+        .halfVm1 = 0x1.d0112ep-17,
+        .halfV = 0x1.0000e8p0,
+        .theeps = 0x1p-11,
+        .xc = 0x1.62e43p-2,
+        .ybar =  0x1.62e42ep6,
+        .wmax =  0x1.62e0f2p6,
+        .half = 0x1p-1,
+        .t1 = 0x1p-1,
+        .poly_coshf = {
+            0x1p+0,
+            0x1p-1,
+            0x1.555466p-5,
+            0x1.6da5e2p-10,
+        },
+};
+
+#define C0 coshf_data.poly_coshf[0]
+#define C1 coshf_data.poly_coshf[1]
+#define C2 coshf_data.poly_coshf[2]
+#define C3 coshf_data.poly_coshf[3]
+
+#define LOGV    coshf_data.logV
+#define INVV2   coshf_data.invV2
+#define HALFVM1 coshf_data.halfVm1
+#define HALFV   coshf_data.halfV
+#define THEEPS  coshf_data.theeps
+#define XC      coshf_data.xc
+#define YBAR    coshf_data.ybar
+#define WMAX    coshf_data.wmax
+#define HALF    coshf_data.half
+#define T1      coshf_data.t1
+#define INF     coshf_date.infinity
+#define ARG_MAX coshf_data.arg_max
+
+float ALM_PROTO(expf)(float);
+
+float ALM_PROTO_OPT(coshf)(float x)
+{
+
+    float y, w, z, r, result;
+
+    uint32_t ux = asuint32(x) & 0x7FFFFFFF;
+
+    y = asfloat(ux);
+
+    if(unlikely(ux > ARG_MAX)) {
+
+        if (ux > PINFBITPATT_SP32) /* |x| is a NaN? */{
+
+            return x + x;
+
+        }
+        else {
+            /* x is infinity */
+            return x / 0.0;
+
+        }
+
+    }
+
+    if(ux <= asuint32(THEEPS)) {
+
+        return (1.0 + T1 * y * y);
+
+    }
+
+    if(ux > asuint32(8.5)) {
+
+        if(y > YBAR) {
+
+            w = y - LOGV;
+
+            z = ALM_PROTO(expf)(w);
+
+            return HALFV * z;
+        }
+
+        z = ALM_PROTO(expf)(y);
+
+        return (HALF * z);
+    }
+    else {
+        /*if(y > THEEPS)*/
+        if(y > XC) {
+
+            z = ALM_PROTO(expf)(y);
+
+            return HALF * (z + (1.0 / z));
+        }
+
+        /* coshf(x) = C0 + y*y*(C1 + y*y*(C2 + y*y*C3))  */
+        r = y * y;
+
+        result = C0 + r * (C1 + r * (C2 + r * C3));
+
+        return (result);
+
+    }
+
+}
+
+
diff --git a/src/optmized/expf.c b/src/optmized/expf.c
index 0b581f8..015d069 100644
--- a/src/optmized/expf.c
+++ b/src/optmized/expf.c
@@ -75,12 +75,14 @@
 
 #include "expf_data.h"
 
+
+
 static const struct expf_data expf_v2_data = {
     .ln2by_tblsz = 0x1.62e42fefa39efp-7,
     .tblsz_byln2 = 0x1.71547652b82fep+6,
     .Huge = 0x1.8000000000000p+52,
 #if EXPF_N == 6
-    //.table_v3 = __two_to_jby64,
+    .table_v3 = __two_to_jby64,
 #elif EXPF_N == 5
     .table_v3 = &__two_to_jby32,
 #endif
@@ -101,7 +103,7 @@ static const struct expf_data expf_v2_data = {
 #define EXPF_LN2_BY_TBLSZ  expf_v2_data.ln2by_tblsz
 #define EXPF_TBLSZ_BY_LN2  expf_v2_data.tblsz_byln2
 #define EXPF_HUGE	   expf_v2_data.Huge
-#define EXPF_TABLE         __two_to_jby64
+#define EXPF_TABLE         expf_v2_data.table_v3
 
 #define EXPF_FARG_MIN -0x1.9fe368p6f    /* log(0x1p-150) ~= -103.97 */
 #define EXPF_FARG_MAX  0x1.62e42ep6f    /* log(0x1p128)  ~=   88.72  */
@@ -185,7 +187,7 @@ ALM_PROTO_OPT(expf)(float x)
 
     double_t r2 = r * r;
 
-    double_t tbl = asdouble(EXPF_TABLE[j] + (n << (52 - EXPF_N)));
+    double_t tbl = asdouble(asuint64(EXPF_TABLE[j]) + (n << (52 - EXPF_N)));
 
     q  = r  + (r2 * qtmp);
 
diff --git a/src/optmized/expf_data.h b/src/optmized/expf_data.h
index cbf5b36..8b94983 100644
--- a/src/optmized/expf_data.h
+++ b/src/optmized/expf_data.h
@@ -45,6 +45,6 @@ struct expf_data {
 };
 
 
-extern double __two_to_jby64[];
+extern double  __two_to_jby64[];
 
 #endif
diff --git a/src/optmized/expm1f.c b/src/optmized/expm1f.c
index 5e5d11a..66add0d 100644
--- a/src/optmized/expm1f.c
+++ b/src/optmized/expm1f.c
@@ -144,7 +144,7 @@ FN_PROTOTYPE_OPT(expm1f_v2)(float x)
 #define C2 1/6.0
     q  = r + r * r * (C1 + (C2 * r));
 
-    f  = asdouble(DATA.tab[j]);
+    f  = DATA.tab[j];
 
     q1.i = (1023ULL - m) << 52;
 
diff --git a/src/optmized/expm1f_data.h b/src/optmized/expm1f_data.h
index 72abaf9..d870c5e 100644
--- a/src/optmized/expm1f_data.h
+++ b/src/optmized/expm1f_data.h
@@ -39,7 +39,7 @@
 #define EXPM1F_N 6
 
 #if EXPM1F_N == 6
-extern const uint64_t __two_to_jby64[64];
+extern const double __two_to_jby64[64];
 #elif EXPM1F_N == 7
 extern const double __two_to_jby128[128];
 #endif
@@ -59,7 +59,7 @@ static const struct {
     float poly[5];
     /* The pre-computed double-precision table */
     //double tab[1 << EXPM1F_N];
-    const uint64_t *tab;
+    const double *tab;
 } expm1f_v2_data =  {
     .Huge       = 0x1.8p+52,	/* 2^52 * (1.0 + 0.5) */
 #if 1
diff --git a/src/optmized/log.c b/src/optmized/log.c
index eaa1251..22d2a8a 100644
--- a/src/optmized/log.c
+++ b/src/optmized/log.c
@@ -75,14 +75,11 @@
  *	T1 < X < T2
  */
 
-struct log_table {
-    uint64_t lead, tail;
-};
 
 #if N == 8
 #define POLY_DEGREE 6
-extern const struct log_table log_table_256[];
-extern const uint64_t log_f_inv_256[];
+extern double log_table_256[];
+extern double log_f_inv_256[];
 #define TAB_F_INV log_f_inv_256
 #define TAB_LOG   log_table_256
 #define MANT_MASK_N  (0x000FF00000000000ULL)
@@ -141,6 +138,10 @@ static struct {
 #define LN2_LEAD log_data.ln2_lead
 #define LN2_TAIL log_data.ln2_tail
 
+struct log_table {
+    double lead, tail;
+};
+
 double _log_special(double x, double y, uint32_t code);
 
 static inline uint64_t top12(double x)
@@ -283,7 +284,7 @@ ALM_PROTO_OPT(log)(double x)
     /* f = F - Y */
     double_t f = j_times_half - mant.d;
 
-    r = f * asdouble(TAB_F_INV[j]);
+    r = f * TAB_F_INV[j];
 
 #define ESTRIN_SCHEME  0xee
 #define HORNER_SCHEME  0xef
@@ -337,9 +338,9 @@ ALM_PROTO_OPT(log)(double x)
     /* m*log(2) + log(G) - poly */
 
     q  = (dexpo * LN2_TAIL) - q;
-    q += asdouble(tb_entry->tail);
+    q += tb_entry->tail;
 
-    q += (dexpo * LN2_LEAD) + asdouble(tb_entry->lead);
+    q += (dexpo * LN2_LEAD) + tb_entry->lead;
 
     return q;
 }
diff --git a/src/optmized/log_data.h b/src/optmized/log_data.h
index 006f50a..1dc64a3 100644
--- a/src/optmized/log_data.h
+++ b/src/optmized/log_data.h
@@ -46,7 +46,7 @@
 #endif
 
 struct log_table {
-    uint64_t f_inv, head, tail;
+    double f_inv, head, tail;
 };
 
 static const struct {
diff --git a/src/optmized/log_tables.c b/src/optmized/log_tables.c
index 1a15cb5..a25f234 100644
--- a/src/optmized/log_tables.c
+++ b/src/optmized/log_tables.c
@@ -28,7 +28,7 @@
 #include <stdint.h>
 
 
-const uint64_t log_256[] = {
+uint64_t log_256[] = {
 		0x0,
 	    0x3f6ff00aa2b10bc0,
 		0x3f7fe02a6b106789,
@@ -288,10 +288,9 @@ const uint64_t log_256[] = {
 		0x3fe62e42fefa39ef,
 };
 
-struct log_table {
+struct __log_256_table_interleaved {
 	uint64_t lead, tail;
-}; 
-const struct log_table log_table_256[] = {
+} log_table_256[] = {
 		   {0x0000000000000000, 0x0000000000000000},
 		   {0x3f6ff00aa0000000, 0x3db5885e0250435a},
 		   {0x3f7fe02a60000000, 0x3de620cf11f86ed2},
@@ -552,7 +551,7 @@ const struct log_table log_table_256[] = {
 		   {0x0000000000000000, 0x0000000000000000},
 		};
 
-const uint64_t log_f_inv_256[] = {
+uint64_t log_f_inv_256[] = {
 			0x4000000000000000, 0x3fffe01fe01fe020, 0x3fffc07f01fc07f0, 0x3fffa11caa01fa12,
 			0x3fff81f81f81f820, 0x3fff6310aca0dbb5, 0x3fff44659e4a4271, 0x3fff25f644230ab5,
 			0x3fff07c1f07c1f08, 0x3ffee9c7f8458e02, 0x3ffecc07b301ecc0, 0x3ffeae807aba01eb,
diff --git a/src/optmized/log_v3.c b/src/optmized/log_v3.c
index 17445c6..dfe1f73 100644
--- a/src/optmized/log_v3.c
+++ b/src/optmized/log_v3.c
@@ -304,6 +304,28 @@ FN_PROTOTYPE(log_v3)(double x)
     return q;
 }
 
+#if defined(ENABLE_GLIBC_API)
+    weak_alias (__log_finite, FN_PROTOTYPE(log_v3))
+    weak_alias (__ieee754_log, FN_PROTOTYPE(log_v3))
+    weak_alias (__ieee754_log_fma, FN_PROTOTYPE(log_v3))
+#endif
+
+#if defined(ENABLE_LIBM_API)
+    weak_alias (log, FN_PROTOTYPE(log_v3))
+#endif
+
+#if defined(ENABLE_AMDLIBM_API)
+    weak_alias (amd_log, FN_PROTOTYPE(log_v3))
+#endif
+
+#if !defined(ENABLE_GLIBC_API) && !defined(ENABLE_LIBM_API) && !defined(ENABLE_AMDLIBM_API)
+/*
+ * No API call is defined, the functions to be called directly
+ * like FN_PROTOTYPE(exp2_v2)(arg)
+ * useful for internal testing
+ */
+#endif
+
 #if !defined(DEBUG) && defined(__GNUC__) && !defined(__clang__)
 #pragma GCC pop_options
 #endif
diff --git a/src/optmized/logf.c b/src/optmized/logf.c
index 4070dc9..b315263 100644
--- a/src/optmized/logf.c
+++ b/src/optmized/logf.c
@@ -48,7 +48,7 @@
 
 extern float_t _logf_special(float_t x, float_t y, uint32_t code);
 
-extern struct logf_table logf_lookup[];
+extern struct logf_table logf_lookup[1<<LOGF_N];
 
 static struct {
     float_t log2_head, log2_tail;
@@ -194,7 +194,7 @@ ALM_PROTO_OPT(logf)(float x)
 
     struct logf_table *tbl = &logf_lookup[idx];
 
-    finv = asfloat(tbl->f_inv);
+    finv = tbl->f_inv;
 
     r = (f - y) * finv;
 
@@ -206,9 +206,9 @@ ALM_PROTO_OPT(logf)(float x)
 
     q = (f_expo * LOG2_TAIL) - q;
 
-    w = (LOG2_HEAD * f_expo) + asfloat(tbl->f_128_head);
+    w = (LOG2_HEAD * f_expo) + tbl->f_128_head;
 
-    q = (asfloat(tbl->f_128_tail) + q) + w;
+    q = (tbl->f_128_tail + q) + w;
 
     return q;
 }
diff --git a/src/optmized/logf_data.h b/src/optmized/logf_data.h
index e4be2dd..fb5ca30 100644
--- a/src/optmized/logf_data.h
+++ b/src/optmized/logf_data.h
@@ -30,6 +30,6 @@
 #include <float.h>
 
 struct logf_table {
-    uint32_t f_inv, f_128_head, f_128_tail;
+    float_t f_inv, f_128_head, f_128_tail;
 };
 
diff --git a/src/optmized/powf.c b/src/optmized/powf.c
index f1755ae..e456d0e 100644
--- a/src/optmized/powf.c
+++ b/src/optmized/powf.c
@@ -54,8 +54,8 @@ extern uint64_t log_256[];
 
 #if N == 8
 #define POLY_DEGREE 4
-extern const uint64_t log_table_256[];
-extern const uint64_t log_f_inv_256[];
+extern double log_table_256[];
+extern double log_f_inv_256[];
 #define TAB_F_INV log_f_inv_256
 #define TAB_LOG   log_table_256
 #define MANT_MASK_N  (0x000FF00000000000ULL)
@@ -135,7 +135,7 @@ static struct expf_data expf_v2_data = {
     .tblsz_byln2 = 0x1.71547652b82fep+6,
     .Huge = 0x1.8000000000000p+52,
 #if EXPF_N == 6
-    //.table_v3 = &__two_to_jby64[0],
+    .table_v3 = &__two_to_jby64[0],
 #elif EXPF_N == 5
     .table_v3 = (double*)L__two_to_jby32_table,
 #endif
@@ -239,7 +239,7 @@ calculate_log(double_t x)
     /* f = F - Y */
     double_t f = j_times_half - mant.d;
 
-    r = f * asdouble(TAB_F_INV[j]);
+    r = f * TAB_F_INV[j];
 
     double_t r2 = r * r;                /* r^2 */
 
diff --git a/src/optmized/sinf.c b/src/optmized/sinf.c
index 5b53b8a..0ebb8cb 100644
--- a/src/optmized/sinf.c
+++ b/src/optmized/sinf.c
@@ -28,7 +28,7 @@
 /*
  * ISO-IEC-10967-2: Elementary Numerical Functions
  * Signature:
- *   float sinf(float x)
+ *   float sin(float x)
  *
  * Spec:
  *   sinf(0)    = 0
@@ -42,24 +42,46 @@
  * ---------------------
  *
  * checks for special cases
- * if ( x < 0x1p-126) raise undeflow exception and return x
- * if ( asint(x) > infinity) return x with overflow exception and 
- * return x.
+ * if ( ux = infinity) raise overflow exception and return x
  * if x is NaN then raise invalid FP operation exception and return x.
  *
  * 1. Argument reduction
- * Convert given x into the form
- * |x| = N * pi + f where N is an integer and f lies in [-pi/2,pi/2]
- * N is obtained by : N = round(x/pi)
- * f is obtained by : f = abs(x)-N*pi
- * sin(x) = sin(N * pi + f) = sin(N * pi)*cos(f) + cos(N*pi)*sin(f)
- * sin(x) = sign(x)*sin(f)*(-1)**N
- * f = abs(x) - N * pi
+ * if |x| > 5e5 then
+ *      __amd_remainder_piby2(x, &r, &rr, &region)
+ * else
+ *      Argument reduction
+ *      Let z = |x| * 2/pi
+ *      z = dn + r, where dn = round(z)
+ *      rhead =  dn * pi/2_head
+ *      rtail = dn * pi/2_tail
+ *      r = z – dn = |x| - rhead – rtail
+ *      expdiff = exp(dn) – exp(r)
+ *      if(expdiff) > 15)
+ *      rtail = |x| - dn*pi/2_tail2
+ *      r = |x| -  dn*pi/2_head -  dn*pi/2_tail1 -  dn*pi/2_tail2  - (((rhead + rtail) – rhead )-rtail)
+ * rr = (|x| – rhead) – r + rtail
  *
- * 2. Polynomial approximation 
- * The term sin(f) where [-pi/2 < f < pi/2] can be approximated by 
- * using a polynomial computed using sollya using the Remez 
- * algorithm to determine the coeffecients and the maximum ulp is 1.
+ * 2. Polynomial approximation
+ * if(dn is odd)
+ *       rr = rr * r;
+ *       x4 = x2 * x2;
+ *       s = 0.5 * x2;
+ *       t =  s - 1.0;
+ *       poly = x4 * (C1 + x2 * (C2 + x2 * (C3 + x2 * (C4))))
+ *       r = (((1.0 + t) - s) - rr) + poly – t
+ * else
+ *       x3 = x2 * r
+ *       poly = S2 + (r2 * (S3 + (r2 * (S4))))
+ *       r = r - ((x2 * (0.5*rr - x3 * poly)) - rr) - S1 * x3
+ * if(((sign & region) | ((~sign) & (~region))) & 1)
+ *       return r
+ * else
+ *       return -r;
+
+ * if |x| < pi/4 && |x| > 2.0^(-13)
+ *   sin(x) = x + (x * (r2 * (S1 + r2 * (S2 + r2 * (S3 + r2 * (S4)))))
+ * if |x| < 2.0^(-13) && |x| > 2.0^(-27)
+ *   sin(x) = x - (x * x * x * (1/6));
  *
  *
  ******************************************
@@ -75,105 +97,204 @@
 #include <libm/poly.h>
 
 static struct {
-    const double invpi, pi, pi1, pi2;
-    double poly_sinf[5];
- } sinf_data = {
+    const double twobypi, piby2_1, piby2_1tail, invpi, pi, pi1, pi2;
+    const double piby2_2, piby2_2tail, ALM_SHIFT;
+    const float one_by_six;
+    double poly_sin[7];
+    double poly_cos[6];
+ } sin_data = {
+     .ALM_SHIFT = 0x1.8p+52,
+     .one_by_six = 0.166666666666666f,
+     .twobypi = 0x1.45f306dc9c883p-1,
+     .piby2_1 = 0x1.921fb54400000p0,
+     .piby2_1tail = 0x1.0b4611a626331p-34,
+     .piby2_2 = 0x1.0b4611a600000p-34,
+     .piby2_2tail = 0x1.3198a2e037073p-69,
      .pi = 0x1.921fb54442d18p1,
      .pi1 = 0x1.921fb50000000p1,
      .pi2 = 0x1.110b4611a6263p-25,
      .invpi = 0x1.45f306dc9c883p-2,
      /*
-      * Polynomial coefficients obtained using Remez algorithm from Sollya
+      * Polynomial coefficients
       */
-     .poly_sinf = {
-	  0x1.p0,
-         -0x1.55554d018df8bp-3,
-          0x1.110f0293a5dcbp-7,
-         -0x1.9f781a0aebdb9p-13,
-          0x1.5e2a3e7550c85p-19,
+     .poly_sin = {
+         -0x1.5555555555555p-3,
+         0x1.1111111110bb3p-7,
+         -0x1.a01a019e83e5cp-13,
+         0x1.71de3796cde01p-19,
+     },
+
+     .poly_cos = {
+         0x1.5555555555555p-5,   /* 0.0416667 */
+         -0x1.6c16c16c16967p-10, /* -0.00138889 */
+         0x1.A01A019F4EC91p-16,  /* 2.48016e-005 */
+         -0x1.27E4FA17F667Bp-22, /* -2.75573e-007 */
      },
 };
 
 
-#define pi    sinf_data.pi
-#define pi1   sinf_data.pi1
-#define pi2   sinf_data.pi2
-#define invpi sinf_data.invpi
+void __amd_remainder_piby2d2f(uint64_t x, double *r, int *region);
 
-#define C1  sinf_data.poly_sinf[0]
-#define C3  sinf_data.poly_sinf[1]
-#define C5  sinf_data.poly_sinf[2]
-#define C7  sinf_data.poly_sinf[3]
-#define C9  sinf_data.poly_sinf[4]
+#define pi          sin_data.pi
+#define pi1         sin_data.pi1
+#define pi2         sin_data.pi2
+#define invpi       sin_data.invpi
+#define TwobyPI     sin_data.twobypi
+#define PIby2_1     sin_data.piby2_1
+#define PIby2_1tail sin_data.piby2_1tail
+#define PIby2_2     sin_data.piby2_2
+#define PIby2_2tail sin_data.piby2_2tail
+#define PIby4       0x3F490FDB
+#define FiveE6      0x4A989680
+#define ONE_BY_SIX  sin_data.one_by_six
+#define ALM_SHIFT   sin_data.ALM_SHIFT
 
-#define SIGN_MASK   0x7FFFFFFFFFFFFFFF
-#define SIGN_MASK32 0x7FFFFFFF
+#define S1  sin_data.poly_sin[0]
+#define S2  sin_data.poly_sin[1]
+#define S3  sin_data.poly_sin[2]
+#define S4  sin_data.poly_sin[3]
 
-static inline uint32_t abstop12(float x)
-{
-    return (asuint32(x) & SIGN_MASK32) >> 20;
-}
+#define C1  sin_data.poly_cos[0]
+#define C2  sin_data.poly_cos[1]
+#define C3  sin_data.poly_cos[2]
+#define C4  sin_data.poly_cos[3]
+
+#define SIGN_MASK32 0x7FFFFFFF
+#define SIGN_MASK   0x7FFFFFFFFFFFFFFF
+#define INF32       0x7F800000          /* Infinity */
+#define SIN_SMALL   0x3C000000  /* 2.0^(-7) */
+#define SIN_SMALLER 0x39000000  /* 2.0^(-13) */
 
 float _sinf_special(float x);
-double _sin_special_underflow(double x);
 
 float
 ALM_PROTO_OPT(sinf)(float x)
 {
 
-    double xd, F, poly, result;
-    uint64_t n;
-    uint64_t uxd, sign = 0;
+    double xd, r, s, poly, x2;
+    double rhead, rtail, x3, x4;
+    uint64_t uy;
+    uint32_t sign = 0;
+    int32_t region;
 
-    /* sin(inf) = sin(-inf) = sin(NaN) = NaN */
+    /* sinf(inf) = sinf(-inf) = sinf(NaN) = NaN */
 
-    uint32_t ux = asuint32(x);
+    uint32_t uxf = asuint32(x);
 
-    if(unlikely((ux - asuint32(0x1p-126)) > (0x7f800000 - asuint32(0x1p-126)))) {
+    sign = uxf >> 31;
 
-        if((ux  & SIGN_MASK32) >= 0x7f800000) {
-            /* infinity or NaN */
-            return _sinf_special(x);
-        }
+    uxf = uxf & SIGN_MASK32;
+
+    if(unlikely(uxf >= INF32)) {
+        // infinity or NaN //
+        return _sinf_special(x);
 
-        if(abstop12(x) < abstop12(0x1p-126)) {
-             _sin_special_underflow(x);
-             return x;
-        }
     }
 
-    const double_t ALM_SHIFT = 0x1.8000000000000p52;
+    if(uxf > PIby4){
 
-    xd = (double)x;
+        float ax = asfloat(uxf);
 
-    uxd = asuint64(xd);
+        xd = (double)ax;
 
-    sign = uxd & (~SIGN_MASK);
+        /* ux > pi/4 */
+        if(uxf < FiveE6){
+            /* reduce  the argument to be in a range from -pi/4 to +pi/4
+                by subtracting multiples of pi/2 */
 
-    xd = asdouble(uxd & SIGN_MASK);
+            r = TwobyPI * xd; /* x * two_by_pi*/
 
-    double dn =  xd * invpi + ALM_SHIFT;
+            int32_t xexp = uxf >> 23;
 
-    n = asuint64(dn);
+            double npi2d = r + ALM_SHIFT;
 
-    dn -= ALM_SHIFT;
+            int64_t npi2 = asuint64(npi2d);
 
-    F = xd - dn * pi1;
+            npi2d -= ALM_SHIFT;
 
-    /* Get the fraction part */
-    F = F - dn * pi2;
+            rhead  = xd - npi2d * PIby2_1;
 
-    uint64_t odd =  n << 63;
+            rtail  = npi2d * PIby2_1tail;
+
+            r = rhead - rtail;
+
+            uy = asuint64(r);
+
+            int64_t expdiff = xexp - ((uy << 1) >> 53);
+
+            region = npi2;
+
+            if (expdiff  > 15) {
+
+                double t = rhead;
+
+                rtail =  npi2d * PIby2_2;
+
+                rhead = t- rtail;
+
+                rtail  = npi2d * PIby2_2tail - ((t - rhead) - rtail);
+
+                r = rhead - rtail;
+            }
+
+        }
+        else {
+            /* Reduce x into range [-pi/4,pi/4] */
+            __amd_remainder_piby2d2f(asuint64(xd), &r, &region);
+       
+        }
 
-    /* Calculate the polynomial approximation.
-     *
-     * sin(F) = x*(1+C1*x^2+C2*x^4+C3*x^6+C4*x^8)
-     *
-     */
+        x2 = r * r;
 
-    poly = POLY_EVAL_ODD_9(F, C1, C3, C5, C7, C9);
+        if(region & 1) {
 
-    result = asdouble(asuint64(poly) ^ sign ^ odd);
+            /*cos region */
+
+            x4 = x2 * x2;
+
+            s = 0.5 * x2;
+
+            double t =  1.0 - s;
+
+            poly = x4 * POLY_EVAL_3(x2, C1, C2, C3, C4);
+
+            r = t + poly;
+
+        }
+        else {
+            /* region 0 or 2 do a sin calculation */
+            x3 = x2 * r;
+
+            r +=  x3 * POLY_EVAL_3(x2, S1, S2, S3, S4);	
+
+        }
+
+        region >>= 1;
+
+        if(((sign & region) | ((~sign) & (~region))) & 1) {
+
+            return (float)r;
+
+        }
+
+        return (float)(-r);
+  
+    }
+    else if(uxf >= SIN_SMALLER) {
+
+        if(uxf >= SIN_SMALL) {
+        /* x > 2.0^(-13) */
+            xd = (double)x;
+
+            x2 = xd * xd;
+
+            return (float)(xd + (xd * (x2 * POLY_EVAL_3(x2, S1, S2, S3, S4))));
+
+        }
+
+        return x - x * x * x * ONE_BY_SIX;
+
+    }
 
-    return (float)result;
+    return x;
 }
diff --git a/src/optmized/tan.c b/src/optmized/tan.c
new file mode 100644
index 0000000..6d74647
--- /dev/null
+++ b/src/optmized/tan.c
@@ -0,0 +1,407 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ *
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   double tan(double x)
+ *
+ * Spec:
+ *   tan(0)    = 0
+ *   tan(-0)   = 0
+ *   tan(inf)  = NaN
+ *   tan(NaN) = NaN
+ *
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ *
+ * checks for special cases
+ * if ( ux = infinity) raise overflow exception and return x
+ * if x is NaN then raise invalid FP operation exception and return x.
+ *
+ * 1. Argument reduction
+ * if 2.0^(-13) < |x| < pi/4 then
+ *    tan(pi/4-x) = (1-tan(x))/(1+tan(x)) for x close to pi/4
+ *    tan(x-pi/4) = (tan(x)-1)/(tan(x)+1) close to -pi/4
+ *    tan(x) is approximated by Core Remez [2,3] approximation to tan(x+xx) on the
+ *    interval [0,0.68].
+ * if 2.0^(-27) < |x| < 2.0^(-13) then tan(x) = x + (x * x * x * 1/3)
+ * if |x| < 2.0^(-27) then underflow
+ *
+ * if x < 5e5 then
+ *  Reduce x into range [-pi/4,pi/4] and then compute tan(pi/4-x)
+ *
+ */
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+    const uint64_t pi_by_4, small_x, min, zero;
+    const uint64_t five_e5, seven_pi_by_4;
+    const double one_by_three, twobypi, piby2_1, piby2_1tail, invpi;
+    const double piby2_2, piby2_2tail, ALM_SHIFT;
+    const double piby2_3, piby2_3tail, one_by_six;
+    const double piby4_lead, piby4_tail;
+    const uint64_t five_pi_by_4, three_pi_by_4, nine_pi_by_4;
+    double poly_tan[7];
+ } tan_data = {
+     .pi_by_4 = 0x3fe921fb54442d18,
+     .small_x = 0x3f20000000000000,
+     .min = 0x3e40000000000000,
+     .zero = 0x0,
+     .one_by_three = 0.333333333333333333,
+     .five_e5 = 0x411E848000000000,
+     .ALM_SHIFT = 0x1.8p+52,
+     .one_by_six = 0.1666666666666666666,
+     .twobypi = 6.36619772367581382433e-01, /* 0x3fe45f306dc9c883 */
+     .piby2_1 = 1.57079632673412561417e+00, /* 0x3ff921fb54400000 */
+     .piby2_1tail = 6.07710050650619224932e-11, /* 0x3dd0b4611a626331 */
+     .piby2_2 = 6.07710050630396597660e-11, /* 0x3dd0b4611a600000 */
+     .piby2_2tail = 0x1.3198a2e037073p-69,
+     .piby2_3  =  2.02226624871116645580e-21, /* 0x3ba3198a2e000000 */
+     .piby2_3tail = 8.47842766036889956997e-32, /* 0x397b839a252049c1 */
+     .five_pi_by_4 = 0x400f6a7a2955385e,
+     .three_pi_by_4 = 0x4002d97c7f3321d2,
+     .nine_pi_by_4 = 0x401c463abeccb2bb,
+     .seven_pi_by_4 = 0x4015fdbbe9bba775,
+     .piby4_lead = 7.85398163397448278999e-01, /* 0x3fe921fb54442d18 */
+     .piby4_tail = 3.06161699786838240164e-17, /* 0x3c81a62633145c06 */
+     /*
+      * Polynomial coefficients
+      */
+     .poly_tan = {
+         0.372379159759792203640806338901e0,
+         -0.229345080057565662883358588111e-1,
+         0.224044448537022097264602535574e-3,
+         0.111713747927937668539901657944e1,
+         -0.515658515729031149329237816945e0,
+         0.260656620398645407524064091208e-1,
+         -0.232371494088563558304549252913e-3
+     },
+};
+
+#define PI_BY_4       tan_data.pi_by_4
+#define SMALL_X       tan_data.small_x
+#define SMALLER_X     tan_data.min
+#define ZERO          tan_data.zero
+#define ONE_BY_THREE  tan_data.one_by_three
+#define FIVE_e5       tan_data.five_e5
+#define TWO_BY_PI     tan_data.twobypi
+#define PI_BY_2_1     tan_data.piby2_1
+#define PI_BY_2_1TAIL tan_data.piby2_1tail
+#define PI_BY_2_2     tan_data.piby2_2
+#define PI_BY_2_2TAIL tan_data.piby2_2tail
+#define PI_BY_2_3     tan_data.piby2_3
+#define PI_BY_2_3TAIL tan_data.piby2_3tail
+#define FIVE_PI_BY_4  tan_data.five_pi_by_4
+#define THREE_PI_BY_4 tan_data.three_pi_by_4
+#define NINE_PI_BY_4  tan_data.nine_pi_by_4
+#define SEVEN_PI_BY_4 tan_data.seven_pi_by_4
+#define ALM_SHIFT     tan_data.ALM_SHIFT
+#define PI_BY_4_HEAD  tan_data.piby4_lead
+#define PI_BY_4_TAIL  tan_data.piby4_tail
+
+#define T1  tan_data.poly_tan[0]
+#define T2  tan_data.poly_tan[1]
+#define T3  tan_data.poly_tan[2]
+#define T4  tan_data.poly_tan[3]
+#define T5  tan_data.poly_tan[4]
+#define T6  tan_data.poly_tan[5]
+#define T7  tan_data.poly_tan[6]
+
+#define MASK_LOWER32 0xffffffff00000000
+extern void __amd_remainder_piby2(double x, double *r, double *rr, int32_t *region);
+
+
+/* tan(x + xx) approximation valid on the interval [-pi/4,pi/4].
+   If recip is true return -1/tan(x + xx) instead. */
+static inline double tan_piby4(double x, double xx, int32_t recip)
+{
+    double r, r1, r2, t1, t2, xl;
+    int32_t transform = 0;
+
+  /* In order to maintain relative precision transform using the identity:
+     tan(pi/4-x) = (1-tan(x))/(1+tan(x)) for arguments close to pi/4.
+     Similarly use tan(x-pi/4) = (tan(x)-1)/(tan(x)+1) close to -pi/4. */
+
+    if (x > 0.68) {
+        transform = 1;
+
+        x = PI_BY_4_HEAD - x;
+
+        xl = PI_BY_4_TAIL - xx;
+
+        x += xl;
+
+        xx = 0.0;
+    }
+    else if (x < -0.68) {
+        transform = -1;
+
+        x = PI_BY_4_HEAD + x;
+
+        xl = PI_BY_4_TAIL + xx;
+
+        x += xl;
+
+        xx = 0.0;
+    }
+
+    /* Core Remez [2,3] approximation to tan(x+xx) on the
+     interval [0,0.68]. */
+
+    r = x * x + 2.0 * x * xx;
+
+    t1 = x;
+
+    r1 = xx + x * r * (T1 + r * (T2 + r * T3));
+
+    /* r2 = T4 + r*T5 + r^2*T6 + r^3*T7 */
+    r2 = POLY_EVAL_3(r, T4, T5, T6, T7);
+
+    t2 = r1 / r2;
+
+  /* Reconstruct tan(x) in the transformed case. */
+
+    if (transform) {
+        double t;
+
+        t = t1 + t2;
+
+        if (recip) {
+
+            return transform * (2 * t / (t - 1) - 1.0);
+
+        }
+        else {
+
+            return transform * (1.0 - 2 * t / (1 + t));
+
+        }
+    }
+
+    if (recip) {
+        /* Compute -1.0/(t1 + t2) accurately */
+        double trec, trec_top, z1, z2, t;
+        uint64_t u;
+
+        t = t1 + t2;
+
+        u = asuint64(t);
+
+        u &= MASK_LOWER32;
+
+        z1 = asdouble(u);
+
+        z2 = t2 - (z1 - t1);
+
+        trec = -1.0 / t;
+
+        u = asuint64(trec);
+
+        u &= MASK_LOWER32;
+
+        trec_top = asdouble(u);
+
+        return trec_top + trec * ((1.0 + trec_top * z1) + trec_top * z2);
+    }
+    else {
+
+        return t1 + t2;
+
+    }
+}
+
+
+double ALM_PROTO_OPT(tan)(double x)
+{
+    double r, rr, t, rhead, rtail, npi2d;
+    int32_t npi2, region, xneg;
+    uint64_t ux, uy, ax, xexp, expdiff;
+
+    ux = asuint64(x);
+
+    ax = (ux & ~SIGNBIT_DP64);
+
+    if (ax <= PI_BY_4) { /* abs(x) <= pi/4 */
+
+        if (ax < SMALL_X) { /* abs(x) < 2.0^(-13) */
+
+            if (ax < SMALLER_X) {/* abs(x) < 2.0^(-27) */
+
+                if (ax == ZERO) {
+
+                     return x;
+
+                }
+                else {
+
+                    return  __amd_handle_error("tan", __amd_tan, ux, _UNDERFLOW,
+                                                AMD_F_UNDERFLOW|AMD_F_INEXACT,
+                                                ERANGE, x, 0.0, 1);
+
+                }
+           }
+            else {
+
+                return x + (x * x * x * ONE_BY_THREE);
+
+            }
+        }
+        else {
+
+            return tan_piby4(x, 0.0, 0);
+
+        }
+    }
+    else if (unlikely(((ux & EXPBITS_DP64) == EXPBITS_DP64))) {
+
+        /* x is either NaN or infinity */
+        if (ux & MANTBITS_DP64) {
+
+            /* x is NaN */
+            if (ux & QNAN_MASK_64) {
+
+	            return  __amd_handle_error("tan", __amd_tan, ux | QNAN_MASK_64,
+                                             _DOMAIN, AMD_F_NONE, EDOM, x, 0.0, 1);
+            }
+	        else {
+
+	            return  __amd_handle_error("tan", __amd_tan, ux | QNAN_MASK_64,
+                                            _DOMAIN, AMD_F_INVALID, EDOM, x, 0.0, 1);
+            }
+
+     }
+     else {
+            /* x is infinity. Return a NaN */
+        return  __amd_handle_error("tan", __amd_tan, INDEFBITPATT_DP64, _DOMAIN,
+                                        AMD_F_INVALID, EDOM, x, 0.0, 1);
+     }
+    }
+
+    xneg = ux >> 63;
+
+    x = asdouble(ax);
+
+    if (ax < FIVE_e5) { /* x < 5e5 */
+        /* For these size arguments we can just carefully subtract the
+         appropriate multiple of pi/2, using extra precision where
+         x is close to an exact multiple of pi/2 */
+
+        xexp  = ax >> EXPSHIFTBITS_DP64;
+        /* How many pi/2 is x a multiple of? */
+        if (ax <= FIVE_PI_BY_4) { /* 5pi/4 */
+
+            if (ax <= THREE_PI_BY_4) /* 3pi/4 */
+                npi2 = 1;
+            else
+                npi2 = 2;
+
+            npi2d = (double)npi2;
+        }
+        else if (ax <= NINE_PI_BY_4) {/* 9pi/4 */
+
+            if (ax <= SEVEN_PI_BY_4) /* 7pi/4 */
+                npi2 = 3;
+            else
+                npi2 = 4;
+
+            npi2d = (double)npi2;
+        }
+        else {
+
+             npi2d = x *  TWO_BY_PI + ALM_SHIFT;
+
+             npi2 = asuint64(npi2d);
+
+             npi2d -= ALM_SHIFT;
+
+        }
+
+        /* Subtract the multiple from x to get an extra-precision remainder */
+        rhead  = x - npi2d * PI_BY_2_1;
+
+        rtail  = npi2d * PI_BY_2_1TAIL;
+
+        uy = asuint64(rhead);
+
+        expdiff = xexp - ((uy & EXPBITS_DP64) >> EXPSHIFTBITS_DP64);
+
+        if (expdiff > 15) {
+          /* The remainder is pretty small compared with x, which
+             implies that x is a near multiple of pi/2
+             (x matches the multiple to at least 15 bits) */
+            t  = rhead;
+
+            rtail  = npi2d * PI_BY_2_2;
+
+            rhead  = t - rtail;
+
+            rtail  = npi2d * PI_BY_2_2TAIL - ((t - rhead) - rtail);
+
+            if (expdiff > 48) {
+              /* x matches a pi/2 multiple to at least 48 bits */
+                t  = rhead;
+
+                rtail  = npi2d * PI_BY_2_3;
+
+                rhead  = t - rtail;
+
+                rtail  = npi2d * PI_BY_2_3TAIL - ((t - rhead) - rtail);
+            }
+        }
+
+        r = rhead - rtail;
+
+        rr = (rhead - r) - rtail;
+
+        region = npi2 & 3;
+    }
+    else {
+      /* Reduce x into range [-pi/4,pi/4] */
+        __amd_remainder_piby2(x, &r, &rr, &region);
+
+    }
+
+    if (xneg) {
+
+        return -tan_piby4(r, rr, region & 1);
+
+    }
+    else {
+
+        return tan_piby4(r, rr, region & 1);
+
+    }
+}
+
diff --git a/src/optmized/tanf.c b/src/optmized/tanf.c
index d884690..ec5ec6c 100644
--- a/src/optmized/tanf.c
+++ b/src/optmized/tanf.c
@@ -1,182 +1,299 @@
-/*
- * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
- */
-
-#include <stdint.h>
-
-#include <libm_macros.h>
-#include <libm_special.h>
-#include <libm/amd_funcs_internal.h>
-#include <libm/types.h>
-#include <libm/constants.h>
-#include <libm/typehelper.h>
-#include <libm/compiler.h>
-#include <libm/poly.h>
-
-#define  ALM_TANF_SIGN_MASK   ~(1UL<<63)
-#define  ALM_TANF_SIGN_MASK32 ~(1U<<31)
-
-
-/*
- * ISO-IEC-10967-2: Elementary Numerical Functions
- * Signature:
- *   float tanf(float x)
- *
- * Spec:
- *   tanf(n· 2π + π/4)  = 1       if n∈Z and |n· 2π + π/4|   <= big_angle_F
- *   tanf(n· 2π + 3π/4) = −1      if n∈Z and |n· 2π + 3π/4|  <= big angle rF
- *   tanf(x) = x                  if x ∈ F^(2·π) and tanf(x) != tan(x)
- *                                               and |x| < sqrt(epsilonF/rF)
- *   tanf(−x) = −tanf(x)          if x ∈ F^(2·π)
- */
-
-static const struct {
-    double huge;
-    double halfpi1;
-    double halfpi2;
-    double invhalfpi;
-    double poly[8];
-} tanf_data = {
-    .huge    = 0x1.8000000000000p52,
-    .halfpi1 = 0x1.921fb54400000p0,
-    .halfpi2 = 0x1.0b4611a626331p-34,
-    .invhalfpi = 0x1.45f306dc9c882a53f85p-1,
-    // Polynomial coefficients obtained using Remez algorithm from Sollya
-    .poly = {
-        0x1.ffffff99ac0468p-1,
-        0x1.55559193ecf2bp-2,
-        0x1.1106bf4ba8f408p-3,
-        0x1.bbafbb6650308p-5,
-        0x1.561638922df5fp-6,
-        0x1.7f3a033a88788p-7,
-        -0x1.ba0d41d26961f8p-11,
-        0x1.3952b4eff28ac8p-8,
-    },
-
-};
-
-#define ALM_TANF_HUGE_VAL    tanf_data.huge
-#define ALM_TANF_HALFPI1     tanf_data.halfpi1
-#define ALM_TANF_HALFPI2     tanf_data.halfpi2
-#define ALM_TANF_INVHALFPI   tanf_data.invhalfpi
-
-#define C0 tanf_data.poly[0]
-#define C2 tanf_data.poly[1]
-#define C4 tanf_data.poly[2]
-#define C6 tanf_data.poly[3]
-#define C8 tanf_data.poly[4]
-#define C10 tanf_data.poly[5]
-#define C12 tanf_data.poly[6]
-#define C14 tanf_data.poly[7]
-
-
-/*
- * Implementation Notes:
- *
- * float tanf(float x)
- *      A given x is reduced into the form:
- *
- *               |x| = (N * π/2) + F
- *
- *      Where N is an integer obtained using:
- *              N = round(x * 2/π)
- *      And F is a fraction part lying in the interval
- *              [-π/4, +π/4];
- *
- *      obtained as F = |x| - (N * π/2)
- *
- *      Thus tan(x) is given by
- *
- *              tan(x) = tan((N * π/2) + F) = tan(F)
- *              when N is even,
- *                     = -cot(F) = -1/tan(F)
- *              when N is odd, tan(F) is approximated using a polynomial
- *                      obtained from Remez approximation from Sollya.
- *
- */
-
-float
-ALM_PROTO_OPT(tanf)(float x)
-{
-    double     F, xd, tanx = 0.0;
-    double     poly;
-    uint64_t   sign, uxd, n;
-    uint32_t   ux = asuint32(x);
-
-    if(unlikely((ux - asuint32(0x1p-126)) >
-                (asuint32(0x1p+127) - asuint32(0x1p-126)))) {
-
-        if((ux  & ALM_TANF_SIGN_MASK32) >= 0x7f800000) {
-            /*  infinity or NaN */
-            return _tanf_special(x);
-        }
-    }
-
-    if (ux == 0)
-        return 0;
-
-    xd = (double)x;
-
-    uxd = asuint64(xd);
-
-    sign = uxd & (~ALM_TANF_SIGN_MASK);
-
-    /* fabs(x) */
-    xd = asdouble(uxd & ALM_TANF_SIGN_MASK);
-
-    /*
-     * dn = x * (2/π)
-     * would turn to fma
-     */
-    double dn =  xd * ALM_TANF_INVHALFPI + ALM_TANF_HUGE_VAL;
-
-    /* n = (int)dn */
-    n   = asuint64(dn);
-
-    dn -= ALM_TANF_HUGE_VAL;
-
-    /* F = xd - (n * π/2) */
-    F = xd - dn * ALM_TANF_HALFPI1;
-
-    F = F - dn *  ALM_TANF_HALFPI2;
-
-    uint64_t odd = (n << 63);
-
-    /*
-     * Calculate the polynomial approximation
-     *  x * (C1 + C2*x^2 + C3*x^4 + C4*x^6 + C5*x^8 + C6*x^10 + C7*x^12 + C8*x^14)
-     * polynomial is approximated as x*P(x^2),
-		 * 15 degree, but only even terms are used
-     */
-    poly = POLY_EVAL_EVEN_15(F, C0, C2, C4, C6, C8, C10, C12, C14);
-
-    tanx = asdouble(asuint64(poly) ^ sign);
-
-    if (odd)
-        tanx = -1.0/tanx;
-
-    return eval_as_float(tanx);
-}
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   float tan(float x)
+ *
+ * Spec:
+ *   tanf(0)    = 0
+ *   tanf(-0)   = 0
+ *   tanf(inf)  = NaN
+ *   tanf(NaN) = NaN
+ *
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ *
+ * checks for special cases
+ * if ( ux = infinity) raise overflow exception and return x
+ * if x is NaN then raise invalid FP operation exception and return x.
+ *
+ * 1. Argument reduction
+ * if 2.0^(-13) < |x| < pi/4 then
+ *    tan(pi/4-x) = (1-tan(x))/(1+tan(x)) for x close to pi/4
+ *    tan(x-pi/4) = (tan(x)-1)/(tan(x)+1) close to -pi/4
+ *    tan(x) is approximated by Core Remez [2,3] approximation to tan(x+xx) on the
+ *    interval [0,0.68].
+ * if 2.0^(-27) < |x| < 2.0^(-13) then tan(x) = x + (x * x * x * 1/3)
+ * if |x| < 2.0^(-27) then underflow
+ *
+ * if x < 5e5 then
+ *  Reduce x into range [-pi/4,pi/4] and then compute tan(pi/4-x)
+ *
+ */
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+    const uint64_t pi_by_4;
+    const uint64_t five_e5, seven_pi_by_4;
+    const uint64_t five_pi_by_4, three_pi_by_4, nine_pi_by_4;
+    const double one_by_three, twobypi, piby2_1, piby2_1tail, invpi;
+    const double piby2_2, piby2_2tail, shift;
+    const double piby2_3, piby2_3tail, one_by_six;
+    const double piby4_lead, piby4_tail;
+
+    double poly_tanf[5];
+} tanf_data = {
+    .pi_by_4       = 0x3fe921fb54442d18,
+    .one_by_three  = 0.333333333333333333,
+    .five_e5       = 0x411E848000000000,
+    .shift         = 0x1.8p+52,
+    .one_by_six    = 0.1666666666666666666,
+    .twobypi       = 6.36619772367581382433e-01, /* 0x3fe45f306dc9c883 */
+    .piby2_1       = 1.57079632673412561417e+00, /* 0x3ff921fb54400000 */
+    .piby2_1tail   = 6.07710050650619224932e-11, /* 0x3dd0b4611a626331 */
+    .piby2_2       = 6.07710050630396597660e-11, /* 0x3dd0b4611a600000 */
+    .piby2_2tail   = 2.02226624879595063154e-21,
+    .piby2_3       = 2.02226624871116645580e-21, /* 0x3ba3198a2e000000 */
+    .piby2_3tail   = 8.47842766036889956997e-32, /* 0x397b839a252049c1 */
+    .five_pi_by_4  = 0x400f6a7a2955385e,
+    .three_pi_by_4 = 0x4002d97c7f3321d2,
+    .nine_pi_by_4  = 0x401c463abeccb2bb,
+    .seven_pi_by_4 = 0x4015fdbbe9bba775,
+    .piby4_lead    = 7.85398163397448278999e-01, /* 0x3fe921fb54442d18 */
+    .piby4_tail    = 3.06161699786838240164e-17, /* 0x3c81a62633145c06 */
+
+    /* Polynomial coefficients */
+    .poly_tanf = {
+        0.385296071263995406715129e0,
+        0.172032480471481694693109e-1,
+        0.115588821434688393452299e+1,
+        -0.51396505478854532132342e0,
+        0.1844239256901656082986661e-1,
+    },
+};
+
+#define PI_BY_4       tanf_data.pi_by_4
+#define ALM_TANF_ZERO          (0x0L)
+#define ONE_BY_THREE  tanf_data.one_by_three
+#define FIVE_e5       tanf_data.five_e5
+#define TWO_BY_PI     tanf_data.twobypi
+#define PI_BY_2_1     tanf_data.piby2_1
+#define PI_BY_2_1TAIL tanf_data.piby2_1tail
+#define PI_BY_2_2     tanf_data.piby2_2
+#define PI_BY_2_2TAIL tanf_data.piby2_2tail
+#define PI_BY_2_3     tanf_data.piby2_3
+#define PI_BY_2_3TAIL tanf_data.piby2_3tail
+#define FIVE_PI_BY_4  tanf_data.five_pi_by_4
+#define THREE_PI_BY_4 tanf_data.three_pi_by_4
+#define NINE_PI_BY_4  tanf_data.nine_pi_by_4
+#define SEVEN_PI_BY_4 tanf_data.seven_pi_by_4
+#define ALM_SHIFT     tanf_data.shift
+#define PI_BY_4_HEAD  tanf_data.piby4_lead
+#define PI_BY_4_TAIL  tanf_data.piby4_tail
+
+#define T1  tanf_data.poly_tanf[0]
+#define T2  tanf_data.poly_tanf[1]
+#define T3  tanf_data.poly_tanf[2]
+#define T4  tanf_data.poly_tanf[3]
+#define T5  tanf_data.poly_tanf[4]
+
+#define MASK_LOWER32 0xffffffff00000000UL
+
+void __amd_remainder_piby2d2f(uint64_t ux, double *r, int *region);
+
+/*
+ * tan(x + xx) approximation valid on the interval
+ *     [-pi/4,pi/4].
+ * If recip is true return -1/tan(x + xx) instead.
+ */
+static inline float
+tan_piby4(double x, int32_t recip) {
+
+    double r, t, r1, r2;
+
+    /* Core Remez [1,2] approximation to tan(x) on the^M
+     interval [0,pi/4]. */
+    r = x * x;
+
+    r1 = (T1 - T2 * r);
+
+    r2 = (T3 + r * (T4 + r * T5));
+
+    t = x + x * r * r1 / r2;
+
+    if (recip)
+    	return -1.0 / t;
+    else
+        return t;
+
+}
+
+static inline float
+tan_piby4i_zero(double x) {
+
+    double r, t, r1, r2;
+
+    /* Core Remez [1,2] approximation to tan(x) on the^M
+     interval [0,pi/4]. */
+    r = x * x;
+
+    r1 = (T1 - T2 * r);
+
+    r2 = (T3 + r * (T4 + r * T5));
+
+    t = x + x * r * r1 / r2;
+
+    return t;
+
+}
+
+static float
+__tanf_special_inline(float x)
+{
+    uint32_t uxf;
+
+    uxf = asuint32(x);
+
+    /* x is either NaN or infinity */
+    if (uxf & MANTBITS_SP32) {
+        /* x is NaN */
+        if (uxf & QNAN_MASK_32)
+            return  __amd_handle_errorf("tanf", __amd_tan, uxf | QNAN_MASK_32,
+                                        _DOMAIN, AMD_F_NONE, EDOM, x, 0.0f, 1);
+
+        return  __amd_handle_errorf("tanf", __amd_tan, uxf | QNAN_MASK_32,
+                                    _DOMAIN, AMD_F_INVALID, EDOM, x, 0.0f, 1);
+    }
+
+    /* x is infinity. Return a NaN */
+    return  __amd_handle_errorf("tanf", __amd_tan, INDEFBITPATT_SP32, _DOMAIN,
+                                AMD_F_INVALID, EDOM, x, 0.0f, 1);
+}
+
+#define ALM_TANF_SMALL_X     0x3C000000 
+#define ALM_TANF_ARG_MIN     0x39000000 
+
+static float
+__tanf_very_small_x(float x)
+{
+    uint32_t ax = asuint32(x) & ~SIGNBIT_SP32;
+
+    if (ax == ALM_TANF_ZERO)
+        return x;
+
+    if (ax < ALM_TANF_SMALL_X) { /* abs(x) < 2.0^(-13) */
+        if (ax < ALM_TANF_ARG_MIN) /* abs(x) < 2.0^(-27) */
+            return  __amd_handle_errorf("tanf", __amd_tan, asuint32(x), _UNDERFLOW,
+                                        AMD_F_UNDERFLOW|AMD_F_INEXACT,
+                                        ERANGE, x, 0.0, 1);
+
+        /*
+         *  2^-13 < abs(x) < 2^-27
+         *  tan(x) = x + x^3 * 0.333333333
+         */
+        return x + (x * x * x * ONE_BY_THREE);
+    }
+
+    return tan_piby4i_zero(x);
+}
+
+float ALM_PROTO_OPT(tanf)(float x)
+{
+    double    dx, r;
+    int32_t   region, xneg;
+    uint32_t  uxf;
+
+    uxf = asuint32(x);
+
+    xneg = uxf & SIGNBIT_SP32;
+
+    if (unlikely(((uxf & PINFBITPATT_SP32) == PINFBITPATT_SP32))) {
+        return __tanf_special_inline(x);
+    }
+
+    /* uxf = abs(uxf) */
+    uxf &= ~SIGNBIT_SP32;
+
+    dx = (double) asfloat(uxf);
+
+    uint64_t ax = asuint64(dx);
+
+    if (unlikely(ax >= FIVE_e5)) {
+        /* Reduce x into range [-pi/4,pi/4] */
+        __amd_remainder_piby2d2f(ax, &r, &region);
+    }
+    else {
+
+        double    rhead, rtail, npi2d;
+        uint32_t  npi2;
+
+        if (ax <= PI_BY_4) { /* abs(x) <= pi/4 */
+            return __tanf_very_small_x(x);
+        }
+
+        /* Here on , pi/4 < ax < 5e5
+         * For these size arguments we can just carefully subtract the
+         * appropriate multiple of pi/2, using extra precision where
+         * x is close to an exact multiple of pi/2
+         */
+
+        npi2d = dx *  TWO_BY_PI + ALM_SHIFT;
+
+        npi2 = asuint64(npi2d);
+
+        npi2d -= ALM_SHIFT;
+
+        /* Subtract the multiple from x to get an extra-precision remainder */
+        rhead  = dx - npi2d * PI_BY_2_1;
+
+        rtail  = npi2d * PI_BY_2_1TAIL;
+
+        r = rhead - rtail;
+
+        region = npi2;
+    }
+
+    float res = tan_piby4(r, region & 1);
+
+    /* tan(x) = -tan(x) if x is negative */
+    res = asfloat(xneg ^ asuint32(res));
+
+    return res;
+
+}
+
diff --git a/src/optmized/tanhf.c b/src/optmized/tanhf.c
new file mode 100644
index 0000000..9b63124
--- /dev/null
+++ b/src/optmized/tanhf.c
@@ -0,0 +1,180 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   float tanhf(float x)
+ *
+ * Spec:
+ *  tanhf(0)    =  0
+ *  tanhf(-0)   =  0
+ *  tanhf(inf)  =  1
+ *  tanhf(-inf) = -1
+ *
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ * To compute tanhf(float x)
+ * Let y = |x|
+ * The input argument is then reduced to one of these three intervals:
+ *
+ * 1. 0 <= y < 1
+ *    In this case, tanhf(y) is calculated as,
+ *    tanhf(y) = y + C1 * y^3 + C2 * y^5 + C3 * y^7 + C4 * y^9 +
+ *               C5 * y^11 + C6 * y^13 + C7 * y^15
+ *
+ *    The polynomial coefficients are derived using fpminmax algorithm.
+ *
+ * 2. 1 <= y < 0x1.154246p3
+ *    In this case, tanhf(y) is calculated as,
+ *    tanhf(y) = 1 - 2/(z + 1),     where z = e^(-2 * y)
+ *
+ *    This can be approximated using the polynomial,
+ *    tanhf(y) = 1.0 + 2 * (z^8 - z^7 + z^6 - z^5 + z^4 - z^3 + z^2 - z)
+ *
+ * 3. 0x1.154246p3 <= y < +inf
+ *    In this case, tanhf(y) = 1
+ *
+ * If x < 0, then we use the identity
+ *       tanhf(-x) = -tanhf(x)
+ *
+ * Max ULP of current implementation: 1
+ */
+
+#include <stdint.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+                float poly_tanhf[7];
+                float max_arg;
+              } tanhf_data = {
+                                .max_arg       = 0x1.154246p3,
+                                .poly_tanhf    = {
+                                                    -0x1.55553p-2,
+                                                    0x1.110aeap-3,
+                                                    -0x1.b94f7ep-5,
+                                                    0x1.5fadfcp-6,
+                                                    -0x1.037056p-7,
+                                                    0x1.2b22eap-9,
+                                                    -0x1.728278p-12,
+                                              },
+                };
+
+#define C1 tanhf_data.poly_tanhf[0]
+#define C2 tanhf_data.poly_tanhf[1]
+#define C3 tanhf_data.poly_tanhf[2]
+#define C4 tanhf_data.poly_tanhf[3]
+#define C5 tanhf_data.poly_tanhf[4]
+#define C6 tanhf_data.poly_tanhf[5]
+#define C7 tanhf_data.poly_tanhf[6]
+
+#define TANHF_MAX_ARG   tanhf_data.max_arg
+
+#define TANHF_SMALL_ARG   0x39000000
+#define TANHF_SIGN_MASK32 ~(1U<<31)
+
+float ALM_PROTO(expf)(float);
+
+float
+ALM_PROTO_OPT(tanhf)(float x)
+{
+
+    float y, z, result;
+    float poly;
+    uint32_t sign, ux;
+
+    /* Get sign of input argument */
+    ux = asuint32(x);
+    sign = ux & (~TANHF_SIGN_MASK32);
+
+    /* Get absolute value of input argument */
+    y = asfloat(ux & TANHF_SIGN_MASK32);
+
+    /* Check for Special cases */
+    ux = asuint32(y);
+
+    /* |x| is small enough that tanhf(x) = x */
+    if(ux < TANHF_SMALL_ARG) {
+
+        if(ux == POS_ZERO_F32)
+            /* For +/- 0 */
+            return x;
+        else
+            /* For underflow */
+            return _tanhf_special(x);
+
+    } else if(ux > PINFBITPATT_SP32)
+            /* For +/-inf */
+            return x+x;
+
+    if(y > TANHF_MAX_ARG)
+        /* For x > max_arg */
+            return asfloat(asuint32(1.0f) ^ sign);
+
+    if(y < 1.0) {
+
+        /* Compute tanhf using the polynomial
+           y + C1 * y^3 + C2 * y^5 + C3 * y^7 + C4 * y^9 +
+           C5 * y^11 + C6 * y^13 + C7 * y^15
+        */
+        result = POLY_EVAL_ODD_15(y, C1, C2, C3, C4, C5, C6, C7);
+
+    } else {
+
+        // z = e^(-2 * y)
+        z = ALM_PROTO(expf)(-2.0f * y);
+        float z2 = z * z;
+        float z4 = z2 * z2;
+
+        float a0 = 1.0f - z;
+        float a1 = 1 + z2;
+
+        float b0 = a0 * a1;
+        float b1 = z4 * a0 * a1;
+
+        /* tanhf can be approximated using the polynomial
+           1.0 + 2 * (z^8 - z^7 + z^6 - z^5 + z^4 - z^3 + z^2 - z)
+        */
+        poly = b0 + b1;
+
+        result = 1.0f - (2.0f * z * poly);
+    }
+
+    /* Result is -ve if input argument is -ve */
+    return asfloat(asuint32(result) ^ sign);
+
+}
diff --git a/src/optmized/vec/alm_special.c b/src/optmized/vec/alm_special.c
index d5cb313..467cc51 100644
--- a/src/optmized/vec/alm_special.c
+++ b/src/optmized/vec/alm_special.c
@@ -41,3 +41,13 @@ tanf_specialcase(float x)
 {
     return ALM_PROTO(tanf)(x);
 }
+
+
+
+
+double
+tan_specialcase(double x)
+{
+    return ALM_PROTO(tan)(x);
+}
+
diff --git a/src/optmized/vec/vrd2_cos.c b/src/optmized/vec/vrd2_cos.c
new file mode 100644
index 0000000..73b99a4
--- /dev/null
+++ b/src/optmized/vec/vrd2_cos.c
@@ -0,0 +1,187 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   v_f64x2_t vrd2_cos(v_f64x2_t x)
+ *
+ * Spec:
+ *  cos(0)    = 1
+ *  cos(-0)   = 1
+ *  cos(inf)  = NaN
+ *  cos(-inf) = NaN
+ *
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ * To compute cos(v_f64x2_t x)
+ *
+ * 1. Argument Reduction
+ *      Let input  x be represented as,
+ *          |x| = N * pi + f        (1) | N is an integer,
+ *                                        -pi/2 <= f <= pi/2
+ *
+ *      From (2), N = int(x / pi + 1/2) - 1/2
+ *                f = |x| - (N * pi)
+ *
+ * 2. Polynomial Evaluation
+ *       From (1) and (2),cos(f) can be calculated using a polynomial
+ *       cos(f) = f + C1 * f^3 + C2 * f^5 + C3 * f^7 + C4 * f^9 +
+ *                C5 * f^11 + C6 * f^13 + C7 * f^15 + C8 * f^17
+ *
+ * 3. Reconstruction
+ *      Hence, cos(x) = sin(x + pi/2) = sign(x) * cos(f)
+ *
+ * MAX ULP of current implementation : 2
+ */
+
+
+#include <stdint.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+        v_f64x2_t poly_cos[8];
+        v_f64x2_t pi, halfpi, invpi;
+        v_f64x2_t pi1, pi2, pi3;
+        v_f64x2_t half, alm_huge;
+        v_u64x2_t sign_mask, max;
+        } v2_cos_data = {
+                        .pi        = _MM_SET1_PD2(0x1.921fb54442d188p1),
+                        .halfpi    = _MM_SET1_PD2(0x1.921fb54442d18p0),
+                        .invpi     = _MM_SET1_PD2(0x1.45f306dc9c883p-2),
+                        .pi1       = _MM_SET1_PD2(-0x1.921fb54442d18p+1),
+                        .pi2       = _MM_SET1_PD2(-0x1.1a62633145c07p-53),
+                        .pi3       = _MM_SET1_PD2(0x1.f1976b7ed8fbcp-109),
+                        .half      = _MM_SET1_PD2(0x1p-1),
+                        .alm_huge  = _MM_SET1_PD2(0x1.8p+52),
+                        .sign_mask = _MM_SET1_I64x2(0x7FFFFFFFFFFFFFFF),
+                        .max       = _MM_SET1_I64x2(0x4160000000000000), /* 0x1p23 */
+                        .poly_cos  = {
+                                        _MM_SET1_PD2(-0x1.5555555555555p-3),
+                                        _MM_SET1_PD2(0x1.11111111110bp-7),
+                                        _MM_SET1_PD2(-0x1.a01a01a013e1ap-13),
+                                        _MM_SET1_PD2(0x1.71de3a524f063p-19),
+                                        _MM_SET1_PD2(-0x1.ae6454b5dc0b5p-26),
+                                        _MM_SET1_PD2(0x1.6123c686ad6b4p-33),
+                                        _MM_SET1_PD2(-0x1.ae420dc08fd52p-41),
+                                        _MM_SET1_PD2(0x1.880ff69a83bbep-49),
+                                    },
+        };
+
+#define V2_COS_PI      v2_cos_data.pi
+#define V2_COS_HALF_PI v2_cos_data.halfpi
+#define V2_COS_INV_PI  v2_cos_data.invpi
+#define V2_COS_PI1     v2_cos_data.pi1
+#define V2_COS_PI2     v2_cos_data.pi2
+#define V2_COS_PI3     v2_cos_data.pi3
+#define V2_COS_HALF    v2_cos_data.half
+
+
+#define C1 v2_cos_data.poly_cos[0]
+#define C2 v2_cos_data.poly_cos[1]
+#define C3 v2_cos_data.poly_cos[2]
+#define C4 v2_cos_data.poly_cos[3]
+#define C5 v2_cos_data.poly_cos[4]
+#define C6 v2_cos_data.poly_cos[5]
+#define C7 v2_cos_data.poly_cos[6]
+#define C8 v2_cos_data.poly_cos[7]
+
+#define V2_COS_SIGN_MASK v2_cos_data.sign_mask
+#define V2_COS_MAX       v2_cos_data.max
+#define V2_ALM_HUGE      v2_cos_data.alm_huge
+
+double ALM_PROTO(cos)(double);
+
+static inline v_f64x2_t
+cos_specialcase(v_f64x2_t _x, v_f64x2_t result,
+                v_u64x2_t cond)
+{
+    return (v_f64x2_t) {
+            (cond[0]) ? ALM_PROTO(cos)(_x[0]):result[0],
+            (cond[1]) ? ALM_PROTO(cos)(_x[1]):result[1],
+        };
+}
+
+v_f64x2_t
+ALM_PROTO_OPT(vrd2_cos)(v_f64x2_t x)
+{
+
+    v_f64x2_t dinput, dn, frac, poly, result;
+
+    v_u64x2_t n, ixd, odd;
+
+    ixd = as_v2_u64_f64(x);
+
+    /* Check for special cases */
+    v_u64x2_t cond = (ixd & V2_COS_SIGN_MASK) > (V2_COS_MAX);
+
+    /* Remove sign from the input */
+    ixd = ixd & V2_COS_SIGN_MASK;
+    dinput = as_v2_f64_u64(ixd);
+
+    /* Get n = int(x / pi + 1/2) - 1/2 */
+    dn = ((dinput * V2_COS_INV_PI) + V2_COS_HALF) + V2_ALM_HUGE;
+    n = as_v2_u64_f64(dn);
+    dn = dn - V2_ALM_HUGE;
+    dn = dn - V2_COS_HALF;
+
+    /* frac = x - (n*pi) */
+    frac = dinput + dn * V2_COS_PI1;
+    frac = frac + dn * V2_COS_PI2;
+    frac = frac + dn * V2_COS_PI3;
+
+    /* Check if n is odd or not */
+    odd = n << 63;
+
+    /* Compute cos(f) using the polynomial
+     * f + C1 * f^3 + C2 * f^5 + C3 * f^7 + C4 * f^9 +
+     * C5 * f^11 + C6 * f^13 + C7 * f^15 + C8 * f^17
+     */
+    poly = frac + POLY_EVAL_ODD_17(frac, C1, C2, C3, C4, C5, C6, C7, C8);
+
+    /* If n is odd, result is negative */
+    result = as_v2_f64_u64( as_v2_u64_f64(poly) ^ odd);
+
+    if(unlikely(any_v2_u64_loop(cond))) {
+        return cos_specialcase(x, result,cond);
+    }
+
+    return result;
+
+}
+
diff --git a/src/optmized/vec/vrd2_exp.c b/src/optmized/vec/vrd2_exp.c
index 49f4f13..5949ef4 100644
--- a/src/optmized/vec/vrd2_exp.c
+++ b/src/optmized/vec/vrd2_exp.c
@@ -66,7 +66,7 @@
 #include <libm_util_amd.h>
 #include <libm_special.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
+//#include <libm_amd.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
 #include <libm/typehelper-vec.h>
@@ -148,13 +148,13 @@ v_f64x2_t
 ALM_PROTO_OPT(vrd2_exp)(v_f64x2_t x)
 {
 
-    v_i64x2_t vx = as_v2_u64_f64(x);
+    v_i64x2_t vx = as_v2_i64_f64(x);
 
     // Get absolute value
     vx = vx & MASK;
 
     // Check if -709 < vx < 709
-    v_i64x2_t cond = (vx > ARG_MAX);
+    v_u64x2_t cond = (vx > ARG_MAX);
 
     // x * (64.0/ln(2))
     v_f64x2_t z = x * INVLN2;
@@ -162,7 +162,7 @@ ALM_PROTO_OPT(vrd2_exp)(v_f64x2_t x)
     v_f64x2_t dn = z + EXP_HUGE;
 
     // n = int (z)
-    v_i64x2_t n = as_v2_u64_f64(dn);
+    v_i64x2_t n = as_v2_i64_f64(dn);
 
     // dn = double(n)
     dn = dn - EXP_HUGE;
@@ -187,32 +187,15 @@ ALM_PROTO_OPT(vrd2_exp)(v_f64x2_t x)
                                   C7, C8, C9, C10, C11, C12);
 
     // result = polynomial * 2^m
-    v_f64x2_t ret = poly * as_v2_f64_u64(m);
+    v_f64x2_t ret = poly * as_v2_f64_i64(m);
 
     if(unlikely(any_v2_u64_loop(cond))) {
 
-        v_i64x2_t inf_condition = x > EXP_MAX;
+        return (v_f64x2_t) {
+            (cond[0]) ? SCALAR_EXP(x[0]):ret[0],
+            (cond[1]) ? SCALAR_EXP(x[1]):ret[1],
+        };
 
-        v_i64x2_t zero_condition = x < EXP_LOW;
-
-        v_64x2 vx = {.f64x2 = ret};
-
-        //Zero out the elements that have to be set to infinity
-        vx.i64x2 = vx.i64x2 & (~inf_condition);
-
-        inf_condition = inf_condition & INF;
-
-        vx.i64x2 = vx.i64x2 | inf_condition;
-
-        ret =  vx.f64x2;
-
-        /*To handle denormal numbers */
-        if(any_v2_u64_loop(zero_condition)) {
-                return (v_f64x2_t) {
-                    (zero_condition[0] && (x[0] < EXP_MIN_VAL)) ? 0.0:SCALAR_EXP(x[0]),
-                    (zero_condition[1] && (x[1] < EXP_MIN_VAL)) ? 0.0:SCALAR_EXP(x[1]),
-                };
-        }
     }
 
     return ret;
diff --git a/src/optmized/vec/vrd2_log.c b/src/optmized/vec/vrd2_log.c
index 98e3295..92d8df2 100644
--- a/src/optmized/vec/vrd2_log.c
+++ b/src/optmized/vec/vrd2_log.c
@@ -32,7 +32,6 @@
 #include <libm_special.h>
 #include <libm/poly-vec.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -143,9 +142,9 @@ ALM_PROTO_OPT(vrd2_log) (__m128d x)
 
     v_i64x2_t ix;
 
-    ix = as_v2_u64_f64(x);
+    ix = as_v2_i64_f64(x);
 
-    v_i64x2_t condition = (as_v2_u64_f64(x) - V_MIN >= V_MAX - V_MIN);
+    v_u64x2_t condition = (as_v2_u64_f64(x) - V_MIN >= V_MAX - V_MIN);
 
     ix = (ix - TWO_BY_THREE) & INF;
 
diff --git a/src/optmized/vec/vrd2_pow.c b/src/optmized/vec/vrd2_pow.c
index 69a10f6..69d1b0c 100644
--- a/src/optmized/vec/vrd2_pow.c
+++ b/src/optmized/vec/vrd2_pow.c
@@ -30,7 +30,6 @@
 #include <libm_special.h>
 
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -41,8 +40,8 @@
 #include <libm/poly-vec.h>
 
 typedef struct {
-    uint64_t head;
-    uint64_t tail;
+    double head;
+    double tail;
 } lookup_data;
 
 
@@ -251,7 +250,7 @@ pow_specialcase(v_f64x2_t _x,
 static inline v_f64x2_t
 calculate_log(v_u64x2_t ux, v_f64x2_t* logx_t)
 {
-    v_i64x2_t int_exponent =  (ux >> 52) - DP64_BIAS;
+    v_u64x2_t int_exponent =  (ux >> 52) - DP64_BIAS;
 
     v_u64x2_t mant  = ((ux & MANTISSA_BITS) | DP_HALF);
 
@@ -283,13 +282,13 @@ calculate_log(v_u64x2_t ux, v_f64x2_t* logx_t)
 
         exponent[lane] = int_exponent[lane];
 
-        F_INV_HEAD[lane] = asdouble(TAB_F_INV[j].head);
+        F_INV_HEAD[lane] = TAB_F_INV[j].head;
 
-        F_INV_TAIL[lane] = asdouble(TAB_F_INV[j].tail);
+        F_INV_TAIL[lane] = TAB_F_INV[j].tail;
 
-        LOG_256_HEAD[lane] = asdouble(TAB_LOG[j].head);
+        LOG_256_HEAD[lane] = TAB_LOG[j].head;
 
-        LOG_256_TAIL[lane] = asdouble(TAB_LOG[j].tail);
+        LOG_256_TAIL[lane] = TAB_LOG[j].tail;
 
     }
 
@@ -345,7 +344,7 @@ calculate_exp(v_f64x2_t ylogx_h, v_f64x2_t ylogx_t)
 
     v_f64x2_t dn = z + EXP_HUGE;
 
-    v_i64x2_t n = as_v2_u64_f64(dn);
+    v_u64x2_t n = as_v2_u64_f64(dn);
 
     dn = dn - EXP_HUGE;
 
@@ -353,7 +352,7 @@ calculate_exp(v_f64x2_t ylogx_h, v_f64x2_t ylogx_t)
 
     v_f64x2_t r = ylogx_h - (dn * LOG2_BY_N_HEAD);
 
-    v_i64x2_t m = ((n - index) << (52 - N)) + ONE;
+    v_i64x2_t m = (v_i64x2_t)(((n - index) << (52 - N)) + ONE);
 
     r = (r - (LOG2_BY_N_TAIL * dn)) + ylogx_t;
 
@@ -369,9 +368,9 @@ calculate_exp(v_f64x2_t ylogx_h, v_f64x2_t ylogx_t)
 
         int32_t j = index[lane];
 
-        j_by_N_head[lane] = asdouble(TWO_POWER_J_BY_N[j].head);
+        j_by_N_head[lane] = TWO_POWER_J_BY_N[j].head;
 
-        j_by_N_tail[lane] = asdouble(TWO_POWER_J_BY_N[j].tail);
+        j_by_N_tail[lane] = TWO_POWER_J_BY_N[j].tail;
 
     }
 
@@ -381,7 +380,7 @@ calculate_exp(v_f64x2_t ylogx_h, v_f64x2_t ylogx_t)
 
     r = j_by_N_head + (z + q);
 
-    return r * as_v2_f64_u64(m);
+    return r * as_v2_f64_i64(m);
 
 }
 
diff --git a/src/optmized/vec/vrd2_sin.c b/src/optmized/vec/vrd2_sin.c
index 23a6526..7d42314 100644
--- a/src/optmized/vec/vrd2_sin.c
+++ b/src/optmized/vec/vrd2_sin.c
@@ -61,7 +61,7 @@ static struct {
     v_u64x2_t max_arg;
     v_f64x2_t poly_sin[8];
  } v2_sin_data = {
-     .max_arg = _MM_SET1_I64x2(0x7ff0000000000000),
+     .max_arg = _MM_SET1_I64x2(0x4160000000000000),
      .sign_mask  = _MM_SET1_I64x2(0x7fffffffffffffff),
      .pi1   = _MM_SET1_PD2(0x1.921fb54442d18p+1),
      .pi2   = _MM_SET1_PD2(0x1.1a62633145c06p-53),
@@ -109,7 +109,7 @@ double ALM_PROTO(sin)(double);
 static inline v_f64x2_t
 sin_specialcase(v_f64x2_t _x,
                  v_f64x2_t result,
-                 v_i64x2_t cond)
+                 v_u64x2_t cond)
 {
 
     return (v_f64x2_t) {
diff --git a/src/optmized/vec/vrd2_tan.c b/src/optmized/vec/vrd2_tan.c
new file mode 100644
index 0000000..5ced32e
--- /dev/null
+++ b/src/optmized/vec/vrd2_tan.c
@@ -0,0 +1,217 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#include <stdint.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   double tan(double x)
+ *
+ * Spec:
+ *   tan(n· 2π + π/4)  = 1       if n∈Z and |n· 2π + π/4|   <= big_angle_F
+ *   tan(n· 2π + 3π/4) = −1      if n∈Z and |n· 2π + 3π/4|  <= big angle rF
+ *   tan(x) = x                  if x ∈ F^(2·π) and tan(x) != tan(x)
+ *                                               and |x| < sqrt(epsilonF/rF)
+ *   tan(−x) = −tan(x)          if x ∈ F^(2·π)
+ */
+
+static struct {
+    v_f64x2_t invhalfpi, huge;
+    v_u64x2_t arg_max;
+    v_f64x2_t halfpi1, halfpi2, halfpi3;
+    v_f64x2_t poly_tan[14];
+} tan_v2_data = {
+    .arg_max   = _MM_SET1_I64x2(0x4160000000000000),
+    .huge      = _MM_SET1_PD2(0x1.8000000000000p52),
+    //.halfpi   = 0x1.921fb54442d18p0,
+    .invhalfpi = _MM_SET1_PD2(0x1.45f306dc9c882a53f85p-1),
+    .halfpi1   = _MM_SET1_PD2(0x1.921fb54442d18p0),
+    .halfpi2   = _MM_SET1_PD2(0x1.1a62633145c07p-54),
+    .halfpi3   = _MM_SET1_PD2(-0x1.f1976b7ed8fbcp-110),
+
+    /*
+     * Polynomial coefficients obtained using
+     * fpminimax algorithm from Sollya
+     */
+    .poly_tan = {
+        _MM_SET1_PD2(0x1.55555555554bep-2),
+        _MM_SET1_PD2(0x1.1111111119f2ap-3),
+        _MM_SET1_PD2(0x1.ba1ba1b38733cp-5),
+        _MM_SET1_PD2(0x1.664f49c8b63e3p-6),
+        _MM_SET1_PD2(0x1.226e0f7f17778p-7),
+        _MM_SET1_PD2(0x1.d6d989f491431p-9),
+        _MM_SET1_PD2(0x1.7d57d7c375c03p-10),
+        _MM_SET1_PD2(0x1.38148605a1756p-11),
+        _MM_SET1_PD2(0x1.d15fa298b8b17p-13),
+        _MM_SET1_PD2(0x1.20250b03ea768p-13),
+        _MM_SET1_PD2(-0x1.cd6072c36a433p-16),
+        _MM_SET1_PD2(0x1.7b1cbff8d88e6p-14),
+        _MM_SET1_PD2(-0x1.7c588d6a4c96ep-15),
+        _MM_SET1_PD2(0x1.5fc28759e55bap-16),
+    },
+
+};
+
+#define ALM_TAN_V2_HUGE_VAL        tan_v2_data.huge
+//#define ALM_TAN_V2HALFPI           tan_v2_data.halfpi
+#define ALM_TAN_V2_HALFPI1         tan_v2_data.halfpi1
+#define ALM_TAN_V2_HALFPI2         tan_v2_data.halfpi2
+#define ALM_TAN_V2_HALFPI3         tan_v2_data.halfpi3
+#define ALM_TAN_V2_INVHALFPI       tan_v2_data.invhalfpi
+#define ALM_TAN_V2_ARG_MAX         tan_v2_data.arg_max
+#define ALM_TAN_V2_SIGN_MASK       (1UL<<63)
+
+
+#define C1  tan_v2_data.poly_tan[0]
+#define C3  tan_v2_data.poly_tan[1]
+#define C5  tan_v2_data.poly_tan[2]
+#define C7  tan_v2_data.poly_tan[3]
+#define C9  tan_v2_data.poly_tan[4]
+#define C11 tan_v2_data.poly_tan[5]
+#define C13 tan_v2_data.poly_tan[6]
+#define C15 tan_v2_data.poly_tan[7]
+#define C17 tan_v2_data.poly_tan[8]
+#define C19 tan_v2_data.poly_tan[9]
+#define C21 tan_v2_data.poly_tan[10]
+#define C23 tan_v2_data.poly_tan[11]
+#define C25 tan_v2_data.poly_tan[12]
+#define C27 tan_v2_data.poly_tan[13]
+
+
+extern double tan_specialcase(double x);
+/*
+ * Special case to handle
+ * - out of range
+ * - Inf/NaN
+ */
+static inline v_f64x2_t
+vrd2_tan_specialcase(v_f64x2_t _x, v_f64x2_t result, v_u64x2_t cond)
+{
+    return call_v2_f64(tan_specialcase, _x, result, cond);
+}
+
+/*
+ * Implementation Notes:
+ *
+ * float tanf(float x)
+ *      A given x is reduced into the form:
+ *
+ *               |x| = (N * π/2) + F
+ *
+ *      Where N is an integer obtained using:
+ *              N = round(x * 2/π)
+ *      And F is a fraction part lying in the interval
+ *              [-π/4, +π/4];
+ *
+ *      obtained as F = |x| - (N * π/2)
+ *
+ *      Thus tan(x) is given by
+ *
+ *              tan(x) = tan((N * π/2) + F) = tan(F)
+ *              when N is even,
+ *                     = -cot(F) = -1/tan(F)
+ *              when N is odd, tan(F) is approximated using a polynomial
+ *                      obtained from Remez approximation from Sollya.
+ *
+ */
+v_f64x2_t
+ALM_PROTO_OPT(vrd2_tan)(v_f64x2_t x)
+{
+    v_f64x2_t   F, poly, result, r;
+    v_u64x2_t   n, sign;
+    v_u64x2_t   ux = as_v2_u64_f64(x);
+
+    v_u64x2_t cond = (ux & ~ALM_TAN_V2_SIGN_MASK) > ALM_TAN_V2_ARG_MAX;
+
+    sign = ux & ALM_TAN_V2_SIGN_MASK;
+
+    r = as_v2_f64_u64(ux & ~ALM_TAN_V2_SIGN_MASK);
+
+    /*
+     * dn = x * (2/π)
+     * would turn to fma
+     */
+    v_f64x2_t dn =  r * ALM_TAN_V2_INVHALFPI + ALM_TAN_V2_HUGE_VAL;
+
+    /* n = (int)dn */
+    n   = as_v2_u64_f64(dn);
+
+    dn -= ALM_TAN_V2_HUGE_VAL;
+
+    /*
+     * Get the fraction part
+     *   F = xd - (n * π/2)
+     */
+    F = r - dn * ALM_TAN_V2_HALFPI1;  // F = x - n*pi1/2
+    F = F - dn * ALM_TAN_V2_HALFPI2;  // F = F - n*pi2/2
+    F = F - dn * ALM_TAN_V2_HALFPI3;  // F = F - n*pi3/2
+
+    v_u64x2_t odd = (n << 63);
+
+    /*
+     * Calculate the polynomial approximation
+     *  poly = x + C1*x^3 + C2*x^5 + C3*x^7 + C4*x^9 + C5*x^11 + \
+     *          C6*x^13 + C7*x^15 + C8*x^17 + C9*x^19 + \
+     *          C10*x^21 + C11*x^23 + C12*x^25 + C13*x^27 + C14*x^29;
+     *
+     *       = x + x * G*(C6 + G*(C7 + G*(C8 +
+     *                  G*(C9 + G*(C10+ G*(C11 + G*(C12 +
+     *                          G*(C13 + C14*G))))
+     *                  ))))
+     *
+     * Polynomial is approximated as x+x*P(G)  where G = x^2
+     */
+
+    poly = POLY_EVAL_ODD_29(F, C1, C3, C5, C7, C9,
+                            C11, C13, C15, C17, C19,
+                            C21, C23, C25, C27);
+
+    result = as_v2_f64_u64(as_v2_u64_f64(poly) ^ sign);
+
+#define V2_SIMD_WIDTH 2
+
+    for (int i = 0; i < V2_SIMD_WIDTH; i++) {
+        result[i] = odd[i] ? (-1.0 / result[i]) : result[i];
+    }
+
+    if (any_v2_u64_loop(cond))
+        result = vrd2_tan_specialcase(x, result, cond);
+
+    return result;
+}
diff --git a/src/optmized/vec/vrd4_cos.c b/src/optmized/vec/vrd4_cos.c
new file mode 100644
index 0000000..f093b35
--- /dev/null
+++ b/src/optmized/vec/vrd4_cos.c
@@ -0,0 +1,189 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   v_f64x4_t vrd2_cos(v_f64x4_t x)
+ *
+ * Spec:
+ *  cos(0)    = 1
+ *  cos(-0)   = 1
+ *  cos(inf)  = NaN
+ *  cos(-inf) = NaN
+ *
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ * To compute cos(v_f64x4_t x)
+ *
+ * 1. Argument Reduction
+ *      Let input  x be represented as,
+ *          |x| = N * pi + f        (1) | N is an integer,
+ *                                        -pi/2 <= f <= pi/2
+ *
+ *      From (2), N = int(x / pi + 1/2) - 1/2
+ *                f = |x| - (N * pi)
+ *
+ * 2. Polynomial Evaluation
+ *       From (1) and (2),cos(f) can be calculated using a polynomial
+ *       cos(f) = f + C1 * f^3 + C2 * f^5 + C3 * f^7 + C4 * f^9 +
+ *                C5 * f^11 + C6 * f^13 + C7 * f^15 + C8 * f^17
+ *
+ * 3. Reconstruction
+ *      Hence, cos(x) = sin(x + pi/2) = sign(x) * cos(f)
+ *
+ * MAX ULP of current implementation : 2
+ */
+
+
+#include <stdint.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+        v_f64x4_t poly_cos[8];
+        v_f64x4_t pi, halfpi, invpi;
+        v_f64x4_t pi1, pi2, pi3;
+        v_f64x4_t half, alm_huge;
+        v_u64x4_t sign_mask, max;
+        } v4_cos_data = {
+                        .pi        = _MM_SET1_PD4(0x1.921fb54442d188p1),
+                        .halfpi    = _MM_SET1_PD4(0x1.921fb54442d18p0),
+                        .invpi     = _MM_SET1_PD4(0x1.45f306dc9c883p-2),
+                        .pi1       = _MM_SET1_PD4(-0x1.921fb54442d18p+1),
+                        .pi2       = _MM_SET1_PD4(-0x1.1a62633145c07p-53),
+                        .pi3       = _MM_SET1_PD4(0x1.f1976b7ed8fbcp-109),
+                        .half      = _MM_SET1_PD4(0x1p-1),
+                        .alm_huge  = _MM_SET1_PD4(0x1.8p+52),
+                        .sign_mask = _MM_SET1_I64(0x7FFFFFFFFFFFFFFF),
+                        .max       = _MM_SET1_I64(0x4160000000000000), /* 0x1p23 */
+                        .poly_cos  = {
+                                        _MM_SET1_PD4(-0x1.5555555555555p-3),
+                                        _MM_SET1_PD4(0x1.11111111110bp-7),
+                                        _MM_SET1_PD4(-0x1.a01a01a013e1ap-13),
+                                        _MM_SET1_PD4(0x1.71de3a524f063p-19),
+                                        _MM_SET1_PD4(-0x1.ae6454b5dc0b5p-26),
+                                        _MM_SET1_PD4(0x1.6123c686ad6b4p-33),
+                                        _MM_SET1_PD4(-0x1.ae420dc08fd52p-41),
+                                        _MM_SET1_PD4(0x1.880ff69a83bbep-49),
+                                    },
+        };
+
+#define V4_COS_PI      v4_cos_data.pi
+#define V4_COS_HALF_PI v4_cos_data.halfpi
+#define V4_COS_INV_PI  v4_cos_data.invpi
+#define V4_COS_PI1     v4_cos_data.pi1
+#define V4_COS_PI2     v4_cos_data.pi2
+#define V4_COS_PI3     v4_cos_data.pi3
+#define V4_COS_HALF    v4_cos_data.half
+
+
+#define C1 v4_cos_data.poly_cos[0]
+#define C2 v4_cos_data.poly_cos[1]
+#define C3 v4_cos_data.poly_cos[2]
+#define C4 v4_cos_data.poly_cos[3]
+#define C5 v4_cos_data.poly_cos[4]
+#define C6 v4_cos_data.poly_cos[5]
+#define C7 v4_cos_data.poly_cos[6]
+#define C8 v4_cos_data.poly_cos[7]
+
+#define V4_COS_SIGN_MASK v4_cos_data.sign_mask
+#define V4_COS_MAX       v4_cos_data.max
+#define V4_ALM_HUGE      v4_cos_data.alm_huge
+
+double ALM_PROTO(cos)(double);
+
+static inline v_f64x4_t
+cos_specialcase(v_f64x4_t _x, v_f64x4_t result,
+                              v_u64x4_t cond)
+{
+    return (v_f64x4_t) {
+            (cond[0]) ? ALM_PROTO(cos)(_x[0]):result[0],
+            (cond[1]) ? ALM_PROTO(cos)(_x[1]):result[1],
+            (cond[2]) ? ALM_PROTO(cos)(_x[2]):result[2],
+            (cond[3]) ? ALM_PROTO(cos)(_x[3]):result[3],
+        };
+}
+
+v_f64x4_t
+ALM_PROTO_OPT(vrd4_cos)(v_f64x4_t x)
+{
+
+    v_f64x4_t dinput, dn, frac, poly, result;
+
+    v_u64x4_t n, ixd, odd;
+
+    ixd = as_v4_u64_f64(x);
+
+    /* Check for special cases */
+    v_u64x4_t cond = (ixd & V4_COS_SIGN_MASK) > (V4_COS_MAX);
+
+    /* Remove sign from the input */
+    ixd = ixd & V4_COS_SIGN_MASK;
+    dinput = as_v4_f64_u64(ixd);
+
+    /* Get n = int(x / pi + 1/2) - 1/2 */
+    dn = ((dinput * V4_COS_INV_PI) + V4_COS_HALF) + V4_ALM_HUGE;
+    n = as_v4_u64_f64(dn);
+    dn = dn - V4_ALM_HUGE;
+    dn = dn - V4_COS_HALF;
+
+    /* frac = x - (n*pi) */
+    frac = dinput + dn * V4_COS_PI1;
+    frac = frac + dn * V4_COS_PI2;
+    frac = frac + dn * V4_COS_PI3;
+
+    /* Check if n is odd or not */
+    odd = n << 63;
+
+    /* Compute cos(f) using the polynomial
+     * f + C1 * f^3 + C2 * f^5 + C3 * f^7 + C4 * f^9 +
+     * C5 * f^11 + C6 * f^13 + C7 * f^15 + C8 * f^17
+     */
+    poly = frac + POLY_EVAL_ODD_17(frac, C1, C2, C3, C4, C5, C6, C7, C8);
+
+    /* If n is odd, result is negative */
+    result = as_v4_f64_u64( as_v4_u64_f64(poly) ^ odd);
+
+    if(unlikely(any_v4_u64_loop(cond))) {
+        return cos_specialcase(x, result,cond);
+    }
+
+    return result;
+
+}
+
diff --git a/src/optmized/vec/vrd4_exp.c b/src/optmized/vec/vrd4_exp.c
index 59d4a23..f852d0c 100644
--- a/src/optmized/vec/vrd4_exp.c
+++ b/src/optmized/vec/vrd4_exp.c
@@ -66,7 +66,6 @@
 #include <libm_util_amd.h>
 #include <libm_special.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
 #include <libm/typehelper-vec.h>
@@ -145,7 +144,7 @@ v_f64x4_t
 ALM_PROTO_OPT(vrd4_exp)(v_f64x4_t x)
 {
 
-    v_i64x4_t vx = as_v4_u64_f64(x);
+    v_i64x4_t vx = as_v4_i64_f64(x);
 
     // Get absolute value
     vx = vx & MASK;
@@ -159,7 +158,7 @@ ALM_PROTO_OPT(vrd4_exp)(v_f64x4_t x)
     v_f64x4_t dn = z + EXP_HUGE;
 
     // n = int (z)
-    v_i64x4_t n = as_v4_u64_f64(dn);
+    v_i64x4_t n = as_v4_i64_f64(dn);
 
     // dn = double(n)
     dn = dn - EXP_HUGE;
@@ -186,34 +185,16 @@ ALM_PROTO_OPT(vrd4_exp)(v_f64x4_t x)
                                   C7, C8, C9, C10, C11, C12);
 
     // result = poly * 2^m
-    v_f64x4_t ret = poly * as_v4_f64_u64(m);
+    v_f64x4_t ret = poly * as_v4_f64_i64(m);
 
     if(unlikely(any_v4_u64_loop(cond))) {
 
-        v_i64x4_t inf_condition = x > EXP_MAX;
-
-        v_i64x4_t zero_condition = x < EXP_LOW;
-
-        v_64x4 vx = {.f64x4 = ret};
-
-        //Zero out the elements that have to be set to infinity
-        vx.i64x4 = vx.i64x4 & (~inf_condition);
-
-        inf_condition = inf_condition & INF;
-
-        vx.i64x4 = vx.i64x4 | inf_condition;
-
-        ret =  vx.f64x4;
-
-        //To handle denormal numbers
-        if(any_v4_u64_loop(zero_condition)) {
-            return (v_f64x4_t) {
-                (zero_condition[0] && (x[0] < EXP_MIN_VAL)) ? 0.0:SCALAR_EXP(x[0]),
-                (zero_condition[1] && (x[1] < EXP_MIN_VAL)) ? 0.0:SCALAR_EXP(x[1]),
-                (zero_condition[2] && (x[2] < EXP_MIN_VAL)) ? 0.0:SCALAR_EXP(x[2]),
-                (zero_condition[3] && (x[3] < EXP_MIN_VAL)) ? 0.0:SCALAR_EXP(x[3]),
-            };
-        }
+        return (v_f64x4_t) {
+            (cond[0]) ? SCALAR_EXP(x[0]):ret[0],
+            (cond[1]) ? SCALAR_EXP(x[1]):ret[1],
+            (cond[2]) ? SCALAR_EXP(x[2]):ret[2],
+            (cond[3]) ? SCALAR_EXP(x[3]):ret[3],
+        };
 
     }
 
diff --git a/src/optmized/vec/vrd4_log.c b/src/optmized/vec/vrd4_log.c
index a40c5c8..e0a5c08 100644
--- a/src/optmized/vec/vrd4_log.c
+++ b/src/optmized/vec/vrd4_log.c
@@ -31,7 +31,6 @@
 #include <libm_special.h>
 #include <libm/poly-vec.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -104,7 +103,7 @@ static struct {
 static inline v_f64x4_t
 log_specialcase(v_f64x4_t _x,
                  v_f64x4_t result,
-                 v_i64x4_t cond)
+                 v_u64x4_t cond)
 {
     return v_call_f64(ALM_PROTO(log), _x, result, cond);
 }
@@ -148,9 +147,9 @@ ALM_PROTO_OPT(vrd4_log) (__m256d x)
 
     v_i64x4_t ix;
 
-    ix = as_v4_u64_f64(x);
+    ix = as_v4_i64_f64(x);
 
-    v_i64x4_t condition = (as_v4_u64_f64(x) - V_MIN >= V_MAX - V_MIN);
+    v_u64x4_t condition = (as_v4_u64_f64(x) - V_MIN >= V_MAX - V_MIN);
 
     ix = (ix - TWO_BY_THREE) & INF;
 
@@ -164,7 +163,7 @@ ALM_PROTO_OPT(vrd4_log) (__m256d x)
 
     }
 
-    n = _mm256_cvtepi32_pd(int32_exponent);
+    n = (v_f64x4_t)_mm256_cvtepi32_pd((__m128i)int32_exponent);
 
 	/* Reduce the mantissa, m to [2/3, 4/3] */
 
diff --git a/src/optmized/vec/vrd4_pow.c b/src/optmized/vec/vrd4_pow.c
index 28488e2..2583f16 100644
--- a/src/optmized/vec/vrd4_pow.c
+++ b/src/optmized/vec/vrd4_pow.c
@@ -29,7 +29,6 @@
 #include <libm_special.h>
 
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -40,8 +39,8 @@
 #include <libm/poly-vec.h>
 
 typedef struct {
-    uint64_t head;
-    uint64_t tail;
+    double head;
+    double tail;
 } lookup_data;
 
 
@@ -258,7 +257,7 @@ ALM_PROTO_OPT(vrd4_pow)(__m256d _x,__m256d _y)
 
     v_i64x4_t condition = (ux - V_MIN >= V_MAX - V_MIN);
 
-    v_i64x4_t int_exponent =  (ux >> 52) - DP64_BIAS;
+    v_i64x4_t int_exponent = (v_i64x4_t)( (ux >> 52) - DP64_BIAS );
 
     v_u64x4_t mant  = ((ux & MANTISSA_BITS) | DP_HALF);
 
@@ -288,17 +287,17 @@ ALM_PROTO_OPT(vrd4_pow)(__m256d _x,__m256d _y)
 
         int32_exponent[lane] = int_exponent[lane];
 
-        F_INV_HEAD[lane] = asdouble(TAB_F_INV[j].head);
+        F_INV_HEAD[lane] = TAB_F_INV[j].head;
 
-        F_INV_TAIL[lane] = asdouble(TAB_F_INV[j].tail);
+        F_INV_TAIL[lane] = TAB_F_INV[j].tail;
 
-        LOG_256_HEAD[lane] = asdouble(TAB_LOG[j].head);
+        LOG_256_HEAD[lane] = TAB_LOG[j].head;
 
-        LOG_256_TAIL[lane] = asdouble(TAB_LOG[j].tail);
+        LOG_256_TAIL[lane] = TAB_LOG[j].tail;
 
     }
 
-    v_f64x4_t exponent =  _mm256_cvtepi32_pd (int32_exponent);
+    v_f64x4_t exponent = (v_f64x4_t) _mm256_cvtepi32_pd ((__m128i)int32_exponent);
 
     r = f * F_INV_TAIL;
 
@@ -351,11 +350,11 @@ ALM_PROTO_OPT(vrd4_pow)(__m256d _x,__m256d _y)
 
     v_f64x4_t dn = z + EXP_HUGE;
 
-    v_i64x4_t n = as_v4_u64_f64(dn);
+    v_i64x4_t n = as_v4_i64_f64(dn);
 
     dn = dn - EXP_HUGE;
 
-    index = n & DP64_BIAS;
+    index = (v_u64x4_t)(n & DP64_BIAS);
 
     r = ylogx_h - (dn * LOG2_BY_N_HEAD);
 
@@ -375,9 +374,9 @@ ALM_PROTO_OPT(vrd4_pow)(__m256d _x,__m256d _y)
 
         int32_t j = index[lane];
 
-        j_by_N_head[lane] = asdouble(TWO_POWER_J_BY_N[j].head);
+        j_by_N_head[lane] = TWO_POWER_J_BY_N[j].head;
 
-        j_by_N_tail[lane] = asdouble(TWO_POWER_J_BY_N[j].tail);
+        j_by_N_tail[lane] = TWO_POWER_J_BY_N[j].tail;
 
     }
 
@@ -387,7 +386,7 @@ ALM_PROTO_OPT(vrd4_pow)(__m256d _x,__m256d _y)
 
     r = j_by_N_head + (z + q);
 
-    result = r * as_v4_f64_u64(m);
+    result = r * as_v4_f64_i64(m);
 
     if (unlikely(check_condition(&condition, condition2))) {
         return pow_specialcase(_x, _y, result, condition);
diff --git a/src/optmized/vec/vrd4_sin.c b/src/optmized/vec/vrd4_sin.c
index 2941821..3eabd14 100644
--- a/src/optmized/vec/vrd4_sin.c
+++ b/src/optmized/vec/vrd4_sin.c
@@ -64,7 +64,7 @@ static struct {
     v_u64x4_t max_arg;
     v_f64x4_t poly_sin[8];
  } v4_sin_data = {
-     .max_arg = _MM_SET1_I64(0x7ff0000000000000),
+     .max_arg = _MM_SET1_I64(0x4160000000000000),
      .sign_mask  = _MM_SET1_I64(0x7fffffffffffffff),
      .pi1   = _MM_SET1_PD4(0x1.921fb54442d18p+1),
      .pi2   = _MM_SET1_PD4(0x1.1a62633145c06p-53),
@@ -112,7 +112,7 @@ double ALM_PROTO(sin)(double);
 static inline v_f64x4_t
 sin_specialcase(v_f64x4_t _x,
                  v_f64x4_t result,
-                 v_i64x4_t cond)
+                 v_u64x4_t cond)
 {
 
     return v_call_f64(ALM_PROTO(sin), _x, result, cond);
diff --git a/src/optmized/vec/vrd4_tan.c b/src/optmized/vec/vrd4_tan.c
new file mode 100644
index 0000000..e4658d0
--- /dev/null
+++ b/src/optmized/vec/vrd4_tan.c
@@ -0,0 +1,218 @@
+/*
+ * Copyright (C) 2018-2020, Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+
+#include <stdint.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   double tan(double x)
+ *
+ * Spec:
+ *   tan(n· 2π + π/4)  = 1       if n∈Z and |n· 2π + π/4|   <= big_angle_F
+ *   tan(n· 2π + 3π/4) = −1      if n∈Z and |n· 2π + 3π/4|  <= big angle rF
+ *   tan(x) = x                  if x ∈ F^(2·π) and tan(x) != tan(x)
+ *                                               and |x| < sqrt(epsilonF/rF)
+ *   tan(−x) = −tan(x)          if x ∈ F^(2·π)
+ */
+
+static struct {
+    v_f64x4_t invhalfpi, huge;
+    v_u64x4_t arg_max;
+    v_f64x4_t halfpi1, halfpi2, halfpi3;
+    v_f64x4_t poly_tan[14];
+} tan_v4_data = {
+    .arg_max   = _MM_SET1_I64(0x4160000000000000), /* 10^6 */
+    .huge      = _MM_SET1_PD4(0x1.8000000000000p52),
+    //.halfpi   = 0x1.921fb54442d18p0,
+    .invhalfpi = _MM_SET1_PD4(0x1.45f306dc9c882a53f85p-1),
+    .halfpi1   = _MM_SET1_PD4(0x1.921fb54442d18p0),
+    .halfpi2   = _MM_SET1_PD4(0x1.1a62633145c07p-54),
+    .halfpi3   = _MM_SET1_PD4(-0x1.f1976b7ed8fbcp-110),
+
+    /*
+     * Polynomial coefficients obtained using
+     * fpminimax algorithm from Sollya
+     */
+    .poly_tan = {
+        _MM_SET1_PD4(0x1.55555555554bep-2),
+        _MM_SET1_PD4(0x1.1111111119f2ap-3),
+        _MM_SET1_PD4(0x1.ba1ba1b38733cp-5),
+        _MM_SET1_PD4(0x1.664f49c8b63e3p-6),
+        _MM_SET1_PD4(0x1.226e0f7f17778p-7),
+        _MM_SET1_PD4(0x1.d6d989f491431p-9),
+        _MM_SET1_PD4(0x1.7d57d7c375c03p-10),
+        _MM_SET1_PD4(0x1.38148605a1756p-11),
+        _MM_SET1_PD4(0x1.d15fa298b8b17p-13),
+        _MM_SET1_PD4(0x1.20250b03ea768p-13),
+        _MM_SET1_PD4(-0x1.cd6072c36a433p-16),
+        _MM_SET1_PD4(0x1.7b1cbff8d88e6p-14),
+        _MM_SET1_PD4(-0x1.7c588d6a4c96ep-15),
+        _MM_SET1_PD4(0x1.5fc28759e55bap-16),
+    },
+
+};
+
+#define ALM_TAN_V4_HUGE_VAL        tan_v4_data.huge
+//#define ALM_TAN_V4HALFPI           tan_v4_data.halfpi
+#define ALM_TAN_V4_HALFPI1         tan_v4_data.halfpi1
+#define ALM_TAN_V4_HALFPI2         tan_v4_data.halfpi2
+#define ALM_TAN_V4_HALFPI3         tan_v4_data.halfpi3
+#define ALM_TAN_V4_INVHALFPI       tan_v4_data.invhalfpi
+#define ALM_TAN_V4_ARG_MAX         tan_v4_data.arg_max
+#define ALM_TAN_V4_SIGN_MASK       (1UL<<63)
+
+
+#define C1  tan_v4_data.poly_tan[0]
+#define C3  tan_v4_data.poly_tan[1]
+#define C5  tan_v4_data.poly_tan[2]
+#define C7  tan_v4_data.poly_tan[3]
+#define C9  tan_v4_data.poly_tan[4]
+#define C11 tan_v4_data.poly_tan[5]
+#define C13 tan_v4_data.poly_tan[6]
+#define C15 tan_v4_data.poly_tan[7]
+#define C17 tan_v4_data.poly_tan[8]
+#define C19 tan_v4_data.poly_tan[9]
+#define C21 tan_v4_data.poly_tan[10]
+#define C23 tan_v4_data.poly_tan[11]
+#define C25 tan_v4_data.poly_tan[12]
+#define C27 tan_v4_data.poly_tan[13]
+
+
+extern double tan_specialcase(double x);
+/*
+ * Special case to handle
+ * - out of range
+ * - Inf/NaN
+ */
+static inline v_f64x4_t
+vrd4_tan_specialcase(v_f64x4_t _x, v_f64x4_t result, v_u64x4_t cond)
+{
+    return call_v4_f64(tan_specialcase, _x, result, cond);
+}
+
+/*
+ * Implementation Notes:
+ *
+ * float tanf(float x)
+ *      A given x is reduced into the form:
+ *
+ *               |x| = (N * π/2) + F
+ *
+ *      Where N is an integer obtained using:
+ *              N = round(x * 2/π)
+ *      And F is a fraction part lying in the interval
+ *              [-π/4, +π/4];
+ *
+ *      obtained as F = |x| - (N * π/2)
+ *
+ *      Thus tan(x) is given by
+ *
+ *              tan(x) = tan((N * π/2) + F) = tan(F)
+ *              when N is even,
+ *                     = -cot(F) = -1/tan(F)
+ *              when N is odd, tan(F) is approximated using a polynomial
+ *                      obtained from Remez approximation from Sollya.
+ *
+ */
+v_f64x4_t
+ALM_PROTO_OPT(vrd4_tan)(v_f64x4_t x)
+{
+    v_f64x4_t   F, poly, result, r;
+    v_u64x4_t   n, sign;
+    v_u64x4_t   ux = as_v4_u64_f64(x);
+
+    v_u64x4_t cond = (ux & ~ALM_TAN_V4_SIGN_MASK) > ALM_TAN_V4_ARG_MAX;
+
+    sign = ux & ALM_TAN_V4_SIGN_MASK;
+
+    r = as_v4_f64_u64(ux & ~ALM_TAN_V4_SIGN_MASK);
+
+    /*
+     * dn = x * (2/π)
+     * would turn to fma
+     */
+    v_f64x4_t dn =  r * ALM_TAN_V4_INVHALFPI + ALM_TAN_V4_HUGE_VAL;
+
+    /* n = (int)dn */
+    n   = as_v4_u64_f64(dn);
+
+    dn -= ALM_TAN_V4_HUGE_VAL;
+
+    /*
+     * Get the fraction part
+     *   F = xd - (n * π/2)
+     */
+    F = r - dn * ALM_TAN_V4_HALFPI1;  // F = x - n*pi1/2
+    F = F - dn * ALM_TAN_V4_HALFPI2;  // F = F - n*pi2/2
+    F = F - dn * ALM_TAN_V4_HALFPI3;  // F = F - n*pi3/2
+
+    v_u64x4_t odd = (n << 63);
+
+    /*
+     * Calculate the polynomial approximation
+     *  poly = x + C1*x^3 + C2*x^5 + C3*x^7 + C4*x^9 + C5*x^11 + \
+     *          C6*x^13 + C7*x^15 + C8*x^17 + C9*x^19 + \
+     *          C10*x^21 + C11*x^23 + C12*x^25 + C13*x^27 + C14*x^29;
+     *
+     *       = x + x * G*(C6 + G*(C7 + G*(C8 +
+     *                  G*(C9 + G*(C10+ G*(C11 + G*(C12 +
+     *                          G*(C13 + C14*G))))
+     *                  ))))
+     *
+     * Polynomial is approximated as x+x*P(G)  where G = x^2
+     */
+
+    poly = POLY_EVAL_ODD_29(F, C1, C3, C5, C7, C9,
+                            C11, C13, C15, C17, C19,
+                            C21, C23, C25, C27);
+
+    result = as_v4_f64_u64(as_v4_u64_f64(poly) ^ sign);
+
+#define V4_SIMD_WIDTH 4
+
+    for (int i = 0; i < V4_SIMD_WIDTH; i++) {
+        result[i] = odd[i] ? (-1.0 / result[i]) : result[i];
+    }
+
+    if (any_v4_u64_loop(cond))
+        result = vrd4_tan_specialcase(x, result, cond);
+
+    return result;
+}
diff --git a/src/optmized/vec/vrs4_cosf.c b/src/optmized/vec/vrs4_cosf.c
index d1afb30..7397855 100644
--- a/src/optmized/vec/vrs4_cosf.c
+++ b/src/optmized/vec/vrs4_cosf.c
@@ -38,12 +38,11 @@
  * cos(x) = sin(x + pi/2)           (1)
  *
  * 1. Argument Reduction
- *      Adding pi/2 to x, x is now x + pi/2
  *      Now, let x be represented as,
  *          |x| = N * pi + f        (2) | N is an integer,
  *                                        -pi/2 <= f <= pi/2
  *
- *      From (2), N = int(x / pi)
+ *      From (2), N = int( (x + pi/2) / pi) - 0.5
  *                f = |x| - (N * pi)
  *
  * 2. Polynomial Evaluation
@@ -71,106 +70,99 @@
 
 static struct {
 
-            v_f64x4_t poly_cosf[5];
-            v_f64x4_t half_pi, inv_pi, pi_head, pi_tail;
-            v_f64x4_t alm_huge;
-            v_u32x4_t mask_32, infinity;
-            v_u64x4_t sign_mask;
-            } cosf_data = {
-                            .half_pi   = _MM_SET1_PD4(0x1.921fb54442d18p0),
-                            .inv_pi    = _MM_SET1_PD4(0x1.45f306dc9c883p-2),
-                            .pi_head   = _MM_SET1_PD4(0x1.921fb50000000p1),
-                            .pi_tail   = _MM_SET1_PD4(0x1.110b4611a6263p-25),
-                            .alm_huge  = _MM_SET1_PD4(0x1.8p+52),
-                            .sign_mask = _MM_SET1_I64(0x7FFFFFFFFFFFFFFF),
+            v_f32x4_t poly_cosf[5];
+            v_f32x4_t half;
+            v_f32x4_t half_pi, inv_pi, pi_head, pi_tail1, pi_tail2;
+            v_f32x4_t alm_huge;
+            v_u32x4_t mask_32, arg_max;
+            } v4_cosf_data = {
+                            .half      = _MM_SET1_PS4(0x1p-1f),
+                            .half_pi   = _MM_SET1_PS4(0x1.921fb6p0f),
+                            .inv_pi    = _MM_SET1_PS4(0x1.45f306p-2f),
+                            .pi_head   = _MM_SET1_PS4(-0x1.921fb6p1f),
+                            .pi_tail1  = _MM_SET1_PS4(0x1.777a5cp-24f),
+                            .pi_tail2  = _MM_SET1_PS4(0x1.ee59dap-49f),
+                            .alm_huge  = _MM_SET1_PS4(0x1.8p23f),
                             .mask_32   = _MM_SET1_I32(0x7FFFFFFF),
-                            .infinity  = _MM_SET1_I32(0x7f800000),
+                            .arg_max   = _MM_SET1_I32(0x4A989680),
                             .poly_cosf = {
-                                            _MM_SET1_PD4(0x1p0),
-                                            _MM_SET1_PD4(-0x1.55554d018df8bp-3),
-                                            _MM_SET1_PD4(0x1.110f0293a5dcbp-7),
-                                            _MM_SET1_PD4(-0x1.9f781a0aebdb9p-13),
-                                            _MM_SET1_PD4(0x1.5e2a3e7550c85p-19),
+                                            _MM_SET1_PS4(0x1.p0f),
+                                            _MM_SET1_PS4(-0x1.555548p-3f),
+                                            _MM_SET1_PS4(0x1.110df4p-7f),
+                                            _MM_SET1_PS4(-0x1.9f42eap-13f),
+                                            _MM_SET1_PS4(0x1.5b2e76p-19f),
                                          },
             };
 
-#define HALF_PI   cosf_data.half_pi
-#define INV_PI    cosf_data.inv_pi
-#define PI_HEAD   cosf_data.pi_head
-#define PI_TAIL   cosf_data.pi_tail
-#define ALM_HUGE  cosf_data.alm_huge
-#define SIGN_MASK cosf_data.sign_mask
-#define MASK_32   cosf_data.mask_32
-#define ARG_MAX   cosf_data.infinity
-
-#define C0 cosf_data.poly_cosf[0]
-#define C1 cosf_data.poly_cosf[1]
-#define C2 cosf_data.poly_cosf[2]
-#define C3 cosf_data.poly_cosf[3]
-#define C4 cosf_data.poly_cosf[4]
+#define V4_COSF_HALF       v4_cosf_data.half
+#define V4_COSF_HALF_PI    v4_cosf_data.half_pi
+#define V4_COSF_INV_PI     v4_cosf_data.inv_pi
+#define V4_COSF_PI_HEAD    v4_cosf_data.pi_head
+#define V4_COSF_PI_TAIL1   v4_cosf_data.pi_tail1
+#define V4_COSF_PI_TAIL2   v4_cosf_data.pi_tail2
+#define V4_COSF_MASK_32    v4_cosf_data.mask_32
+#define V4_COSF_ARG_MAX    v4_cosf_data.arg_max
+#define ALM_HUGE           v4_cosf_data.alm_huge
+
+#define C0 v4_cosf_data.poly_cosf[0]
+#define C1 v4_cosf_data.poly_cosf[1]
+#define C2 v4_cosf_data.poly_cosf[2]
+#define C3 v4_cosf_data.poly_cosf[3]
+#define C4 v4_cosf_data.poly_cosf[4]
+
 
 float ALM_PROTO(cosf)(float);
 
 static inline v_f32x4_t
-cosf_specialcase(v_f32x4_t _x, v_f32x4_t result, v_i32x4_t cond)
+cosf_specialcase(v_f32x4_t _x, v_f32x4_t result, v_u32x4_t cond)
 {
     return call_v4_f32(ALM_PROTO(cosf), _x, result, cond);
 }
 
+
 v_f32x4_t
 ALM_PROTO_OPT(vrs4_cosf)(v_f32x4_t x)
 {
 
-    v_f64x4_t dinput, frac, poly, result;
-    v_u64x4_t ixd;
+    v_f32x4_t dinput, frac, poly, result;
 
     v_u32x4_t ux = as_v4_u32_f32(x);
 
     /* Check for special cases */
-    v_u32x4_t cond = (ux & MASK_32) > ARG_MAX;
-
-    /* Convert input to double precision */
-    dinput = cast_v4_f32_to_f64(x);
-    ixd = as_v4_u64_f64(dinput);
+    v_u32x4_t cond = (ux & V4_COSF_MASK_32) > V4_COSF_ARG_MAX;
 
     /* Remove sign from input */
-    dinput = as_v4_f64_u64(ixd & SIGN_MASK);
+    dinput = as_v4_f32_u32(ux & V4_COSF_MASK_32);
 
-    /* x + pi/2 */
-    dinput = dinput + HALF_PI;
-
-    /* Get n = int (x/pi) */
-    v_f64x4_t dn = (dinput * INV_PI) + ALM_HUGE;
-    v_u64x4_t n = cast_v4_f64_to_i64(dn);
+    /* Get n = int ((x + pi/2) /pi) - 0.5 */
+    v_f32x4_t dn = ((dinput + V4_COSF_HALF_PI) * V4_COSF_INV_PI) + ALM_HUGE;
+    v_u32x4_t n = as_v4_u32_f32(dn);
     dn = dn - ALM_HUGE;
+    dn = dn - V4_COSF_HALF;
 
     /* frac = x - (n*pi) */
-    frac = dinput - (dn * PI_HEAD);
-    frac = frac - (dn * PI_TAIL);
+    frac = dinput + (dn * V4_COSF_PI_HEAD);
+    frac = frac + (dn * V4_COSF_PI_TAIL1);
+    frac = frac + (dn * V4_COSF_PI_TAIL2);
 
     /* Check if n is odd or not */
-    v_u64x4_t odd = n << 63;
+    v_u32x4_t odd = n << 31;
 
-    /*
-     * Compute sin(f) using the polynomial
+    /* Compute sin(f) using the polynomial
      * x*(1+C1*x^2+C2*x^4+C3*x^6+C4*x^8)
      */
     poly = POLY_EVAL_ODD_9(frac, C0, C1, C2, C3, C4);
 
     /* If n is odd, result is negative */
-    for (int i =0; i<4; i++)
-    {
-        if(odd[i])
-            result[i] = -poly[i];
-        else
-            result[i] = poly[i];
-    }
+    result = as_v4_f32_u32(as_v4_u32_f32(poly) ^ odd);
 
     /* If any of the input values are greater than ARG_MAX,
      * call scalar cosf
+
      */
-    if(unlikely(any_v4_u32(cond)))
-        return cosf_specialcase(x, cvt_v4_f64_to_f32(result), cond);
+    if(unlikely(any_v4_u32_loop(cond)))
+        return cosf_specialcase(x, result, cond);
 
-    return cvt_v4_f64_to_f32(result);
+    return result;
 }
+
diff --git a/src/optmized/vec/vrs4_coshf.c b/src/optmized/vec/vrs4_coshf.c
new file mode 100644
index 0000000..3169706
--- /dev/null
+++ b/src/optmized/vec/vrs4_coshf.c
@@ -0,0 +1,123 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   v_f32x4_t coshf(v_f32x4_t x)
+ *
+ * Spec:
+ *   coshf(|x| > 89.415985107421875) = Infinity
+ *   coshf(Infinity)  = infinity
+ *   coshf(-Infinity) = infinity
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ *
+ * cosh(x) = (exp(x) + exp(-x))/2
+ * cosh(-x) = +cosh(x)
+ *
+ * checks for special cases
+ * if ( asint(x) > infinity) return x with overflow exception and
+ * return x.
+ * if x is NaN then raise invalid FP operation exception and return x.
+ *
+ *  coshf = v/2 * exp(x - log(v)) where v = 0x1.0000e8p-1
+ *
+ */
+
+#include <stdint.h>
+#include <emmintrin.h>
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+    v_u32x4_t arg_max, sign_mask;
+    v_f32x4_t logV, invV2, halfV;
+    v_f32x4_t one;
+ } v4_coshf_data = {
+        .sign_mask = _MM_SET1_I32(0x7FFFFFFF),
+        .arg_max = _MM_SET1_I32(0x42B2D4FC),
+        .logV = _MM_SET1_PS4(0x1.62e6p-1f),
+        .invV2 = _MM_SET1_PS4(0x1.fffc6p-3f),
+        .halfV = _MM_SET1_PS4(0x1.0000e8p0f),
+        .one = _MM_SET1_PS4(1.0f),
+};
+
+#define SIGN_MASK v4_coshf_data.sign_mask
+#define LOGV      v4_coshf_data.logV
+#define INVV2     v4_coshf_data.invV2
+#define ONE       v4_coshf_data.one
+#define HALFVM1   v4_coshf_data.halfVm1
+#define HALFV     v4_coshf_data.halfV
+#define ARG_MAX   v4_coshf_data.arg_max
+
+v_f32x4_t ALM_PROTO(vrs4_expf)(v_f32x4_t);
+float ALM_PROTO(coshf)(float);
+
+static inline v_f32x4_t
+coshf_specialcase(v_f32x4_t _x, v_f32x4_t result, v_u32x4_t cond)
+{
+    return call_v4_f32(ALM_PROTO(coshf), _x, result, cond);
+}
+
+
+v_f32x4_t ALM_PROTO_OPT(vrs4_coshf)(v_f32x4_t x)
+{
+
+    v_f32x4_t z, y, result;
+
+    v_u32x4_t ux = as_v4_u32_f32(x) & SIGN_MASK;
+
+    y = as_v4_f32_u32(ux);
+
+    v_u32x4_t cond = ux > ARG_MAX;
+
+    z = ALM_PROTO(vrs4_expf)(y - LOGV);
+
+    result = HALFV * (z + INVV2 * ONE / z);
+
+    if(unlikely(any_v4_u32_loop(cond))) {
+
+        return coshf_specialcase(x, result, cond);
+
+    }
+
+    return result;
+
+}
+
+
+
+
diff --git a/src/optmized/vec/vrs4_expf.c b/src/optmized/vec/vrs4_expf.c
index 31a6c4a..b5ed4f2 100644
--- a/src/optmized/vec/vrs4_expf.c
+++ b/src/optmized/vec/vrs4_expf.c
@@ -61,7 +61,6 @@
 #include <libm_util_amd.h>
 #include <libm_special.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
 #include <libm/typehelper-vec.h>
@@ -134,7 +133,7 @@ ALM_PROTO_OPT(vrs4_expf)(v_f32x4_t _x)
     vx = vx & MASK;
 
     // Check if -103 < vx < 88
-    v_i32x4_t cond = ((vx > ARG_MAX));
+    v_u32x4_t cond = ((vx > ARG_MAX));
 
     // Convert _x to double precision
     v_f64x4_t x = cvt_v4_f32_to_f64(_x);
diff --git a/src/optmized/vec/vrs4_logf.c b/src/optmized/vec/vrs4_logf.c
index bc78394..1ce7419 100644
--- a/src/optmized/vec/vrs4_logf.c
+++ b/src/optmized/vec/vrs4_logf.c
@@ -30,7 +30,6 @@
 #include <libm_special.h>
 
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -179,7 +178,7 @@ static const struct {
 static inline v_f32x4_t
 logf_specialcase(v_f32x4_t _x,
                  v_f32x4_t result,
-                 v_i32x4_t cond)
+                 v_u32x4_t cond)
 {
     return call_v4_f32(ALM_PROTO(logf), _x, result, cond);
 }
@@ -192,7 +191,7 @@ ALM_PROTO_OPT(vrs4_logf)(v_f32x4_t _x)
 
     v_32x4 vx = {.f32x4 = _x};
 
-    v_i32x4_t cond = (vx.i32x4 - V_MIN >= V_MAX - V_MIN);
+    v_u32x4_t cond = (vx.i32x4 - V_MIN >= V_MAX - V_MIN);
 
     vx.i32x4 -= V_OFF;
 
diff --git a/src/optmized/vec/vrs4_powf.c b/src/optmized/vec/vrs4_powf.c
index cabd194..931ba52 100644
--- a/src/optmized/vec/vrs4_powf.c
+++ b/src/optmized/vec/vrs4_powf.c
@@ -29,22 +29,21 @@
 #include <libm_special.h>
 
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
 #include <libm/typehelper-vec.h>
 #include <libm/compiler.h>
 
-#define AMD_LIBM_FMA_USABLE 1           /* needed for poly.h */
+#define AMD_LIBM_FMA_USABLE 0           /* needed for poly.h */
 #include <libm/poly-vec.h>
 
 #define VECTOR_LENGTH 4
 #define N 8
 #define TABLE_SIZE (1ULL << N)
 #define MAX_POLYDEGREE  8
-extern const uint64_t log_256[];
-extern const uint64_t log_f_inv_256[];
+extern double log_256[];
+extern const double log_f_inv_256[];
 #define TAB_F_INV log_f_inv_256
 #define TAB_LOG   log_256
 #define MANT_MASK_N  (0x000FF00000000000ULL)
@@ -53,13 +52,16 @@ extern const uint64_t log_f_inv_256[];
 #define DOUBLE_PRECISION_MANTISSA 0x000fffffffffffffULL
 #define ONE_BY_TWO 0x3fe0000000000000ULL
 
+/*
 v_i32x4_t float_bias =  _MM_SET1_I32(SINGLE_PRECISION_BIAS);
 v_u64x4_t mantissa_bits = _MM_SET1_I64(DOUBLE_PRECISION_MANTISSA);
 v_u64x4_t one_by_two = _MM_SET1_I64(ONE_BY_TWO);
 v_u64x4_t mant_8_bits = _MM_SET1_I64(MANT_MASK_N);
-
+*/
 
 static struct {
+    v_i32x4_t float_bias;
+    v_u64x4_t mantissa_bits, one_by_two, mant_8_bits;
     v_u32x4_t v_min, v_max;
     double ALIGN(16) poly[MAX_POLYDEGREE];
     v_f64x4_t ln2;
@@ -67,6 +69,12 @@ static struct {
     .ln2    = _MM_SET1_PD4(0x1.62e42fefa39efp-1), /* ln(2) */
     .v_min  = _MM_SET1_I32(0x00800000),
     .v_max  = _MM_SET1_I32(0x7f800000),
+
+    .float_bias =    _MM_SET1_I32(SINGLE_PRECISION_BIAS),
+    .mantissa_bits = _MM_SET1_I64(DOUBLE_PRECISION_MANTISSA),
+    .one_by_two =    _MM_SET1_I64(ONE_BY_TWO),
+    .mant_8_bits =   _MM_SET1_I64(MANT_MASK_N),
+
     /*
     * Polynomial constants, 1/x! (reciprocal x)
     */
@@ -107,6 +115,11 @@ static struct {
     },
 };
 
+#define SP_BIAS         v_log_data.float_bias
+#define MANTISSA_BITS   v_log_data.mantissa_bits
+#define HALF            v_log_data.one_by_two
+#define MANT_8_BITS     v_log_data.mant_8_bits
+
 #define SCALAR_POWF amd_powf
 #define V_MIN       v_log_data.v_min
 #define V_MAX       v_log_data.v_max
@@ -212,7 +225,7 @@ static struct {
  *
  */
 
-static inline v_f64x4_t look_table_access(const uint64_t* table,
+static inline v_f64x4_t look_table_access(const double* table,
                                           const int vector_size,
                                           v_u64x4_t indices)
 {
@@ -220,7 +233,7 @@ static inline v_f64x4_t look_table_access(const uint64_t* table,
      v_f64x4_t ret;
      for(int i = 0; i < vector_size; i++) {
         j = indices[i];
-        ret[i] = asdouble(table[j]);
+        ret[i] = table[j];
      }
      return ret;
 }
@@ -235,7 +248,7 @@ ALM_PROTO_OPT(vrs4_powf)(__m128 _x,__m128 _y)
 
     u = as_v4_u32_f32(_x);
 
-    v_i32x4_t condition = (u - V_MIN >= V_MAX - V_MIN);
+    v_u32x4_t condition = (u - V_MIN >= V_MAX - V_MIN);
 
     if(any_v4_u32_loop(condition)) {
 
@@ -253,15 +266,15 @@ ALM_PROTO_OPT(vrs4_powf)(__m128 _x,__m128 _y)
 
     v_u64x4_t ux = as_v4_u64_f64(xd);
 
-    v_i32x4_t int_exponent =  (u >> 23) - float_bias;
+    v_i32x4_t int_exponent = (v_i32x4_t) ((u >> 23) - SP_BIAS);
 
-    v_f64x4_t exponent =  _mm256_cvtepi32_pd (int_exponent);
+    v_f64x4_t exponent = (v_f64x4_t) _mm256_cvtepi32_pd ((__m128i)int_exponent);
 
-    v_u64x4_t mant  = ((ux & mantissa_bits) | one_by_two);
+    v_u64x4_t mant  = ((ux & MANTISSA_BITS) | HALF);
 
-    v_u64x4_t index = ux & mant_8_bits;
+    v_u64x4_t index = ux & MANT_8_BITS;
 
-    v_f64x4_t index_times_half = as_v4_f64_u64(index | one_by_two);
+    v_f64x4_t index_times_half = as_v4_f64_u64(index | HALF);
 
     index =  index >> (52 - N);
 
@@ -297,7 +310,7 @@ ALM_PROTO_OPT(vrs4_powf)(__m128 _x,__m128 _y)
 
     v_u64x4_t v = as_v4_u64_f64(ylogx);
 
-    v_i64x4_t condition2 = (v >= EXPF_MAX);
+    v_u64x4_t condition2 = (v >= EXPF_MAX);
 
     v_f64x4_t z = ylogx * INVLN2;
 
diff --git a/src/optmized/vec/vrs4_sinf.c b/src/optmized/vec/vrs4_sinf.c
index 1f12af2..f361ac4 100644
--- a/src/optmized/vec/vrs4_sinf.c
+++ b/src/optmized/vec/vrs4_sinf.c
@@ -37,7 +37,7 @@
 
 /*
  * Signature:
- *    v_f32x8_t amd_vrs8_sinf(v_f32x8_t x)
+ *    v_f32x4_t amd_vrs4_sinf(v_f32x4_t x)
  *
  *
  *
@@ -64,7 +64,7 @@ static struct {
     v_u32x4_t max_arg;
     v_f32x4_t poly_sinf[5];
  } v4_sinf_data = {
-     .max_arg = _MM_SET1_I32(0x4A989680),
+     .max_arg = _MM_SET1_I32(0x49800000), /* 0x1p20f */
      .mask32    = _MM_SET1_I32(0x7fffffff),
      .pi1    = _MM_SET1_PS4(-0x1.921fb6p1f),
      .pi2   = _MM_SET1_PS4(0x1.777a5cp-24f),
@@ -104,7 +104,7 @@ float ALM_PROTO(sinf)(float);
 static inline v_f32x4_t
 sinf_specialcase(v_f32x4_t _x,
                  v_f32x4_t result,
-                 v_i32x4_t cond)
+                 v_u32x4_t cond)
 {
     return call_v4_f32(ALM_PROTO(sinf), _x, result, cond);
 }
diff --git a/src/optmized/vec/vrs4_tanf.c b/src/optmized/vec/vrs4_tanf.c
index 786a146..e4687f8 100644
--- a/src/optmized/vec/vrs4_tanf.c
+++ b/src/optmized/vec/vrs4_tanf.c
@@ -58,7 +58,7 @@ static const struct {
     v_f32x4_t    poly_tanf[7];
 } v4_tanf_data = {
     .sign_mask = _MM_SET1_I32(1U<<31),
-    .arg_max   = _MM_SET1_I32(0x49742400), /* 10^6 */
+    .arg_max   = _MM_SET1_I32(0x49800000), /* 0x1p20f */
     .huge      = _MM_SET1_PS4(0x1.80000000p23f),
     .invhalfpi = _MM_SET1_PS4(0x1.45f306p-1f),
     .halfpi1   = _MM_SET1_PS4(-0x1.921fb6p0f),
@@ -104,7 +104,7 @@ extern float tanf_specialcase(float);
 extern float tanf_oddcase(float);
 
 static inline v_f32x4_t
-vrs4_tanf_oddcase(v_f32x4_t _x, v_f32x4_t result, v_i32x4_t odd)
+vrs4_tanf_oddcase(v_f32x4_t _x, v_f32x4_t result, v_u32x4_t odd)
 {
     /* We send the result in this case as we have already computed them */
     return call_v4_f32(tanf_oddcase, result, _x, odd);
@@ -112,7 +112,7 @@ vrs4_tanf_oddcase(v_f32x4_t _x, v_f32x4_t result, v_i32x4_t odd)
 #endif
 
 static inline v_f32x4_t
-vrs4_tanf_specialcase(v_f32x4_t _x, v_f32x4_t result, v_i32x4_t cond)
+vrs4_tanf_specialcase(v_f32x4_t _x, v_f32x4_t result, v_u32x4_t cond)
 {
     return call_v4_f32(tanf_specialcase, _x, result, cond);
 }
@@ -151,7 +151,7 @@ ALM_PROTO_OPT(vrs4_tanf)(__m128 xf32x4)
     v_u32x4_t   sign = {0}, n;
     v_u32x4_t   ux = as_v4_u32_f32(xf32x4);
 
-    v_i32x4_t  cond = (ux  & ~ALM_TANF_SIGN_MASK32) > ALM_TANF_ARG_MAX;
+    v_u32x4_t  cond = (ux  & ~ALM_TANF_SIGN_MASK32) > ALM_TANF_ARG_MAX;
 
 	sign = ux & ALM_TANF_SIGN_MASK32;
 
diff --git a/src/optmized/vec/vrs4_tanhf.c b/src/optmized/vec/vrs4_tanhf.c
new file mode 100644
index 0000000..a0faa41
--- /dev/null
+++ b/src/optmized/vec/vrs4_tanhf.c
@@ -0,0 +1,123 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * Signature:
+ *   v_f32x4_t vrs4_tanhf(v_f32x4_t x)
+ *
+ ******************************************
+ * Implementation Notes
+ * ----------------------
+ * To compute vrs4_tanhf(v_f32x4_t x)
+ * Let y = |x|
+ * If 0 <= y < 0x1.154246p3
+ *    Let z = e^(-2.0 * y) - 1      -(1)
+ *
+ *    Using (1), tanhf(y) can be calculated as,
+ *    tanhf(y) = -z / (z + 2.0)
+ *
+ * For other cases, call scalar tanhf()
+ *
+ * If x < 0, then we use the identity
+ *       tanhf(-x) = -tanhf(x)
+ *
+ * Max ULP of current implementation: 1
+ *
+ */
+
+#include <stdint.h>
+#include <emmintrin.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+                v_u32x4_t arg_max, sign_mask;
+                v_f32x4_t one, two;
+              } v4_tanhf_data = {
+                                    .arg_max   = _MM_SET1_I32(0x410AA123),
+                                    .sign_mask = _MM_SET1_I32(0x7FFFFFFF),
+                                    .two       = _MM_SET1_PS4(0x1p1f),
+                                    .one       = _MM_SET1_PS4(0x1p0f),
+                                };
+
+#define V4_TANHF_ARG_MAX    v4_tanhf_data.arg_max
+#define V4_TANHF_SIGN_MASK  v4_tanhf_data.sign_mask
+#define V4_TANHF_ONE        v4_tanhf_data.one
+#define V4_TANHF_TWO        v4_tanhf_data.two
+
+float ALM_PROTO(tanhf)(float);
+v_f32x4_t ALM_PROTO(vrs4_expf)(v_f32x4_t);
+
+static inline v_f32x4_t
+tanhf_specialcase(v_f32x4_t _x, v_f32x4_t result, v_u32x4_t cond, v_u32x4_t sign)
+{
+    return call_v4_f32(ALM_PROTO(tanhf), _x, result, cond);
+}
+
+v_f32x4_t
+ALM_PROTO_OPT(vrs4_tanhf)(v_f32x4_t x)
+{
+
+    /* Get sign of input argument */
+    v_u32x4_t ux = as_v4_u32_f32(x);
+    v_u32x4_t sign = ux & (~V4_TANHF_SIGN_MASK);
+
+    /* Get absolute value of input argument */
+    ux = ux & V4_TANHF_SIGN_MASK;
+    v_f32x4_t y = as_v4_f32_u32(ux);
+
+    /* Check for special cases */
+    v_u32x4_t cond = ux  <=  V4_TANHF_ARG_MAX;
+
+    /* z = e^(-2.0 * y) + 1 */
+    v_f32x4_t z = ALM_PROTO(vrs4_expf)( -V4_TANHF_TWO * y);
+    z = z - V4_TANHF_ONE;
+
+    /* Calculate -z / (z + 2.0) */
+    v_f32x4_t result = -z / (z + V4_TANHF_TWO);
+
+    /* Result is -ve if input argument is -ve */
+    result = as_v4_f32_u32(sign ^ as_v4_u32_f32(result));
+
+    /* If any of the input values are greater than ARG_MAX,
+     * call scalar tanhf
+     */
+    if(unlikely(any_v4_u32_loop(cond)))
+        return tanhf_specialcase(x, result,cond, sign);
+
+    return result;
+
+}
+
diff --git a/src/optmized/vec/vrs8_cosf.c b/src/optmized/vec/vrs8_cosf.c
index 705989b..6f6b3fe 100644
--- a/src/optmized/vec/vrs8_cosf.c
+++ b/src/optmized/vec/vrs8_cosf.c
@@ -114,7 +114,7 @@ static struct {
 float ALM_PROTO(cosf)(float);
 
 static inline v_f32x8_t
-cosf_specialcase(v_f32x8_t _x, v_f32x8_t result, v_i32x8_t cond)
+cosf_specialcase(v_f32x8_t _x, v_f32x8_t result, v_u32x8_t cond)
 {
     return call_v8_f32(ALM_PROTO(cosf), _x, result, cond);
 }
@@ -154,14 +154,7 @@ ALM_PROTO_OPT(vrs8_cosf)(v_f32x8_t x)
     poly = POLY_EVAL_ODD_9(frac, C0, C1, C2, C3, C4);
 
     /* If n is odd, result is negative */
-    for (int i =0; i<8; i++)
-    {
-        if(odd[i])
-            result[i] = -poly[i];
-        else
-            result[i] = poly[i];
-    }
-
+    result = as_v8_f32_u32(as_v8_u32_f32(poly) ^ odd);
 
     /* If any of the input values are greater than ARG_MAX,
      * call scalar cosf
diff --git a/src/optmized/vec/vrs8_coshf.c b/src/optmized/vec/vrs8_coshf.c
new file mode 100644
index 0000000..5ef781e
--- /dev/null
+++ b/src/optmized/vec/vrs8_coshf.c
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ */
+
+/*
+ * ISO-IEC-10967-2: Elementary Numerical Functions
+ * Signature:
+ *   v_f32x8_t vrs8_coshf(v_f32x_t x)
+ *
+ * Spec:
+ *   coshf(|x| > 89.415985107421875) = Infinity
+ *   coshf(Infinity)  = infinity
+ *   coshf(-Infinity) = infinity
+ *
+ ******************************************
+ * Implementation Notes
+ * ---------------------
+ *
+ * cosh(x) = (exp(x) + exp(-x))/2
+ * cosh(-x) = +cosh(x)
+ *
+ * checks for special cases
+ * if ( asint(x) > infinity) return x with overflow exception and
+ * return x.
+ * if x is NaN then raise invalid FP operation exception and return x.
+ *
+ *  coshf = v/2 * exp(x - log(v)) where v = 0x1.0000e8p-1
+ *
+ */
+
+#include <stdint.h>
+#include <emmintrin.h>
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+static struct {
+    v_u32x8_t arg_max, sign_mask;
+    v_f32x8_t logV, invV2, halfV;
+    v_f32x8_t one;
+ } v8_coshf_data = {
+        .sign_mask = _MM256_SET1_PS8(0x7FFFFFFF),
+        .arg_max = _MM256_SET1_PS8(0x42B2D4FC),
+        .logV = _MM256_SET1_PS8(0x1.62e6p-1f),
+        .invV2 = _MM256_SET1_PS8(0x1.fffc6p-3f),
+        .halfV = _MM256_SET1_PS8(0x1.0000e8p0f),
+        .one = _MM256_SET1_PS8(1.0f),
+};
+
+#define SIGN_MASK v8_coshf_data.sign_mask
+#define LOGV      v8_coshf_data.logV
+#define INVV2     v8_coshf_data.invV2
+#define ONE       v8_coshf_data.one
+#define HALFVM1   v8_coshf_data.halfVm1
+#define HALFV     v8_coshf_data.halfV
+#define ARG_MAX   v8_coshf_data.arg_max
+
+v_f32x8_t ALM_PROTO(vrs8_expf)(v_f32x8_t);
+float ALM_PROTO(coshf)(float);
+
+static inline v_f32x8_t
+coshf_specialcase(v_f32x8_t _x, v_f32x8_t result, v_u32x8_t cond)
+{
+    return call_v8_f32(ALM_PROTO(coshf), _x, result, cond);
+}
+
+
+v_f32x8_t ALM_PROTO_OPT(vrs8_coshf)(v_f32x8_t x)
+{
+
+    v_f32x8_t z, y, result;
+
+    v_u32x8_t ux = as_v8_u32_f32(x) & SIGN_MASK;
+
+    y = as_v8_f32_u32(ux);
+
+    v_u32x8_t cond = ux > ARG_MAX;
+
+    z = ALM_PROTO(vrs8_expf)(y - LOGV);
+
+    result = HALFV * (z + INVV2 * ONE / z);
+
+    if(unlikely(any_v8_u32_loop(cond))) {
+
+        return coshf_specialcase(x, result, cond);
+
+    }
+
+    return result;
+
+}
+
+
+
+
diff --git a/src/optmized/vec/vrs8_expf.c b/src/optmized/vec/vrs8_expf.c
index faecdea..50d7bd1 100644
--- a/src/optmized/vec/vrs8_expf.c
+++ b/src/optmized/vec/vrs8_expf.c
@@ -61,7 +61,6 @@
 #include <libm_util_amd.h>
 #include <libm_special.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
 #include <libm/typehelper-vec.h>
@@ -74,7 +73,7 @@ static const struct {
     v_f32x8_t   tblsz_byln2;
     v_f32x8_t   ln2_tbl_head, ln2_tbl_tail;
     v_f32x8_t   huge;
-    v_i32x8_t   arg_max;
+    v_u32x8_t   arg_max;
     v_i32x8_t   mask;
     v_i32x8_t   expf_bias;
     v_f32x8_t   poly_expf_5[5];
@@ -152,13 +151,13 @@ ALM_PROTO_OPT(vrs8_expf_experimental)(v_f32x8_t _x)
 {
 
     // vx = int(x)
-    v_i32x8_t vx = as_v8_u32_f32(_x);
+    v_u32x8_t vx = as_v8_u32_f32(_x);
 
     // Get absolute value of vx
     vx = vx & MASK;
 
     // Check if -103 < vx < 88
-    v_i32x8_t cond = (vx > ARG_MAX);
+    v_u32x8_t cond = (vx > ARG_MAX);
 
     // x * (64.0/ln(2))
     v_f32x8_t z = _x * TBL_LN2;
@@ -179,7 +178,7 @@ ALM_PROTO_OPT(vrs8_expf_experimental)(v_f32x8_t _x)
 
     // m = (n - j)/64
     // Calculate 2^m
-    v_i32x8_t m = (n + EXPF_BIAS) << 23;
+    v_u32x8_t m = (n + EXPF_BIAS) << 23;
 
     // Compute polynomial
     /* poly = C1 + C2*r + C3*r^2 + C4*r^3 + C5*r^4 + C6*r^5
@@ -224,13 +223,13 @@ ALM_PROTO_OPT(vrs8_expf)(v_f32x8_t _x)
 {
 
     // vx = int(x)
-    v_i32x8_t vx = as_v8_u32_f32(_x);
+    v_u32x8_t vx = as_v8_u32_f32(_x);
 
     // Get absolute value of vx
     vx = vx & MASK;
 
     // Check if -103 < vx < 88
-    v_i32x8_t cond = (vx > ARG_MAX);
+    v_u32x8_t cond = (vx > ARG_MAX);
 
     // x * (64.0/ln(2))
     v_f32x8_t z = _x * TBL_LN2;
@@ -251,7 +250,7 @@ ALM_PROTO_OPT(vrs8_expf)(v_f32x8_t _x)
 
     // m = (n - j)/64
     // Calculate 2^m
-    v_i32x8_t m = (n + EXPF_BIAS) << 23;
+    v_u32x8_t m = (n + EXPF_BIAS) << 23;
 
     // Compute polynomial
     /* poly = A1 + A2*r + A3*r^2 + A4*r^3 + A5*r^4 + A6*r^5
diff --git a/src/optmized/vec/vrs8_logf.c b/src/optmized/vec/vrs8_logf.c
index 826767b..aa8d52b 100644
--- a/src/optmized/vec/vrs8_logf.c
+++ b/src/optmized/vec/vrs8_logf.c
@@ -29,7 +29,6 @@
 #include <libm_special.h>
 
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -178,13 +177,13 @@ static const struct {
 static inline v_f32x8_t
 logf_specialcase(v_f32x8_t _x,
                  v_f32x8_t result,
-                 v_i32x8_t cond)
+                 v_u32x8_t cond)
 {
 #if 1
     v_f32x4_t _x1 = {_x[0], _x[1], _x[2], _x[3]},
         _x2 = {_x[4], _x[5], _x[6], _x[7]};
 
-    v_i32x4_t _cond1 = {cond[0], cond[1], cond[2], cond[3]},
+    v_u32x4_t _cond1 = {cond[0], cond[1], cond[2], cond[3]},
         _cond2 = {cond[4], cond[5], cond[6], cond[7]};
 
     v_f32x4_t _res1 = {result[0], result[1], result[2], result[3]},
@@ -209,7 +208,7 @@ ALM_PROTO_OPT(vrs8_logf)(v_f32x8_t _x)
 
     v_32x8 vx = {.f32x8 = _x};
 
-    v_i32x8_t cond = (vx.i32x8 - V_MIN >= V_MAX - V_MIN);
+    v_u32x8_t cond = (vx.i32x8 - V_MIN >= V_MAX - V_MIN);
 
     vx.i32x8 -= V_OFF;
 
diff --git a/src/optmized/vec/vrs8_powf.c b/src/optmized/vec/vrs8_powf.c
index 63d1bbc..f5e9c44 100644
--- a/src/optmized/vec/vrs8_powf.c
+++ b/src/optmized/vec/vrs8_powf.c
@@ -29,7 +29,6 @@
 #include <libm_special.h>
 #include <immintrin.h>
 #include <libm_macros.h>
-#include <libm_amd.h>
 #include <libm/amd_funcs_internal.h>
 #include <libm/types.h>
 #include <libm/typehelper.h>
@@ -42,8 +41,8 @@
 #define N 8
 #define TABLE_SIZE (1ULL << N)
 #define MAX_POLYDEGREE  8
-extern const uint64_t log_256[];
-extern const uint64_t log_f_inv_256[];
+extern double log_256[];
+extern const double log_f_inv_256[];
 #define TAB_F_INV log_f_inv_256
 #define TAB_LOG   log_256
 #define MANT_MASK_N  (0x000FF00000000000ULL)
@@ -242,7 +241,7 @@ powf_specialcase(v_f32x8_t _x,
 }
 
 static inline v_f64x4_t
-look_table_access(const uint64_t* table,
+look_table_access(const double* table,
                   const int vector_size,
                   v_u64x4_t indices)
 {
@@ -250,7 +249,7 @@ look_table_access(const uint64_t* table,
      v_f64x4_t ret;
      for(int i = 0; i < vector_size; i++) {
         j = indices[i];
-        ret[i] = asdouble(table[j]);
+        ret[i] = table[j];
      }
      return ret;
 }
@@ -270,7 +269,7 @@ ALM_PROTO_OPT(vrs8_powf)(__m256 x,__m256 y)
 
     v_i32x8_t condition = (u - V_MIN >= V_MAX - V_MIN);
 
-    v_i32x8_t int_exponent = (u >> 23) - SP_BIAS;
+    v_i32x8_t int_exponent = (v_i32x8_t)(u >> 23) - SP_BIAS;
 
     v_f32x4_t _x[2];
 
@@ -291,9 +290,9 @@ ALM_PROTO_OPT(vrs8_powf)(__m256 x,__m256 y)
 
     _y[1] = _mm256_extractf128_ps(y, 1);
 
-    exponent_array[0] = _mm256_extractf128_si256(int_exponent, 0);
+    exponent_array[0] = (v_i32x4_t)_mm256_extractf128_si256((__m256i)int_exponent, 0);
 
-    exponent_array[1] = _mm256_extractf128_si256(int_exponent, 1);
+    exponent_array[1] = (v_i32x4_t)_mm256_extractf128_si256((__m256i)int_exponent, 1);
 
     for(int lane = 0; lane < 2; lane++) {
 
@@ -303,7 +302,7 @@ ALM_PROTO_OPT(vrs8_powf)(__m256 x,__m256 y)
 
         v_u64x4_t ux = as_v4_u64_f64(xd);
 
-        v_f64x4_t exponent =  _mm256_cvtepi32_pd (exponent_array[lane]);
+        v_f64x4_t exponent =  _mm256_cvtepi32_pd ((__m128i)exponent_array[lane]);
 
         v_u64x4_t mant  = ((ux & MANTISSA_BITS) | HALF);
 
diff --git a/src/optmized/vec/vrs8_sinf.c b/src/optmized/vec/vrs8_sinf.c
index dcbc96a..e847278 100644
--- a/src/optmized/vec/vrs8_sinf.c
+++ b/src/optmized/vec/vrs8_sinf.c
@@ -64,7 +64,7 @@ static struct {
     v_u32x8_t max_arg;
     v_f32x8_t poly_sinf[5];
  } v8_sinf_data = {
-     .max_arg = _MM256_SET1_I32(0x4A989680),
+     .max_arg = _MM256_SET1_I32(0x49800000), /* 0x1p20f */
      .mask32    = _MM256_SET1_I32(0x7fffffff),
      .pi1    = _MM256_SET1_PS8(-0x1.921fb6p1),
      .pi2   = _MM256_SET1_PS8(0x1.777a5cp-24),
@@ -105,9 +105,11 @@ float ALM_PROTO(sinf)(float);
 static inline v_f32x8_t
 sinf_specialcase(v_f32x8_t _x,
                  v_f32x8_t result,
-                 v_i32x8_t cond)
+                 v_u32x8_t cond)
 {
+
     return call_v8_f32(ALM_PROTO(sinf), _x, result, cond);
+
 }
 
 v_f32x8_t
@@ -124,7 +126,7 @@ ALM_PROTO_OPT(vrs8_sinf)(v_f32x8_t x)
 
     sign = ux & ~ALM_SIGN_MASK32;
 
-    v_u32x8_t cmp = (ux & ~ALM_SIGN_MASK32) > (V8_SINF_ARG_MAX);
+    v_u32x8_t cmp = (ux & ALM_SIGN_MASK32) > (V8_SINF_ARG_MAX);
 
     r  = as_v8_f32_u32(ux & ALM_SIGN_MASK32);
 
diff --git a/src/optmized/vec/vrs8_tanf.c b/src/optmized/vec/vrs8_tanf.c
index 4bccad5..2650734 100644
--- a/src/optmized/vec/vrs8_tanf.c
+++ b/src/optmized/vec/vrs8_tanf.c
@@ -58,7 +58,7 @@ static const struct {
     v_f32x8_t    poly_tanf[7];
 } v8_tanf_data = {
     .sign_mask = _MM256_SET1_I32(1U<<31),
-    .arg_max   = _MM256_SET1_I32(0x49742400), /* Close to 10^6 */
+    .arg_max   = _MM256_SET1_I32(0x49800000),  /* 0x1p20f */
     .huge      = _MM_SET1_PS8(0x1.80000000p23f),
     .invhalfpi = _MM_SET1_PS8(0x1.45f306p-1f),
     .halfpi1   = _MM_SET1_PS8(-0x1.921fb6p0f),
@@ -102,7 +102,7 @@ static const struct {
 float tanf_specialcase(float);
 
 static inline v_f32x8_t
-vrs8_tanf_specialcase(v_f32x8_t _x, v_f32x8_t result, v_i32x8_t cond)
+vrs8_tanf_specialcase(v_f32x8_t _x, v_f32x8_t result, v_u32x8_t cond)
 {
     return call_v8_f32(tanf_specialcase, _x, result, cond);
 }
@@ -140,7 +140,7 @@ ALM_PROTO_OPT(vrs8_tanf)(__m256 xf32x8)
     v_u32x8_t   sign, n;
     v_u32x8_t   ux = as_v8_u32_f32(xf32x8);
     int32_t i = 0;
-    v_i32x8_t  cond = (ux  & ~ALM_TANF_SIGN_MASK32) > ALM_TANF_ARG_MAX;
+    v_u32x8_t  cond = (ux  & ~ALM_TANF_SIGN_MASK32) > ALM_TANF_ARG_MAX;
 
     sign = ux & ALM_TANF_SIGN_MASK32;
 
diff --git a/src/optmized/vec/vrs8_tanhf.c b/src/optmized/vec/vrs8_tanhf.c
new file mode 100644
index 0000000..ec6aecb
--- /dev/null
+++ b/src/optmized/vec/vrs8_tanhf.c
@@ -0,0 +1,94 @@
+/*
+ * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/*
+ * Signature:
+ *   v_f32x8_t vrs8_tanhf(v_f32x8_t x)
+ *
+ ******************************************
+ * Implementation Notes
+ * ----------------------
+ * To compute vrs8_tanhf(v_f32x8_t x)
+ * Split the 8-element vector into two 4-element vectors
+ * For each 4-element vector, call vrs4_tanhf
+ *
+ * vrs4_tanhf works as follows:
+ * Let y = |x|
+ * If 0 <= y < 0x1.154246p3
+ *    Let z = e^(-2.0 * y) - 1      -(1)
+ *
+ *    Using (1), tanhf(y) can be calculated as,
+ *    tanhf(y) = -z / (z + 2.0)
+ *
+ * For other cases, call scalar tanhf()
+ *
+ * If x < 0, then we use the identity
+ *       tanhf(-x) = -tanhf(x)
+ *
+ * Max ULP of current implementation: 1
+ *
+ */
+
+#include <stdint.h>
+#include <emmintrin.h>
+
+#include <libm_util_amd.h>
+#include <libm_special.h>
+#include <libm_macros.h>
+
+#include <libm/types.h>
+#include <libm/typehelper.h>
+#include <libm/typehelper-vec.h>
+#include <libm/compiler.h>
+#include <libm/poly.h>
+
+v_f32x4_t ALM_PROTO(vrs4_tanhf)(v_f32x4_t);
+
+v_f32x8_t
+ALM_PROTO_OPT(vrs8_tanhf)(v_f32x8_t x)
+{
+
+    v_f32x4_t _x[2], op[2];
+
+    /* Split the 8-element vector to two 4-element vectors */
+    _x[0] = _mm256_extractf128_ps(x, 0);
+    _x[1] = _mm256_extractf128_ps(x, 1);
+
+    /* Call vrs4_tanhf for each 4-element vector */
+    for(int i = 0; i < 2; i++)
+    {
+        op[i] = ALM_PROTO(vrs4_tanhf)(_x[i]);
+    }
+
+    /* Combine the results to one 8-element vector */
+    v_f32x8_t result = _mm256_set_m128(op[1], op[0]);
+
+    return result;
+
+
+}
+
diff --git a/src/ref/acos.c b/src/ref/acos.c
index 412e952..179ae3c 100644
--- a/src/ref/acos.c
+++ b/src/ref/acos.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/acosf.c b/src/ref/acosf.c
index 65afd08..42a8883 100644
--- a/src/ref/acosf.c
+++ b/src/ref/acosf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/acosh.c b/src/ref/acosh.c
index 8dcdbe3..08c15b8 100644
--- a/src/ref/acosh.c
+++ b/src/ref/acosh.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/acoshf.c b/src/ref/acoshf.c
index 58f6af7..aeed055 100644
--- a/src/ref/acoshf.c
+++ b/src/ref/acoshf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/asin.c b/src/ref/asin.c
index d3b919f..205b6f0 100644
--- a/src/ref/asin.c
+++ b/src/ref/asin.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/asinf.c b/src/ref/asinf.c
index aa7b419..150e1e5 100644
--- a/src/ref/asinf.c
+++ b/src/ref/asinf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/asinh.c b/src/ref/asinh.c
index 24b984e..68046d8 100644
--- a/src/ref/asinh.c
+++ b/src/ref/asinh.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/asinhf.c b/src/ref/asinhf.c
index 1c5cf15..49b5477 100644
--- a/src/ref/asinhf.c
+++ b/src/ref/asinhf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/atan.c b/src/ref/atan.c
index 07b612a..0deb4f4 100644
--- a/src/ref/atan.c
+++ b/src/ref/atan.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/atanf.c b/src/ref/atanf.c
index a33fcb3..4dc3e42 100644
--- a/src/ref/atanf.c
+++ b/src/ref/atanf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/ceil.c b/src/ref/ceil.c
index dd965da..86aff79 100644
--- a/src/ref/ceil.c
+++ b/src/ref/ceil.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/ceilf.c b/src/ref/ceilf.c
index 5d1f777..a987bfa 100644
--- a/src/ref/ceilf.c
+++ b/src/ref/ceilf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/cmplx/SConscript b/src/ref/cmplx/SConscript
index 15dc46e..ea45ee3 100644
--- a/src/ref/cmplx/SConscript
+++ b/src/ref/cmplx/SConscript
@@ -1,4 +1,4 @@
-# Copyright (C) 2018-2020 Advanced Micro Devices, Inc. All rights reserved.
+# Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without modification,
 # are permitted provided that the following conditions are met:
@@ -22,7 +22,6 @@
 # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 # POSSIBILITY OF SUCH DAMAGE.
 
-
 # Inherit global environment
 Import('env')
 
diff --git a/src/ref/cosh.c b/src/ref/cosh.c
index f5186be..ee8560c 100644
--- a/src/ref/cosh.c
+++ b/src/ref/cosh.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/coshf.c b/src/ref/coshf.c
index 778b7e9..6dd7123 100644
--- a/src/ref/coshf.c
+++ b/src/ref/coshf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/finite.c b/src/ref/finite.c
index c8a31f2..e872b85 100644
--- a/src/ref/finite.c
+++ b/src/ref/finite.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/finitef.c b/src/ref/finitef.c
index bca33a1..7ff7e60 100644
--- a/src/ref/finitef.c
+++ b/src/ref/finitef.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/floor.c b/src/ref/floor.c
index 57c23c2..fafba45 100644
--- a/src/ref/floor.c
+++ b/src/ref/floor.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/floorf.c b/src/ref/floorf.c
index fa8d62f..63fb82e 100644
--- a/src/ref/floorf.c
+++ b/src/ref/floorf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/frexp.c b/src/ref/frexp.c
index 0d63ffb..b57f328 100644
--- a/src/ref/frexp.c
+++ b/src/ref/frexp.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/hypot.c b/src/ref/hypot.c
index 47349b8..5ff9a72 100644
--- a/src/ref/hypot.c
+++ b/src/ref/hypot.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/hypotf.c b/src/ref/hypotf.c
index fd7dc78..d0c0929 100644
--- a/src/ref/hypotf.c
+++ b/src/ref/hypotf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/ldexp.c b/src/ref/ldexp.c
index c12939e..18505c0 100644
--- a/src/ref/ldexp.c
+++ b/src/ref/ldexp.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/ldexpf.c b/src/ref/ldexpf.c
index c658968..c8c77f6 100644
--- a/src/ref/ldexpf.c
+++ b/src/ref/ldexpf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/llrint.c b/src/ref/llrint.c
index 25c1ad7..42f1c05 100644
--- a/src/ref/llrint.c
+++ b/src/ref/llrint.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/llrintf.c b/src/ref/llrintf.c
index 3aace9a..5755f27 100644
--- a/src/ref/llrintf.c
+++ b/src/ref/llrintf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/logb.c b/src/ref/logb.c
index f2c21fd..e332809 100644
--- a/src/ref/logb.c
+++ b/src/ref/logb.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/logbf.c b/src/ref/logbf.c
index c5c80f9..a6ca9f1 100644
--- a/src/ref/logbf.c
+++ b/src/ref/logbf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/lround.c b/src/ref/lround.c
index 3e25898..bd71f6e 100644
--- a/src/ref/lround.c
+++ b/src/ref/lround.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/modf.c b/src/ref/modf.c
index a6d99df..6b6d53d 100644
--- a/src/ref/modf.c
+++ b/src/ref/modf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/modff.c b/src/ref/modff.c
index fe5abcd..3fa61d8 100644
--- a/src/ref/modff.c
+++ b/src/ref/modff.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/nan.c b/src/ref/nan.c
index d48eb3b..3c31592 100644
--- a/src/ref/nan.c
+++ b/src/ref/nan.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/nanf.c b/src/ref/nanf.c
index 4ced622..bffa9c0 100644
--- a/src/ref/nanf.c
+++ b/src/ref/nanf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/nearbyintf.c b/src/ref/nearbyintf.c
index 46d11cb..492eacc 100644
--- a/src/ref/nearbyintf.c
+++ b/src/ref/nearbyintf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/nextafter.c b/src/ref/nextafter.c
index 401d3ed..97c1e7c 100644
--- a/src/ref/nextafter.c
+++ b/src/ref/nextafter.c
@@ -23,8 +23,6 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  *
- *//*
- * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/nexttowardf.c b/src/ref/nexttowardf.c
index 89130b8..37998c7 100644
--- a/src/ref/nexttowardf.c
+++ b/src/ref/nexttowardf.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
+ *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  * 1. Redistributions of source code must retain the above copyright notice,
diff --git a/src/ref/remainder_piby2.c b/src/ref/remainder_piby2.c
index e137b32..591dea5 100644
--- a/src/ref/remainder_piby2.c
+++ b/src/ref/remainder_piby2.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/remainder_piby2d2f.c b/src/ref/remainder_piby2d2f.c
index a16e78b..406e134 100644
--- a/src/ref/remainder_piby2d2f.c
+++ b/src/ref/remainder_piby2d2f.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 void __amd_remainder_piby2d2f(unsigned long long ux, double *r, int *region);
diff --git a/src/ref/remquo.c b/src/ref/remquo.c
index 96b0297..4b18ef9 100644
--- a/src/ref/remquo.c
+++ b/src/ref/remquo.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/rint.c b/src/ref/rint.c
index 1654ed4..46fb19a 100644
--- a/src/ref/rint.c
+++ b/src/ref/rint.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/rintf.c b/src/ref/rintf.c
index 88802f6..b6572b1 100644
--- a/src/ref/rintf.c
+++ b/src/ref/rintf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/roundf.c b/src/ref/roundf.c
index bff460c..7abe1ef 100644
--- a/src/ref/roundf.c
+++ b/src/ref/roundf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/scalbln.c b/src/ref/scalbln.c
index ab14ad0..8f869a4 100644
--- a/src/ref/scalbln.c
+++ b/src/ref/scalbln.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/scalblnf.c b/src/ref/scalblnf.c
index 18065ca..6c2303c 100644
--- a/src/ref/scalblnf.c
+++ b/src/ref/scalblnf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/scalbn.c b/src/ref/scalbn.c
index 9aaca33..f2e42a6 100644
--- a/src/ref/scalbn.c
+++ b/src/ref/scalbn.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/scalbnf.c b/src/ref/scalbnf.c
index 82f7f72..6be7251 100644
--- a/src/ref/scalbnf.c
+++ b/src/ref/scalbnf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "fn_macros.h"
diff --git a/src/ref/sinh.c b/src/ref/sinh.c
index 08b0f29..21b1b6f 100644
--- a/src/ref/sinh.c
+++ b/src/ref/sinh.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/sinhf.c b/src/ref/sinhf.c
index ce11860..796ba8b 100644
--- a/src/ref/sinhf.c
+++ b/src/ref/sinhf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/sqrt.c b/src/ref/sqrt.c
index 18a5e32..6ac3aa2 100644
--- a/src/ref/sqrt.c
+++ b/src/ref/sqrt.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include <emmintrin.h>
diff --git a/src/ref/sqrtf.c b/src/ref/sqrtf.c
index 4c8dbca..078cd96 100644
--- a/src/ref/sqrtf.c
+++ b/src/ref/sqrtf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include <emmintrin.h>
diff --git a/src/ref/tan.c b/src/ref/tan.c
index 6c13f0b..7f744bb 100644
--- a/src/ref/tan.c
+++ b/src/ref/tan.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h" 
diff --git a/src/ref/tanf.c b/src/ref/tanf.c
index 2555283..6037f8f 100644
--- a/src/ref/tanf.c
+++ b/src/ref/tanf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/tanh.c b/src/ref/tanh.c
index ef18ea5..daf4589 100644
--- a/src/ref/tanh.c
+++ b/src/ref/tanh.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/tanhf.c b/src/ref/tanhf.c
index 7be4fc1..582b17f 100644
--- a/src/ref/tanhf.c
+++ b/src/ref/tanhf.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/ref/vrd2_cosh.c b/src/ref/vrd2_cosh.c
index b360584..2d7a792 100644
--- a/src/ref/vrd2_cosh.c
+++ b/src/ref/vrd2_cosh.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 /*This is quick prototype for the pow vector variant for the
diff --git a/src/ref/vrd4_expm1.c b/src/ref/vrd4_expm1.c
index c6d6364..a1d303d 100644
--- a/src/ref/vrd4_expm1.c
+++ b/src/ref/vrd4_expm1.c
@@ -1,28 +1,28 @@
 /*
  * Copyright (C) 2008-2020 Advanced Micro Devices, Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. Neither the name of the copyright holder nor the names of its contributors
- *    may be used to endorse or promote products derived from this software without
- *    specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
- * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
- * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- *
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
  */
 
 #include "libm_amd.h"
diff --git a/src/version.build.h b/src/version.build.h
index 95c77f6..3b7afbb 100644
--- a/src/version.build.h
+++ b/src/version.build.h
@@ -3,7 +3,7 @@
 * DO NOT EDIT!
 */
 
-static const char VERSION_STRING[] = "fa9795e (modified)";
+static const char VERSION_STRING[] = "4033e02 (modified)";
 
 static const char* alm_get_build(void);
 static const char* alm_get_build(void)
-- 
2.17.1

